from typing import Optional, Union                                                                                                                                                                       # test.py:9
import argparse                                                                                                                                                                                          # test.py:10
import numpy as np                                                                                                                                                                                       # test.py:11
import tiktoken                                                                                                                                                                                          # test.py:12
from tinygrad import Tensor, TinyJit, Device, GlobalCounters, Variable                                                                                                                                   # test.py:13
from tinygrad.tensor import Tensor                            # noqa: F401                                                                                                                               # __init__.py:1
from __future__ import annotations                                                                                                                                                                       # tensor.py:2
import dataclasses                                                                                                                                                                                       # tensor.py:3
import time, math, itertools, functools, struct, sys, inspect                                                                                                                                            # tensor.py:4
from contextlib import ContextDecorator                                                                                                                                                                  # tensor.py:5
from typing import List, Tuple, Callable, Optional, ClassVar, Type, Union, Sequence, Dict, DefaultDict, cast, get_args, Set                                                                              # tensor.py:6
from collections import defaultdict                                                                                                                                                                      # tensor.py:7
import numpy as np                                                                                                                                                                                       # tensor.py:8
from tinygrad.dtype import DType, DTypeLike, dtypes, ImageDType, ConstType, least_upper_float, least_upper_dtype, sum_acc_dtype, to_dtype                                                                # tensor.py:10
from typing import Final, Optional, ClassVar, Set, Tuple, Dict, Union                                                                                                                                    # dtype.py:1
from dataclasses import dataclass                                                                                                                                                                        # dtype.py:2
import functools                                                                                                                                                                                         # dtype.py:3
from tinygrad.helpers import getenv                                                                                                                                                                      # dtype.py:4
from __future__ import annotations                                                                                                                                                                       # helpers.py:1
import os, functools, platform, time, re, contextlib, operator, hashlib, pickle, sqlite3, cProfile, pstats, tempfile, pathlib, string, ctypes, sys                                                       # helpers.py:2
import itertools, urllib.request, subprocess, shutil, math, json, contextvars                                                                                                                            # helpers.py:3
from dataclasses import dataclass                                                                                                                                                                        # helpers.py:4
from typing import Dict, Tuple, Union, List, ClassVar, Optional, Iterable, Any, TypeVar, TYPE_CHECKING, Callable, Sequence                                                                               # helpers.py:5
if TYPE_CHECKING:  # TODO: remove this and import TypeGuard from typing once minimum python supported version is 3.10                                                                                    # helpers.py:6
T = TypeVar("T")                                                                                                                                                                                         # helpers.py:10
U = TypeVar("U")                                                                                                                                                                                         # helpers.py:11
OSX = platform.system() == "Darwin"                                                                                                                                                                      # helpers.py:16
CI = os.getenv("CI", "") != ""                                                                                                                                                                           # helpers.py:17

class Context(contextlib.ContextDecorator):                                                                                                                                                              # helpers.py:81
  stack: ClassVar[List[dict[str, int]]] = [{}]                                                                                                                                                           # helpers.py:82

class ContextVar:                                                                                                                                                                                        # helpers.py:91
  _cache: ClassVar[Dict[str, ContextVar]] = {}                                                                                                                                                           # helpers.py:92
  value: int                                                                                                                                                                                             # helpers.py:93
  key: str                                                                                                                                                                                               # helpers.py:94

DEBUG, IMAGE, BEAM, NOOPT, JIT = ContextVar("DEBUG", 0), ContextVar("IMAGE", 0), ContextVar("BEAM", 0), ContextVar("NOOPT", 0), ContextVar("JIT", 1)                                                     # helpers.py:105

  class ContextVar:                                                                                                                                                                                      # helpers.py:91
    def __new__(cls, key, default_value):                                                                                                                                                                # helpers.py:95
      if key in ContextVar._cache: return ContextVar._cache[key]                                                                                                                                         # helpers.py:96
      instance = ContextVar._cache[key] = super().__new__(cls)                                                                                                                                           # helpers.py:97
      instance.value, instance.key = getenv(key, default_value), key                                                                                                                                     # helpers.py:98

        @functools.lru_cache(maxsize=None)                                                                                                                                                               # helpers.py:78
        def getenv(key:str, default=0): return type(default)(os.getenv(key, default))

      return instance                                                                                                                                                                                    # helpers.py:99

WINO, THREEFRY, CAPTURING, TRACEMETA = ContextVar("WINO", 0), ContextVar("THREEFRY", 0), ContextVar("CAPTURING", 1), ContextVar("TRACEMETA", 1)                                                          # helpers.py:106

GRAPH, GRAPHPATH, SAVE_SCHEDULE, RING = ContextVar("GRAPH", 0), getenv("GRAPHPATH", "/tmp/net"), ContextVar("SAVE_SCHEDULE", 0), ContextVar("RING", 1)                                                   # helpers.py:107

MULTIOUTPUT, PROFILE, PROFILEPATH = ContextVar("MULTIOUTPUT", 1), ContextVar("PROFILE", 0), ContextVar("PROFILEPATH", temp("tinygrad_profile.json"))                                                     # helpers.py:108

  def temp(x:str) -> str: return (pathlib.Path(tempfile.gettempdir()) / x).as_posix()                                                                                                                    # helpers.py:79

USE_TC, TC_OPT, TRANSCENDENTAL = ContextVar("TC", 1), ContextVar("TC_OPT", 0), ContextVar("TRANSCENDENTAL", 1)                                                                                           # helpers.py:109

FUSE_ARANGE, FUSE_CONV_BW = ContextVar("FUSE_ARANGE", 0), ContextVar("FUSE_CONV_BW", 0)                                                                                                                  # helpers.py:110

SPLIT_REDUCEOP = ContextVar("SPLIT_REDUCEOP", 1)                                                                                                                                                         # helpers.py:111

@dataclass(frozen=True)                                                                                                                                                                                  # helpers.py:114
class Metadata:
  name: str                                                                                                                                                                                              # helpers.py:115
  caller: str                                                                                                                                                                                            # helpers.py:116
  backward: bool = False                                                                                                                                                                                 # helpers.py:117

_METADATA: contextvars.ContextVar[Optional[Metadata]] = contextvars.ContextVar("_METADATA", default=None)                                                                                                # helpers.py:121

class GlobalCounters:                                                                                                                                                                                    # helpers.py:125
  global_ops: ClassVar[int] = 0                                                                                                                                                                          # helpers.py:126
  global_mem: ClassVar[int] = 0                                                                                                                                                                          # helpers.py:127
  time_sum_s: ClassVar[float] = 0.0                                                                                                                                                                      # helpers.py:128
  kernel_count: ClassVar[int] = 0                                                                                                                                                                        # helpers.py:129
  mem_used: ClassVar[int] = 0   # NOTE: this is not reset                                                                                                                                                # helpers.py:130

class ProfileLogger:                                                                                                                                                                                     # helpers.py:162
  writers: int = 0                                                                                                                                                                                       # helpers.py:163
  mjson: List[Dict] = []                                                                                                                                                                                 # helpers.py:164
  actors: Dict[Union[str, Tuple[str, str]], int] = {}                                                                                                                                                    # helpers.py:165

_cache_dir: str = getenv("XDG_CACHE_HOME", os.path.expanduser("~/Library/Caches" if OSX else "~/.cache"))                                                                                                # helpers.py:201

CACHEDB: str = getenv("CACHEDB", os.path.abspath(os.path.join(_cache_dir, "tinygrad", "cache.db")))                                                                                                      # helpers.py:202

CACHELEVEL = getenv("CACHELEVEL", 2)                                                                                                                                                                     # helpers.py:203

VERSION = 16                                                                                                                                                                                             # helpers.py:205
_db_connection = None                                                                                                                                                                                    # helpers.py:206
_db_tables = set()                                                                                                                                                                                       # helpers.py:233

ConstType = Union[float, int, bool]                                                                                                                                                                      # dtype.py:6

@dataclass(frozen=True, order=True)                                                                                                                                                                      # dtype.py:9
class DType:
  priority: int  # this determines when things get upcasted                                                                                                                                              # dtype.py:10
  itemsize: int                                                                                                                                                                                          # dtype.py:11
  name: str                                                                                                                                                                                              # dtype.py:12
  fmt: Optional[str]                                                                                                                                                                                     # dtype.py:13
  count: int                                                                                                                                                                                             # dtype.py:14

# dependent typing?                                                                                                                                                                                      # dtype.py:23
@dataclass(frozen=True, repr=False)
class ImageDType(DType):
  shape: Tuple[int, ...]   # arbitrary arg for the dtype, used in image for the shape                                                                                                                    # dtype.py:24
  base: DType                                                                                                                                                                                            # dtype.py:25

class dtypes:                                                                                                                                                                                            # dtype.py:38
  bigint: Final[DType] = DType(-1, 0, "bigint", None, 1)   # arbitrary precision integer                                                                                                                 # dtype.py:65
  bool: Final[DType] = DType(0, 1, "bool", '?', 1)                                                                                                                                                       # dtype.py:66
  int8: Final[DType] = DType(1, 1, "char", 'b', 1)                                                                                                                                                       # dtype.py:67
  uint8: Final[DType] = DType(2, 1, "unsigned char", 'B', 1)                                                                                                                                             # dtype.py:68
  int16: Final[DType] = DType(3, 2, "short", 'h', 1)                                                                                                                                                     # dtype.py:69
  uint16: Final[DType] = DType(4, 2, "unsigned short", 'H', 1)                                                                                                                                           # dtype.py:70
  int32: Final[DType] = DType(5, 4, "int", 'i', 1)                                                                                                                                                       # dtype.py:71
  uint32: Final[DType] = DType(6, 4, "unsigned int", 'I', 1)                                                                                                                                             # dtype.py:72
  int64: Final[DType] = DType(7, 8, "long", 'l', 1)                                                                                                                                                      # dtype.py:73
  uint64: Final[DType] = DType(8, 8, "unsigned long", 'L', 1)                                                                                                                                            # dtype.py:74
  float16: Final[DType] = DType(9, 2, "half", 'e', 1)                                                                                                                                                    # dtype.py:75
  bfloat16: Final[DType] = DType(10, 2, "__bf16", None, 1)                                                                                                                                               # dtype.py:77
  float32: Final[DType] = DType(11, 4, "float", 'f', 1)                                                                                                                                                  # dtype.py:78
  float64: Final[DType] = DType(12, 8, "double", 'd', 1)                                                                                                                                                 # dtype.py:79
  half = float16; float = float32; double = float64 # noqa: E702                                                                                                                                         # dtype.py:82
  uchar = uint8; ushort = uint16; uint = uint32; ulong = uint64 # noqa: E702                                                                                                                             # dtype.py:83
  char = int8; short = int16; int = int32; long = int64 # noqa: E702                                                                                                                                     # dtype.py:84
  default_float: ClassVar[DType] = float32                                                                                                                                                               # dtype.py:92
  default_int: ClassVar[DType] = int32                                                                                                                                                                   # dtype.py:93

if (env_default_float := getenv("DEFAULT_FLOAT", "")):                                                                                                                                                   # dtype.py:95

DTypeLike = Union[str, DType]                                                                                                                                                                            # dtype.py:99
promo_lattice = { dtypes.bool: [dtypes.int8, dtypes.uint8], dtypes.int8: [dtypes.int16], dtypes.int16: [dtypes.int32], dtypes.int32: [dtypes.int64],                                                     # dtype.py:104
  dtypes.int64: [dtypes.float16, dtypes.bfloat16], dtypes.uint8: [dtypes.int16, dtypes.uint16], dtypes.uint16: [dtypes.int32, dtypes.uint32],
  dtypes.uint32: [dtypes.int64, dtypes.uint64], dtypes.uint64: [dtypes.float16, dtypes.bfloat16],
  dtypes.float16: [dtypes.float32], dtypes.bfloat16: [dtypes.float32], dtypes.float32: [dtypes.float64], }
DTYPES_DICT = {k: v for k, v in dtypes.__dict__.items() if not (k.startswith(('__', 'default', 'bigint')) or v.__class__ is staticmethod)}                                                               # dtype.py:118
INVERSE_DTYPES_DICT = {v.name:k for k,v in DTYPES_DICT.items()}                                                                                                                                          # dtype.py:119
INVERSE_DTYPES_DICT['bigint'] = 'bigint'                                                                                                                                                                 # dtype.py:120
from tinygrad.helpers import argfix, make_pair, flatten, prod, all_int, round_up, merge_dicts, argsort, getenv, get_shape, fully_flatten, dedup                                                          # tensor.py:11
from tinygrad.helpers import IMAGE, DEBUG, WINO, THREEFRY, _METADATA, Metadata, TRACEMETA                                                                                                                # tensor.py:12
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # tensor.py:13
from __future__ import annotations                                                                                                                                                                       # lazy.py:1
from typing import Union, Optional, Any, Tuple, List, get_args                                                                                                                                           # lazy.py:2
from tinygrad.dtype import dtypes, DType, DTypeLike, ConstType, to_dtype                                                                                                                                 # lazy.py:3
from tinygrad.helpers import prod, getenv, all_int, all_same, DEBUG, _METADATA, Metadata, SPLIT_REDUCEOP                                                                                                 # lazy.py:4
from tinygrad.ops import MetaOps, UnaryOps, BinaryOps, TernaryOps, ReduceOps, Op, exec_alu, python_alu, reduce_st                                                                                        # lazy.py:5
from __future__ import annotations                                                                                                                                                                       # ops.py:1
from typing import Union, Tuple, Any, List, Dict, Callable                                                                                                                                               # ops.py:2
import functools, hashlib, math, operator, ctypes, struct                                                                                                                                                # ops.py:3
from enum import Enum, auto                                                                                                                                                                              # ops.py:4
from dataclasses import dataclass                                                                                                                                                                        # ops.py:5
from tinygrad.helpers import prod, dedup, pretty_print                                                                                                                                                   # ops.py:6
from tinygrad.dtype import dtypes, DType, ConstType                                                                                                                                                      # ops.py:7
from tinygrad.shape.symbolic import Variable, sint                                                                                                                                                       # ops.py:8
from __future__ import annotations                                                                                                                                                                       # shape/symbolic.py:1
import functools                                                                                                                                                                                         # shape/symbolic.py:2
from math import gcd                                                                                                                                                                                     # shape/symbolic.py:3
from tinygrad.helpers import partition                                                                                                                                                                   # shape/symbolic.py:4
from typing import List, Dict, Callable, Tuple, Type, Union, Optional, Any, Set, Mapping                                                                                                                 # shape/symbolic.py:5

class Node:                                                                                                                                                                                              # shape/symbolic.py:10
  b: Union[Node, int]                                                                                                                                                                                    # shape/symbolic.py:11
  min: int                                                                                                                                                                                               # shape/symbolic.py:12
  max: sint                                                                                                                                                                                              # shape/symbolic.py:13

sint = Union[int, Variable, MulNode, SumNode]                                                                                                                                                            # shape/symbolic.py:304
render_python: Dict[Type, Callable[..., str]] = {                                                                                                                                                        # shape/symbolic.py:312
  Variable: lambda self,ops,ctx: f"{self.expr}[{self.min}-{self.max}{'='+str(self.val) if self._val is not None else ''}]" if ctx == "DEBUG" \
    else (f"Variable('{self.expr}', {self.min}, {self.max})"+(f".bind({self.val})" if self._val is not None else '') if ctx == "REPR" \
    else f"{self.expr}"),
  NumNode: lambda self,ops,ctx: f"NumNode({self.b})" if ctx == "REPR" else f"{self.b}",
  MulNode: render_mulnode,
  DivNode: lambda self,ops,ctx: f"({self.a.render(ops,ctx)}//{self.b})",
  ModNode: lambda self,ops,ctx: f"({self.a.render(ops,ctx)}%{self.b})",
  LtNode: lambda self,ops,ctx: f"({self.a.render(ops,ctx)}<{sym_render(self.b,ops,ctx)})",
  SumNode: lambda self,ops,ctx: f"({'+'.join(sorted([x.render(ops,ctx) for x in self.nodes]))})",
  AndNode: lambda self,ops,ctx: f"({' and '.join(sorted([x.render(ops,ctx) for x in self.nodes]))})",
}
from tinygrad.shape.shapetracker import ShapeTracker                                                                                                                                                     # ops.py:9
from __future__ import annotations                                                                                                                                                                       # shape/shapetracker.py:2
from dataclasses import dataclass                                                                                                                                                                        # shape/shapetracker.py:3
from typing import Tuple, List, Optional, Dict, Set, Iterable, cast                                                                                                                                      # shape/shapetracker.py:4
from tinygrad.helpers import merge_dicts, getenv                                                                                                                                                         # shape/shapetracker.py:5
from tinygrad.shape.symbolic import Variable, MulNode, Node, SumNode, NumNode, sint                                                                                                                      # shape/shapetracker.py:6
from tinygrad.shape.view import View, strides_for_shape                                                                                                                                                  # shape/shapetracker.py:7
from __future__ import annotations                                                                                                                                                                       # shape/view.py:1
import functools, operator, itertools, math                                                                                                                                                              # shape/view.py:2
from dataclasses import dataclass                                                                                                                                                                        # shape/view.py:3
from typing import Tuple, List, Optional, Dict, Set, cast                                                                                                                                                # shape/view.py:4
from tinygrad.helpers import prod, all_int, argsort                                                                                                                                                      # shape/view.py:5
from tinygrad.shape.symbolic import Node, NumNode, Variable, sint, sym_infer, create_lt_node, create_ge_node                                                                                             # shape/view.py:6

@dataclass(frozen=True)                                                                                                                                                                                  # shape/view.py:85
class View:
  shape:Tuple[sint, ...]                                                                                                                                                                                 # shape/view.py:86
  strides:Tuple[sint, ...]                                                                                                                                                                               # shape/view.py:87
  offset:sint                                                                                                                                                                                            # shape/view.py:88
  mask:Optional[Tuple[Tuple[sint, sint], ...]]                                                                                                                                                           # shape/view.py:89
  contiguous:bool                                                                                                                                                                                        # shape/view.py:90

@dataclass(frozen=True)                                                                                                                                                                                  # shape/shapetracker.py:10
class ShapeTracker:
  views: Tuple[View, ...]                                                                                                                                                                                # shape/shapetracker.py:11

# these are the llops your accelerator must implement, along with toCpu                                                                                                                                  # ops.py:15
# the Enum class doesn't work with mypy, this is static. sorry it's ugly
# NOTE: MOD, CMPLT don't have to be implemented on vectors, just scalars
# NOTE: many GPUs don't have DIV, but UnaryOps.RECIP doesn't work for integer division
class UnaryOps(Enum):
  """A -> A (elementwise)"""                                                                                                                                                                             # ops.py:16
  EXP2 = auto(); LOG2 = auto(); CAST = auto(); BITCAST = auto(); SIN = auto(); SQRT = auto(); NEG = auto(); RECIP = auto() # noqa: E702                                                                  # ops.py:17

class BinaryOps(Enum):                                                                                                                                                                                   # ops.py:18
  """A + A -> A (elementwise)"""                                                                                                                                                                         # ops.py:19
  ADD = auto(); MUL = auto(); IDIV = auto(); MAX = auto(); MOD = auto(); CMPLT = auto(); CMPNE = auto(); XOR = auto() # noqa: E702                                                                       # ops.py:20
  SHL = auto(); SHR = auto(); OR = auto(); AND = auto(); THREEFRY = auto() # noqa: E702                                                                                                                  # ops.py:21

class TernaryOps(Enum):                                                                                                                                                                                  # ops.py:22
  """A + A + A -> A (elementwise)"""                                                                                                                                                                     # ops.py:23
  WHERE = auto(); MULACC = auto() # noqa: E702                                                                                                                                                           # ops.py:24

class ReduceOps(Enum):                                                                                                                                                                                   # ops.py:25
  """A -> B (reduce)"""                                                                                                                                                                                  # ops.py:26
  SUM = auto(); MAX = auto(); WMMA = auto() # noqa: E702                                                                                                                                                 # ops.py:27

class BufferOps(Enum): LOAD = auto(); CONST = auto(); STORE = auto() # noqa: E702                                                                                                                        # ops.py:28

class MetaOps(Enum):                                                                                                                                                                                     # ops.py:29
  EMPTY = auto(); CONST = auto(); COPY = auto(); CONTIGUOUS = auto(); CUSTOM = auto(); ASSIGN = auto(); VIEW = auto(); KERNEL = auto() # noqa: E702                                                      # ops.py:30

Op = Union[UnaryOps, BinaryOps, ReduceOps, MetaOps, TernaryOps, BufferOps]                                                                                                                               # ops.py:31
UNSAFE_PAD_OPS = {UnaryOps.RECIP, UnaryOps.LOG2, UnaryOps.EXP2, BinaryOps.IDIV}                                                                                                                          # ops.py:34

@dataclass(frozen=True)                                                                                                                                                                                  # ops.py:37
class MemBuffer:
  idx: int                                                                                                                                                                                               # ops.py:38
  dtype: DType                                                                                                                                                                                           # ops.py:39
  st: ShapeTracker                                                                                                                                                                                       # ops.py:40

@dataclass(frozen=True)                                                                                                                                                                                  # ops.py:43
class ConstBuffer:
  val: ConstType | Variable                                                                                                                                                                              # ops.py:44
  dtype: DType                                                                                                                                                                                           # ops.py:45
  st: ShapeTracker                                                                                                                                                                                       # ops.py:46

@dataclass(frozen=True)                                                                                                                                                                                  # ops.py:49
class KernelInfo:
  local_dims: int = 0           # number of local dimensions  (this is remapping RANGE to SPECIAL)                                                                                                       # ops.py:50
  upcasted: int = 0             # count that are upcasted     (this is remapping RANGE to EXPAND)                                                                                                        # ops.py:51
  dont_use_locals: bool = False # don't use local indexing                                                                                                                                               # ops.py:52

@dataclass(frozen=True, eq=False)                                                                                                                                                                        # ops.py:55
class LazyOp:
  op: Op                                                                                                                                                                                                 # ops.py:56
  src: Tuple[LazyOp, ...] = ()                                                                                                                                                                           # ops.py:57
  arg: Any = None                                                                                                                                                                                        # ops.py:58

python_alu: Dict[Op, Callable]  = {                                                                                                                                                                      # ops.py:109
  UnaryOps.LOG2: lambda x: math.log2(x) if x > 0 else -math.inf if x == 0 else math.nan, UnaryOps.EXP2: hook_overflow(math.inf, lambda x: 2**x),
  UnaryOps.SQRT: lambda x: math.sqrt(x) if x >= 0 else math.nan, UnaryOps.RECIP: lambda x: 1/x if x != 0 else math.copysign(math.inf, x),
  UnaryOps.SIN: lambda x: math.sin(x) if not math.isinf(x) else math.nan, UnaryOps.NEG: lambda x: (not x) if isinstance(x, bool) else -x,
  BinaryOps.SHR: operator.rshift, BinaryOps.SHL: operator.lshift, BinaryOps.MUL: operator.mul, BinaryOps.ADD: operator.add,
  BinaryOps.XOR: operator.xor, BinaryOps.MAX: max, BinaryOps.CMPNE: operator.ne, BinaryOps.CMPLT: operator.lt,
  BinaryOps.OR: operator.or_, BinaryOps.AND: operator.and_,
  BinaryOps.MOD: lambda x,y: abs(int(x))%abs(int(y))*(1,-1)[x<0], BinaryOps.IDIV: lambda x,y: abs(x)//abs(y)*(1,-1)[x*y<0] if y != 0 else x*math.inf,
  TernaryOps.MULACC: lambda x,y,z: (x*y)+z, TernaryOps.WHERE: lambda x,y,z: y if x else z}

  def hook_overflow(dv, fxn):                                                                                                                                                                            # ops.py:103
    return wfxn                                                                                                                                                                                          # ops.py:107

truncate: Dict[DType, Callable] = {dtypes.bool: bool,                                                                                                                                                    # ops.py:126
  # TODO: bfloat16
  dtypes.float16: truncate_fp16, dtypes.float32: lambda x: ctypes.c_float(x).value, dtypes.float64: lambda x: ctypes.c_double(x).value,
  dtypes.uint8: lambda x: ctypes.c_uint8(x).value, dtypes.uint16: lambda x: ctypes.c_uint16(x).value,
  dtypes.uint32: lambda x: ctypes.c_uint32(x).value, dtypes.uint64: lambda x: ctypes.c_uint64(x).value,
  dtypes.int8: lambda x: ctypes.c_int8(x).value, dtypes.int16: lambda x: ctypes.c_int16(x).value, dtypes.int32: lambda x: ctypes.c_int32(x).value \
      if isinstance(x,int) else x, dtypes.int64: lambda x: ctypes.c_int64(x).value}
from tinygrad.shape.symbolic import sint, Variable                                                                                                                                                       # lazy.py:6
from tinygrad.shape.shapetracker import ShapeTracker                                                                                                                                                     # lazy.py:7
from tinygrad.device import Buffer                                                                                                                                                                       # lazy.py:8
from __future__ import annotations                                                                                                                                                                       # device.py:1
import multiprocessing, decimal, statistics, random                                                                                                                                                      # device.py:2
from dataclasses import dataclass                                                                                                                                                                        # device.py:3
from collections import defaultdict                                                                                                                                                                      # device.py:4
from typing import List, Optional, Dict, Tuple, Any, cast, Protocol, Type                                                                                                                                # device.py:5
import importlib, inspect, functools, pathlib, os, ctypes, atexit, time, contextlib, array                                                                                                               # device.py:6
from tinygrad.helpers import SAVE_SCHEDULE, getenv, diskcache_get, diskcache_put, DEBUG, GlobalCounters, flat_mv, from_mv, ProfileLogger, PROFILE                                                        # device.py:7
from tinygrad.dtype import DType, ImageDType                                                                                                                                                             # device.py:8
from tinygrad.renderer import Renderer                                                                                                                                                                   # device.py:9
from typing import Optional, List, Tuple, Dict, Any                                                                                                                                                      # renderer/__init__.py:1
import functools                                                                                                                                                                                         # renderer/__init__.py:2
from dataclasses import dataclass, field                                                                                                                                                                 # renderer/__init__.py:3
from tinygrad.helpers import to_function_name, dedup                                                                                                                                                     # renderer/__init__.py:4
from tinygrad.codegen.uops import UOps, UOp, flops_mem                                                                                                                                                   # renderer/__init__.py:5
from __future__ import annotations                                                                                                                                                                       # codegen/uops.py:1
from typing import Optional, Tuple, Any, Set, cast, List, Union, DefaultDict, Callable, Dict                                                                                                             # codegen/uops.py:2
import functools, itertools, math                                                                                                                                                                        # codegen/uops.py:3
from collections import defaultdict                                                                                                                                                                      # codegen/uops.py:4
from enum import Enum, auto                                                                                                                                                                              # codegen/uops.py:5
from dataclasses import dataclass                                                                                                                                                                        # codegen/uops.py:6
from tinygrad.dtype import ConstType, dtypes, DType                                                                                                                                                      # codegen/uops.py:7
from tinygrad.shape.symbolic import sint, Variable                                                                                                                                                       # codegen/uops.py:8
from tinygrad.ops import UnaryOps, BinaryOps, TernaryOps, exec_alu                                                                                                                                       # codegen/uops.py:9
from tinygrad.helpers import prod, pretty_print                                                                                                                                                          # codegen/uops.py:10

# the order of these UOps controls the order of the toposort                                                                                                                                             # codegen/uops.py:13
class UOps(Enum):
  SINK = auto(); EXPAND = auto(); CONTRACT = auto() # noqa: E702                                                                                                                                         # codegen/uops.py:15
  DEFINE_GLOBAL = auto(); DEFINE_VAR = auto(); DEFINE_LOCAL = auto(); DEFINE_ACC = auto() # noqa: E702                                                                                                   # codegen/uops.py:16
  CONST = auto(); SPECIAL = auto() # noqa: E702                                                                                                                                                          # codegen/uops.py:17
  NOOP = auto(); GEP = auto() # noqa: E702                                                                                                                                                               # codegen/uops.py:18
  CAST = auto(); BITCAST = auto(); VECTORIZE = auto() # noqa: E702                                                                                                                                       # codegen/uops.py:20
  ALU = auto(); REDUCE = auto(); WMMA = auto() # noqa: E702                                                                                                                                              # codegen/uops.py:21
  LOAD = auto(); STORE = auto(); PHI = auto() # noqa: E702                                                                                                                                               # codegen/uops.py:23
  BARRIER = auto(); IF = auto(); RANGE = auto() # noqa: E702                                                                                                                                             # codegen/uops.py:25
  ENDRANGE = auto(); ENDIF = auto() # noqa: E702                                                                                                                                                         # codegen/uops.py:27

END_FOR_UOP = {UOps.IF:(UOps.STORE, UOps.ENDIF), UOps.RANGE:(UOps.PHI, UOps.ENDRANGE)}                                                                                                                   # codegen/uops.py:29

@dataclass(frozen=True, eq=False)                                                                                                                                                                        # codegen/uops.py:32
class UOp:
  op: UOps                                                                                                                                                                                               # codegen/uops.py:33
  dtype: Optional[DType] = None                                                                                                                                                                          # codegen/uops.py:34
  src: Tuple[UOp, ...] = tuple()                                                                                                                                                                         # codegen/uops.py:35
  arg: Any = None                                                                                                                                                                                        # codegen/uops.py:36

@dataclass(frozen=True, repr=False)  # reuse repr from UOp                                                                                                                                               # codegen/uops.py:131
class NOp(UOp):
  name:Optional[str] = None                                                                                                                                                                              # codegen/uops.py:132
  src:Tuple[NOp, ...] = tuple()                                                                                                                                                                          # codegen/uops.py:133
  allow_any_len:bool = False                                                                                                                                                                             # codegen/uops.py:134

from tinygrad.shape.symbolic import sym_infer, sint, Variable                                                                                                                                            # renderer/__init__.py:6
from tinygrad.dtype import DType                                                                                                                                                                         # renderer/__init__.py:7

@dataclass(frozen=True)                                                                                                                                                                                  # renderer/__init__.py:10
class TensorCore: # D = A * B + C, A is (M x K), B is (K x N), C and D are (M x N)
  dims: Tuple[int,int,int] # N, M, K                                                                                                                                                                     # renderer/__init__.py:11
  dtype_in: DType # dtype for A and B                                                                                                                                                                    # renderer/__init__.py:12
  dtype_out: DType # dtype for C and D                                                                                                                                                                   # renderer/__init__.py:13
  threads: List[Tuple[int,int]] # list of (TC dim,amt) that construct the warp thread structure                                                                                                          # renderer/__init__.py:14

@dataclass                                                                                                                                                                                               # renderer/__init__.py:18
class Program:
  name:str                                                                                                                                                                                               # renderer/__init__.py:19
  src:str                                                                                                                                                                                                # renderer/__init__.py:20
  dname:str                                                                                                                                                                                              # renderer/__init__.py:21
  uops:Optional[List[UOp]]=None                                                                                                                                                                          # renderer/__init__.py:22
  mem_estimate:sint=0  # TODO: get this from the load/store uops once min/max are good                                                                                                                   # renderer/__init__.py:23
  global_size:Optional[List[int]]=None                                                                                                                                                                   # renderer/__init__.py:26
  local_size:Optional[List[int]]=None                                                                                                                                                                    # renderer/__init__.py:27
  vars:List[Variable]=field(default_factory=list)                                                                                                                                                        # renderer/__init__.py:28
  globals:List[int]=field(default_factory=list)                                                                                                                                                          # renderer/__init__.py:29
  outs:List[int]=field(default_factory=list)                                                                                                                                                             # renderer/__init__.py:30
  _ran_post_init:bool=False  # NOTE: this is needed if you call replace on the Program                                                                                                                   # renderer/__init__.py:31

class Renderer:                                                                                                                                                                                          # renderer/__init__.py:71
  device: str = ""                                                                                                                                                                                       # renderer/__init__.py:72
  suffix: str = ""                                                                                                                                                                                       # renderer/__init__.py:73
  supports_float4: bool = True                                                                                                                                                                           # renderer/__init__.py:75
  has_local: bool = True                                                                                                                                                                                 # renderer/__init__.py:76
  has_shared: bool = True                                                                                                                                                                                # renderer/__init__.py:77
  global_max: Optional[Tuple[int, ...]] = (0x8FFFFFFF,) * (3) # TODO: UOps.SPECIAL int32 indexes right now                                                                                               # renderer/__init__.py:79
  local_max: Optional[Tuple[int, ...]] = (0x8FFFFFFF,) * (3) # TODO: UOps.SPECIAL int32 indexes right now                                                                                                # renderer/__init__.py:80
  shared_max: int = 32768                                                                                                                                                                                # renderer/__init__.py:81
  tensor_cores: List[TensorCore] = []                                                                                                                                                                    # renderer/__init__.py:82
  extra_matcher: Any = None                                                                                                                                                                              # renderer/__init__.py:83

Device = _Device()                                                                                                                                                                                       # device.py:41

  class _Device:                                                                                                                                                                                         # device.py:13
    def __init__(self) -> None: self._devices: List[str] = [x.stem[len("ops_"):].upper() for x in (pathlib.Path(__file__).parent/"runtime").iterdir() if x.stem.startswith("ops_")]  # noqa: E501        # device.py:14

@dataclass(frozen=True, eq=True)                                                                                                                                                                         # device.py:46
class BufferOptions:
  image: Optional[ImageDType] = None                                                                                                                                                                     # device.py:47
  uncached: bool = False                                                                                                                                                                                 # device.py:48
  cpu_access: bool = False                                                                                                                                                                               # device.py:49
  host: bool = False                                                                                                                                                                                     # device.py:50
  nolru: bool = False                                                                                                                                                                                    # device.py:51

MallocAllocator = _MallocAllocator()                                                                                                                                                                     # device.py:171

  class LRUAllocator(Allocator):  # pylint: disable=abstract-method                                                                                                                                      # device.py:144
    def __init__(self): self.cache: Dict[Tuple[int, Optional[BufferOptions]], Any] = defaultdict(list)                                                                                                   # device.py:149

  def hcq_command(func):                                                                                                                                                                                 # device.py:201
    return __wrapper                                                                                                                                                                                     # device.py:217

class HCQCompiled(Compiled):                                                                                                                                                                             # device.py:480
  """                                                                                                                                                                                                    # device.py:481
  A base class for devices compatible with the HCQ (Hardware Command Queue) API.
  """
  devices: List[HCQCompiled] = []                                                                                                                                                                        # device.py:484
  gpu2cpu_copy_time_diff: decimal.Decimal = decimal.Decimal('nan')                                                                                                                                       # device.py:485
  gpu2cpu_compute_time_diff: decimal.Decimal = decimal.Decimal('nan')                                                                                                                                    # device.py:486

# Protocol for hcq compatible allocators for allocated buffers to contain VA address and it's size.                                                                                                      # device.py:595
class HCQBuffer(Protocol): va_addr:int; size:int # noqa: E702

from weakref import ref, ReferenceType, WeakValueDictionary                                                                                                                                              # lazy.py:9
lazycache: WeakValueDictionary[Any, LazyBuffer] = WeakValueDictionary()                                                                                                                                  # lazy.py:11

view_supported_devices = {"LLVM", "CLANG", "CUDA", "NV", "AMD", "METAL", "DISK"}                                                                                                                         # lazy.py:25

from tinygrad.multi import MultiLazyBuffer                                                                                                                                                               # tensor.py:14
from __future__ import annotations                                                                                                                                                                       # multi.py:1
from typing import Optional, Union, Any, Tuple, List, Dict                                                                                                                                               # multi.py:2
import functools, itertools, operator                                                                                                                                                                    # multi.py:3
from tinygrad.helpers import all_same, all_int, dedup, prod, DEBUG, RING, getenv                                                                                                                         # multi.py:4
from tinygrad.dtype import DType, ConstType                                                                                                                                                              # multi.py:5
from tinygrad.ops import BinaryOps, MetaOps, UnaryOps, TernaryOps, ReduceOps                                                                                                                             # multi.py:6
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # multi.py:7
from tinygrad.shape.shapetracker import sint                                                                                                                                                             # multi.py:8

from tinygrad.ops import MetaOps, truncate                                                                                                                                                               # tensor.py:15
from tinygrad.device import Device, Buffer, BufferOptions                                                                                                                                                # tensor.py:16
from tinygrad.shape.symbolic import sint, Variable, MulNode, SumNode, NumNode, Node                                                                                                                      # tensor.py:17
from tinygrad.engine.realize import run_schedule                                                                                                                                                         # tensor.py:18
from typing import List, Dict, Optional, cast, Generator, Tuple                                                                                                                                          # engine/realize.py:1
import time, pprint                                                                                                                                                                                      # engine/realize.py:2
from dataclasses import dataclass, replace                                                                                                                                                               # engine/realize.py:3
from tinygrad.helpers import colored, getenv, DEBUG, GlobalCounters, ansilen, BEAM, NOOPT, all_int, CAPTURING, Metadata, Context, TRACEMETA                                                              # engine/realize.py:4
from tinygrad.ops import MetaOps, LazyOp                                                                                                                                                                 # engine/realize.py:5
from tinygrad.dtype import dtypes                                                                                                                                                                        # engine/realize.py:6
from tinygrad.device import Device, Buffer                                                                                                                                                               # engine/realize.py:7
from tinygrad.shape.symbolic import Variable, sym_infer, sint                                                                                                                                            # engine/realize.py:8
from tinygrad.renderer import Renderer, Program                                                                                                                                                          # engine/realize.py:9
from tinygrad.codegen.kernel import Kernel                                                                                                                                                               # engine/realize.py:10
from __future__ import annotations                                                                                                                                                                       # codegen/kernel.py:1
import itertools, functools                                                                                                                                                                              # codegen/kernel.py:2
from dataclasses import dataclass, replace                                                                                                                                                               # codegen/kernel.py:3
from collections import defaultdict                                                                                                                                                                      # codegen/kernel.py:4
from typing import Optional, List, Tuple, cast, Dict, Union, Final, DefaultDict, Any                                                                                                                     # codegen/kernel.py:5
from tinygrad.ops import LazyOp, UnaryOps, BinaryOps, ReduceOps, MemBuffer, ConstBuffer, BufferOps, MetaOps, UNSAFE_PAD_OPS, verify_lazyop, KernelInfo                                                   # codegen/kernel.py:7
from tinygrad.device import Device                                                                                                                                                                       # codegen/kernel.py:8
from tinygrad.renderer import Renderer, TensorCore, Program                                                                                                                                              # codegen/kernel.py:9
from tinygrad.dtype import ImageDType                                                                                                                                                                    # codegen/kernel.py:10
from tinygrad.helpers import all_same, colored, ansilen, dedup, getenv, prod, DEBUG, TC_OPT, USE_TC, round_up, all_int, \                                                                                # codegen/kernel.py:11
                             get_contraction, to_function_name, diskcache_put, ContextVar
from tinygrad.shape.shapetracker import ShapeTracker                                                                                                                                                     # codegen/kernel.py:13
from tinygrad.shape.symbolic import sint                                                                                                                                                                 # codegen/kernel.py:14
from tinygrad.shape.view import strides_for_shape                                                                                                                                                        # codegen/kernel.py:15
from tinygrad.codegen.uopgraph import UOpGraph                                                                                                                                                           # codegen/kernel.py:16
from __future__ import annotations                                                                                                                                                                       # codegen/uopgraph.py:1
from typing import Iterator, Optional, Tuple, Dict, List, Set, Union, cast, TYPE_CHECKING, Any, DefaultDict, Callable                                                                                    # codegen/uopgraph.py:2
import functools, itertools, heapq, math, operator                                                                                                                                                       # codegen/uopgraph.py:3
from collections import defaultdict                                                                                                                                                                      # codegen/uopgraph.py:4
from tinygrad.dtype import dtypes, PtrDType, ImageDType, DType                                                                                                                                           # codegen/uopgraph.py:5
from tinygrad.ops import UnaryOps, BinaryOps, exec_alu                                                                                                                                                   # codegen/uopgraph.py:6
from tinygrad.helpers import DEBUG, getenv, flatten, dedup, TRANSCENDENTAL, prod, CI, all_same, partition                                                                                                # codegen/uopgraph.py:7
from tinygrad.codegen.uops import UOp, NOp, UOps, UPat, PatternMatcher, END_FOR_UOP, type_verify, print_uops                                                                                             # codegen/uopgraph.py:8
from tinygrad.codegen.transcendental import xexp2, xlog2, xsin, TRANSCENDENTAL_SUPPORTED_DTYPES                                                                                                          # codegen/uopgraph.py:9
import math, functools                                                                                                                                                                                   # codegen/transcendental.py:1
from typing import Tuple, List                                                                                                                                                                           # codegen/transcendental.py:2
from tinygrad.dtype import dtypes, DType                                                                                                                                                                 # codegen/transcendental.py:3
from tinygrad.codegen.uops import UOp                                                                                                                                                                    # codegen/transcendental.py:4
TRANSCENDENTAL_SUPPORTED_DTYPES = {dtypes.float16, dtypes.float32, dtypes.float64}                                                                                                                       # codegen/transcendental.py:6
if TYPE_CHECKING: from tinygrad.renderer import Renderer                                                                                                                                                 # codegen/uopgraph.py:10
float4_folding = PatternMatcher([                                                                                                                                                                        # codegen/uopgraph.py:71
  (UPat(UOps.EXPAND, src=UPat(UOps.LOAD, src=(UPat(name="buf"), UPat()), allow_any_len=True), name="ex"), fold_expanded),
  (UPat({UOps.BARRIER, UOps.SINK}, src=UPat(UOps.STORE, src=(UPat(name="buf"), UPat(), UPat()), allow_any_len=True), name="ex"), fold_expanded),
  (UPat(UOps.VECTORIZE, src=UPat(UOps.REDUCE), name="vec"), vectorize_reduce),
  (UPat(UOps.VECTORIZE, src=UPat({UOps.ALU, UOps.CAST, UOps.BITCAST}), name="vec"), vectorize_alu),
])

  class UPat:                                                                                                                                                                                            # codegen/uops.py:145
    def __init__(self, op:Optional[Union[UOps, Set[UOps]]]=None, arg:Any=None, src:Optional[Union[Tuple[UPat, ...], List[UPat], UPat]]=None,                                                             # codegen/uops.py:146
                 name:Optional[str]=None, dtype:Optional[Union[DType, Set[DType]]]=None, allow_any_len:bool=False):
      self.op: Optional[Tuple[UOps, ...]] = None if op is None else (tuple(op) if isinstance(op, set) else (op,))                                                                                        # codegen/uops.py:148
      self.dtype: Optional[Tuple[DType, ...]] = None if dtype is None else (tuple(dtype) if isinstance(dtype, set) else (dtype,))                                                                        # codegen/uops.py:149
      self.arg, self.name = arg, name                                                                                                                                                                    # codegen/uops.py:150
      self.src: Any = None                                                                                                                                                                               # codegen/uops.py:151
      if isinstance(src, list): self.src = list(itertools.permutations(src))                                                                                                                             # codegen/uops.py:153
      elif isinstance(src, tuple): self.src = [src]                                                                                                                                                      # codegen/uops.py:155
      elif isinstance(src, UPat): self.src = [itertools.repeat(src)]                                                                                                                                     # codegen/uops.py:157
      self.allowed_len: int = 0 if allow_any_len or isinstance(src, UPat) or src is None else len(src)                                                                                                   # codegen/uops.py:159

  class PatternMatcher:                                                                                                                                                                                  # codegen/uops.py:182
    def __init__(self, patterns:List[Tuple[Union[UPat, NOp], Callable]]):                                                                                                                                # codegen/uops.py:183
      self.patterns = patterns                                                                                                                                                                           # codegen/uops.py:184
      self.pdict: DefaultDict[Tuple[UOps, Any], List[Tuple[UPat, Callable]]] = defaultdict(list)                                                                                                         # codegen/uops.py:185
      for p,fxn in self.patterns:                                                                                                                                                                        # codegen/uops.py:187
        if isinstance(p, NOp): p = p.compile()                                                                                                                                                           # codegen/uops.py:188
        assert p.op is not None                                                                                                                                                                          # codegen/uops.py:189
        for uop in p.op: self.pdict[(uop, p.arg)].append((p, fxn))                                                                                                                                       # codegen/uops.py:190

transcendental_folding = PatternMatcher([(UPat(UOps.ALU, dtype=TRANSCENDENTAL_SUPPORTED_DTYPES, src=(UPat(name="d"),), arg=k), cast(Callable, v))                                                        # codegen/uopgraph.py:130
                                         for k,v in ((UnaryOps.EXP2, xexp2), (UnaryOps.LOG2, xlog2), (UnaryOps.SIN, xsin))])

constant_folder = PatternMatcher([                                                                                                                                                                       # codegen/uopgraph.py:178
  # bigint is rewritten to int32
  (UPat({UOps.CONST, UOps.ALU, UOps.SPECIAL, UOps.RANGE, UOps.EXPAND}, dtype=dtypes.bigint, name="x"),
   lambda x: UOp(x.op, dtypes.int32, x.src, x.arg)),
  # VECTORIZE/GEP
  (NOp(UOps.GEP, src=(NOp(UOps.VECTORIZE, name="cast"),), name="gep"), lambda gep, cast: cast.src[gep.arg]),
  *[(NOp(UOps.VECTORIZE, dtypes.float.vec(i), tuple(NOp(UOps.GEP, dtypes.float,
                         src=(NOp.var('x', dtype=dtypes.float.vec(i)),), arg=j) for j in range(i))), lambda x: x) for i in [2, 4, 8, 16]],
  *[(NOp(UOps.VECTORIZE, dtypes.half.vec(i), tuple(NOp(UOps.GEP, dtypes.half,
                         src=(NOp.var('x', dtype=dtypes.half.vec(i)),), arg=j) for j in range(i))), lambda x: x) for i in [2, 4, 8, 16]],
  # tensor core with a 0 input is acc
  (NOp(UOps.WMMA, src=(NOp.const(None, 0.0), NOp.var(), NOp.var('acc'))), lambda acc: acc),
  (NOp(UOps.WMMA, src=(NOp.var(), NOp.const(None, 0.0), NOp.var('acc'))), lambda acc: acc),
  # tensor core cleanups
  *[(NOp(UOps.REDUCE, src=(NOp(UOps.EXPAND, src=tuple(NOp(UOps.GEP, dtypes.float, src=(NOp.var('x'),), arg=i) for i in range(j)), name="expand"),)
    ,name="reduce", allow_any_len=True), reduce_before_expand) for j in [2,4,8]],
  (NOp.var("add") + NOp(UOps.WMMA, name="wmma"),
    lambda add, wmma: UOp(wmma.op, wmma.dtype, (wmma.src[0], wmma.src[1], wmma.src[2]+add), wmma.arg)),
  # threefry
  (NOp(UOps.ALU, dtype=dtypes.uint64, src=(NOp.var("x"), NOp.var("seed")), arg=BinaryOps.THREEFRY), threefry2x32),
  # extra arange loop folding because we don't fold adds. TODO: fold adds
  (NOp(UOps.REDUCE, src=((NOp.var("idx") + NOp.cvar("mval") * NOp(UOps.RANGE, src=(NOp.var("loop_start"), NOp.var("loop_end")), name="rng") +
                          NOp.var("idx2") + NOp.var("idx3"))
   .lt(NOp.cvar("compval")).where(NOp.cvar("multconst"), NOp.const(None, 0)),), arg=BinaryOps.ADD, name="reduce", allow_any_len=True), loop_collapse),
  (NOp(UOps.REDUCE, src=((NOp.var("idx") + NOp.cvar("mval") * NOp(UOps.RANGE, src=(NOp.var("loop_start"), NOp.var("loop_end")), name="rng") +
                          NOp.var("idx2"))
   .lt(NOp.cvar("compval")).where(NOp.cvar("multconst"), NOp.const(None, 0)),), arg=BinaryOps.ADD, name="reduce", allow_any_len=True), loop_collapse),
  # arange loop folding (reduce)
  (NOp(UOps.REDUCE, src=((NOp.var("idx") + NOp.cvar("mval") * NOp(UOps.RANGE, src=(NOp.var("loop_start"), NOp.var("loop_end")), name="rng"))
   .lt(NOp.cvar("compval")).where(NOp.cvar("multconst"), NOp.const(None, 0)),), arg=BinaryOps.ADD, name="reduce", allow_any_len=True), loop_collapse),
  (NOp(UOps.REDUCE, src=((NOp.var("idx") - NOp(UOps.RANGE, src=(NOp.var("loop_start"), NOp.var("loop_end")), name="rng"))
   .lt(NOp.cvar("compval")).where(NOp.cvar("multconst"), NOp.const(None, 0)),), arg=BinaryOps.ADD, name="reduce", allow_any_len=True),
   lambda **kwargs: loop_collapse(mval=UOp.const(dtypes.int, -1), **kwargs)),
  # arange loop folding (unrolled)
  (NOp(UOps.REDUCE, src=((NOp.var("idx") + NOp.cvar("mval") * NOp(UOps.RANGE, src=(NOp.var("loop_start"), NOp.var("loop_end")), name="rng"))
   .lt(NOp.cvar("compval")).where(NOp.cvar("multconst"), NOp.const(None, 0)) + NOp.var("extra"),),
   arg=BinaryOps.ADD, name="reduce", allow_any_len=True), loop_collapse),
  # indexing (with a multiply offset)!
  (NOp(UOps.REDUCE, src=(NOp.var('idx').eq(NOp(UOps.RANGE, name="rng")).cast()*
    NOp(UOps.LOAD, src=(NOp.var("buf"), NOp.var('add')+NOp.var('mul')*NOp(UOps.RANGE, name="rng")), name="ld"),),
    arg=BinaryOps.ADD, name="reduce", allow_any_len=True), index_collapse),
  (NOp(UOps.REDUCE, src=(NOp.var('idx').ne(NOp(UOps.RANGE, name="rng")).__neg__().cast()*
    NOp(UOps.LOAD, src=(NOp.var("buf"), NOp(UOps.RANGE, name="rng")), name="ld"),),
    arg=BinaryOps.ADD, name="reduce", allow_any_len=True),
    lambda **kwargs: index_collapse(add=UOp.const(dtypes.int, 0), mul=UOp.const(dtypes.int, 1), **kwargs)),
  (NOp(UOps.REDUCE, src=(NOp.var('idx').eq(NOp(UOps.RANGE, name="rng")).where(
    NOp(UOps.LOAD, src=(NOp.var("buf"), NOp.var('add')+NOp.var('mul')*NOp(UOps.RANGE, name="rng")), name="ld"), NOp.const(None, 0.0)),),
    arg=BinaryOps.ADD, name="reduce", allow_any_len=True), index_collapse),
  # other arange folders
  (NOp.cvar("c1") - (NOp.var("x") + NOp.cvar("c2")), lambda c1, c2, x: (c1-c2)-x),  # c1 - (x + c2) -> (c1-c2) - x
  (-(NOp.var("x") * NOp.cvar("c1")), lambda x, c1: x*-c1),
  # max folding
  (NOp.max(NOp.var('x'), NOp.var('y')), lambda x,y: x if x.vmin.arg >= y.vmax.arg else y if x.vmax.arg <= y.vmin.arg else None),
  # const rules
  (NOp(UOps.GEP, src=(NOp.cvar("c"),), name="root"), lambda root, c: root.const(c.arg)),
  (UPat(UOps.CAST, name="root", src=UPat(UOps.CONST, name="c")), lambda root, c: root.const(c.arg)),
  # a REDUCE without ranges is a NOOP
  (NOp(UOps.REDUCE, src=(NOp.var('x'),)), lambda x: x),
  # GEP on a const is the const
  (NOp(UOps.GEP, src=(NOp.cvar("x"),), name="root"), lambda root,x: root.const(x.arg)),
  # a conditional with the same results either way is a noop, also fold const conditionals
  (NOp.var().where(NOp.var("val"), NOp.var("val")), lambda val: val),
  (NOp.cvar('gate').where(NOp.var('c0'), NOp.var('c1')), lambda gate, c0, c1: c0 if gate.arg else c1),
  # ** constant folding **
  (UPat(UOps.ALU, name="root", src=UPat(UOps.CONST)), lambda root: root.const(exec_alu(root.arg, root.dtype, [x.arg for x in root.src]))),
  # ** self folding **
  (-(-NOp.var('x')), lambda x: x),    # -(-x) -> x
  (NOp.var('x') + 0, lambda x: x),    # x+0 -> x
  (NOp.var('x') * 1, lambda x: x),    # x*1 -> x
  (NOp.var('x') * -1, lambda x: -x),  # x*-1 -> -x
  (NOp.var('x') // NOp.var('x'), lambda x: x.const(1)), # x//x -> 1
  (NOp.var('x') // 1, lambda x: x),   # x//1 -> x
  (NOp.var('x') // -1, lambda x: -x), # x//-1 -> -x
  (NOp.var('x') / NOp.var('x'), lambda x: x.const(1)), # x/x -> 1
  (NOp.var('x') / NOp.cvar('c'), lambda x,c: x*exec_alu(UnaryOps.RECIP, c.dtype, [c.arg])),    # x/c -> x*(1/c)
  # ** zero folding **
  # x*0 -> 0 or 0*x -> 0
  # if x is nan or inf it should render the nan value.
  # NOTE: this can be wrong for loaded NaN
  (NOp.var('x') * 0, lambda x: x.const(float('nan') if isinstance(x.arg, float) and (math.isnan(x.arg) or math.isinf(x.arg)) else 0)),
  # x-x -> 0
  (NOp.var('x') - NOp.var('x'), lambda x: x.const(0)),
  (UPat(op=UOps.ALU, name='x'), lambda x: x.const(x.vmin.arg) if x.op is not UOps.CONST and x.vmin.arg == x.vmax.arg else None),
  # ** load/store folding **
  (NOp.store(NOp.var("buf"), NOp.var("idx"), NOp.load(NOp.var("buf"), NOp.var("idx"))), lambda buf,idx:UOp(UOps.NOOP)),
  # ** two stage add/mul folding **
  ((NOp.var('x') + NOp.cvar('c1')) + NOp.cvar('c2'), lambda x,c1,c2: x+x.const(exec_alu(BinaryOps.ADD, x.dtype, [c1.arg, c2.arg]))),
  ((NOp.var("x") * NOp.cvar("c1")) * NOp.cvar("c2"), lambda x,c1,c2: x*x.const(exec_alu(BinaryOps.MUL, x.dtype, [c1.arg, c2.arg]))),
  # *** rules from symbolic ***
  # ** lt **
  # c0*x<c1 for positive int c0,c1
  ((NOp.cvar('c0',dtypes.int)*NOp.var('x')).lt(NOp.cvar('c1',dtypes.int)),
   lambda x,c0,c1: x.lt(math.ceil(c1.arg/c0.arg)) if c0.arg > 0 and c1.arg > 0 else None),
  # mul add lt
  (((NOp.cvar('c0')*NOp.var('x'))+NOp.var('x2')).lt(NOp.cvar('c1')),
   lambda x,x2,c0,c1: x.lt(c1.arg//c0.arg) if c1.arg % c0.arg == 0 and c0.arg > x2.vmax.arg and x2.vmin.arg >= 0 else None),
  # neg lt -> lt
  (NOp.lt(-NOp.var('x'), NOp.cvar('c', dtypes.int)), lambda c,x: UOp.lt(c.const(-c.arg), x)),
  # ** div **
  # # div folding
  (NOp.var('x') // NOp.cvar('c'), lambda x,c: newx if 0 < c.arg and (newx:=div_folding(x,c.arg)) is not None else None),
  # mul div
  ((NOp.var("x") * NOp.cvar("c0")) // NOp.cvar("c1"),
   lambda x,c0,c1: x*(c0.arg//gcd)//(c1.arg//gcd) if c1.arg!=0 and (gcd:=math.gcd(c0.arg,c1.arg))> 1 else None),
  # mul add div
  (((NOp.cvar('c0')*NOp.var('x'))+NOp.var('x2')) // NOp.cvar('c1'), lambda x,x2,c0,c1:\
   x*(c0.arg//g)//(c1.arg//g) if c0.arg > 0 and c1.arg > 0 and (g:=math.gcd(c0.arg,c1.arg)) > 1 and g > x2.vmax.arg and x2.vmin.arg >= 0 else None),
  # ** mod **
  # apply mod to mod input
  (NOp.var('x') % NOp.cvar('c'), lambda x,c: newx%c if 0 < c.arg and (newx:=mod_folding(x,c.arg)) is not None else None),
  # remove mod
  (NOp.var('x') % NOp.cvar('c'), lambda x,c:\
   x-(x.vmin.arg//c.arg)*c.arg if 0 < c.arg and 0 <= x.vmin.arg and x.vmin.arg//c.arg == x.vmax.arg//c.arg else None),
  # mul mod
  ((NOp.cvar('c0')*NOp.var('x')) % NOp.cvar('c1'), lambda x,c0,c1: (x%(c1.arg//c0.arg))*c0 if c1.arg%c0.arg == 0 else None),
  # mod mod
  ((NOp.var('x') % NOp.cvar('c0')) % NOp.cvar('c1'), lambda x,c0,c1: x % c1 if c0.arg % c1.arg == 0 else None),
  # ** combine terms **
  # -(x+y) -> -x + -y
  #(-(NOp.var("x") + NOp.var("y")), lambda x,y: (-x)+(-y)),
  # (x*c0)+(x*c1) -> x*(c0+c1)
  (NOp.var("x") * NOp.cvar("c0") + NOp.var("x") * NOp.cvar("c1"), lambda x,c0,c1: x*exec_alu(BinaryOps.ADD, x.dtype, [c0.arg, c1.arg])),
  # (x*c0)+(y*c0) -> (x+y)*c0
  #((NOp.var("x") * NOp.cvar("c0")) + (NOp.var("y") * NOp.cvar("c0")), lambda x,y,c0: c0*(x+y)),
  # (x*x2)/x2 -> x
  ((NOp.var("x") * NOp.var("x2")) / NOp.var("x2"), lambda x,x2: x),
  # (x//c0)//c1 -> x//(c0*c1)
  ((NOp.var("x") // NOp.cvar("c0")) // NOp.cvar("c1"), lambda x,c0,c1: x//x.const(exec_alu(BinaryOps.MUL, x.dtype, [c0.arg, c1.arg]))),
  # (x/x1)/x2 -> x/(x1*x2)
  ((NOp.var("x") / NOp.var("x2")) / NOp.var("x3"), lambda x,x2,x3: x/(x2*x3)),
  # c0 + x < c1 -> x < c1 - c0
  ((NOp.cvar("c0") + NOp.var("x")).lt(NOp.cvar("c1")), lambda x,c0,c1: UOp.lt(x, x.const(exec_alu(BinaryOps.ADD, x.dtype, [c1.arg, -c0.arg])))),
  # (x+x*c0)-> x*(c0+1)
  (NOp.var("x") + NOp.var("x") * NOp.cvar("c0"), lambda x,c0: x*(c0.arg+1)),
  # x!=0 -> (bool)x
  (NOp.var("x").ne(0), lambda x: x.cast(dtypes.bool)),
  # bool != 1 -> not bool
  (NOp.var("x", dtype=dtypes.bool).ne(1), lambda x: -x),
  # TODO: can do the invert of this (flip alt/load) when we fix double ops
  (NOp.store(NOp.var("buf"), NOp.var("idx"), NOp.var("gate").where(NOp.var("alt"), NOp.load(NOp.var("buf"), NOp.var("idx")))),
   lambda buf, idx, gate, alt: UOp.store(buf, idx, alt, gate)),
  # VECTORIZE-PHI-GEP -> PHI-VECTORIZE
  (NOp(UOps.VECTORIZE, src=tuple(NOp(UOps.PHI, src=(NOp(UOps.GEP, src=(NOp.var("val"),), arg=i), NOp.var(f"v{i}"))) for i in range(4)), name="root"),
   lambda root, val, v0, v1, v2, v3: UOp(UOps.PHI, root.dtype, (val, UOp(UOps.VECTORIZE, val.dtype, (v0, v1, v2, v3))))),
  (NOp(UOps.VECTORIZE, src=tuple(NOp(UOps.PHI, src=(NOp(UOps.GEP, src=(NOp.var("val"),), arg=i), NOp.var(f"v{i}"))) for i in range(2)), name="root"),
   lambda root, val, v0, v1: UOp(UOps.PHI, root.dtype, (val, UOp(UOps.VECTORIZE, val.dtype, (v0, v1))))),
  # cast NOOP (NOTE: it's str to deal with PtrDType)
  (NOp(UOps.CAST, name="root"), lambda root: root.src[0] if str(root.dtype) == str(root.src[0].dtype) else None),
  (NOp(UOps.VECTORIZE, name="root"), lambda root: root.src[0] if str(root.dtype) == str(root.src[0].dtype) else None),
  # fold gated LOAD/STORE
  (NOp.load(NOp.var("buf"), NOp.var("idx"), NOp.cvar("var"), NOp.const(dtypes.bool, True)), lambda buf,idx,var: UOp.load(buf, idx, dtype=var.dtype)),
  (NOp.load(NOp.var("buf"), NOp.var("idx"), NOp.cvar("var"), NOp.const(dtypes.bool, True), NOp.var("barrier")),
   lambda buf,idx,var,barrier: UOp.load(buf, idx, barrier, dtype=var.dtype)),
  (NOp.load(NOp.var(), NOp.var(), NOp.cvar("var"), NOp.const(dtypes.bool, False)), lambda var: var),
  (NOp.load(NOp.var(), NOp.var(), NOp.cvar("var"), NOp.const(dtypes.bool, False), NOp.var()), lambda var: var),
  (NOp.store(NOp.var("buf"), NOp.var("idx"), NOp.var("val"), NOp.const(dtypes.bool, True)), UOp.store),
  (NOp.store(NOp.var(), NOp.var(), NOp.var(), NOp.const(dtypes.bool, False)), lambda: UOp(UOps.NOOP)),
  # remove NOOPs from SINK
  (NOp(UOps.SINK, name="root"),
    lambda root: UOp(UOps.SINK, root.dtype, a, root.arg) if len(a:=tuple(x for x in root.src if x.op is not UOps.NOOP)) != len(root.src) else None),
  # ** move add consts to end (NOTE: this is still happening before constant folding) **
  (UPat(UOps.ALU, BinaryOps.ADD, src=(UPat(UOps.CONST, name='c1'), UPat(name='x'))), lambda c1,x: x+c1 if x.op is not UOps.CONST else None),
  (UPat(UOps.ALU, BinaryOps.ADD, src=[UPat(UOps.ALU, BinaryOps.ADD, src=(UPat(name='x'), UPat(UOps.CONST, name='c1'))), UPat(name='y')]),
    lambda x,c1,y: (x+y)+c1),
])

  @dataclass(frozen=True, order=True)                                                                                                                                                                    # dtype.py:9
  class DType:
    def vec(self, sz:int):                                                                                                                                                                               # dtype.py:16
      assert sz > 1 and self.count == 1, f"can't vectorize {self} with size {sz}"                                                                                                                        # dtype.py:17
      return DType(self.priority, self.itemsize*sz, f"{INVERSE_DTYPES_DICT[self.name]}{sz}", None, sz)                                                                                                   # dtype.py:18

  @dataclass(frozen=True, repr=False)  # reuse repr from UOp                                                                                                                                             # codegen/uops.py:131
  class NOp(UOp):
    @staticmethod                                                                                                                                                                                        # codegen/uops.py:136
    def var(name:Optional[str]=None, dtype:Optional[DType]=None): return NOp(UOps.NOOP, dtype=dtype, name=name)

  @dataclass(frozen=True, repr=False)  # reuse repr from UOp                                                                                                                                             # codegen/uops.py:131
  class NOp(UOp):
    def const(self:Union[UOp, DType, None], b:ConstType|Variable): return NOp((x:=UOp.const(self, b)).op, x.dtype, x.src, x.arg)                                                                         # codegen/uops.py:139

      @dataclass(frozen=True, eq=False)                                                                                                                                                                  # codegen/uops.py:32
      class UOp:
        def const(self:Union[UOp, DType, None], b:ConstType|Variable): return UOp._const(self.dtype if isinstance(self, UOp) else self, b)                                                               # codegen/uops.py:72

          @dataclass(frozen=True, eq=False)                                                                                                                                                              # codegen/uops.py:32
          class UOp:
            @staticmethod                                                                                                                                                                                # codegen/uops.py:75
            @functools.lru_cache(maxsize=None)
            def _const(dtype:Optional[DType], b:ConstType|Variable):
              if isinstance(b, Variable): return UOp(UOps.DEFINE_VAR, dtype, (UOp.const(dtypes.int, b.min), UOp.const(dtypes.int, cast(int,b.max))), b)                                                  # codegen/uops.py:77
              return UOp(UOps.CONST, dtype, arg=dtypes.as_const(b, dtype) if dtype is not None else b)                                                                                                   # codegen/uops.py:78

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __add__(self, x): return self.alu(BinaryOps.ADD, self.ufix(x))                                                                                                                                   # codegen/uops.py:53

      @dataclass(frozen=True, eq=False)                                                                                                                                                                  # codegen/uops.py:32
      class UOp:
        # *** uop syntactic sugar                                                                                                                                                                        # codegen/uops.py:48
        def ufix(self, x): return self.const(x) if not isinstance(x, UOp) else x

      @dataclass(frozen=True, eq=False)                                                                                                                                                                  # codegen/uops.py:32
      class UOp:
        def alu(self, arg, *src:UOp):                                                                                                                                                                    # codegen/uops.py:79
          return type(self)(UOps.ALU, dtypes.bool if arg in {BinaryOps.CMPLT, BinaryOps.CMPNE} else (self, *src)[-1].dtype, (self,)+src, arg)                                                            # codegen/uops.py:80

  @dataclass(frozen=True, repr=False)  # reuse repr from UOp                                                                                                                                             # codegen/uops.py:131
  class NOp(UOp):
    @staticmethod                                                                                                                                                                                        # codegen/uops.py:138
    def cvar(name:Optional[str]=None, dtype:Optional[DType]=None): return NOp(UOps.CONST, dtype=dtype, name=name)

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __mul__(self, x): return self.alu(BinaryOps.MUL, self.ufix(x))                                                                                                                                   # codegen/uops.py:56

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def lt(self, x): return self.alu(BinaryOps.CMPLT, self.ufix(x))                                                                                                                                      # codegen/uops.py:66

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def where(self, x, y): return self.alu(TernaryOps.WHERE, x, y)                                                                                                                                       # codegen/uops.py:70

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __sub__(self, x): return self.alu(BinaryOps.ADD, self.ufix(-x))                                                                                                                                  # codegen/uops.py:55

      @dataclass(frozen=True, eq=False)                                                                                                                                                                  # codegen/uops.py:32
      class UOp:
        def __neg__(self): return self.alu(UnaryOps.NEG)                                                                                                                                                 # codegen/uops.py:52

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def eq(self, x): return -self.ne(x)                                                                                                                                                                  # codegen/uops.py:65

      @dataclass(frozen=True, eq=False)                                                                                                                                                                  # codegen/uops.py:32
      class UOp:
        def ne(self, x): return self.alu(BinaryOps.CMPNE, self.ufix(x))                                                                                                                                  # codegen/uops.py:64

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def cast(self, dtype=None): return type(self)(UOps.CAST, dtype, (self,))                                                                                                                             # codegen/uops.py:49

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def max(self, x): return self.alu(BinaryOps.MAX, x)                                                                                                                                                  # codegen/uops.py:68

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __floordiv__(self, x): return self.alu(BinaryOps.IDIV, self.ufix(x))                                                                                                                             # codegen/uops.py:58

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __truediv__(self, x): return self.alu(BinaryOps.MUL, self.ufix(x).alu(UnaryOps.RECIP))                                                                                                           # codegen/uops.py:59

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    @staticmethod                                                                                                                                                                                        # codegen/uops.py:82
    def load(*src:UOp, dtype:Optional[DType]=None, **kwargs): return type(src[0])(UOps.LOAD, dtype, tuple(src)+tuple(kwargs.values()))

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    @staticmethod                                                                                                                                                                                        # codegen/uops.py:84
    def store(*src:UOp, **kwargs): return type((src:=(*src, *kwargs.values()))[0])(UOps.STORE, None, src)

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def __mod__(self, x): return self.alu(BinaryOps.MOD, self.ufix(x))                                                                                                                                   # codegen/uops.py:60

  class dtypes:                                                                                                                                                                                          # dtype.py:38
    @staticmethod                                                                                                                                                                                        # dtype.py:54
    def as_const(val: ConstType, dtype:DType): return int(val) if dtypes.is_int(dtype) else float(val) if dtypes.is_float(dtype) else bool(val)

      class dtypes:                                                                                                                                                                                      # dtype.py:38
        @staticmethod # static methds on top, or bool in the type info will refer to dtypes.bool                                                                                                         # dtype.py:42
        def is_int(x: DType) -> bool: return x.scalar() in (dtypes.int8, dtypes.int16, dtypes.int32, dtypes.int64, dtypes.bigint) or dtypes.is_unsigned(x)

          @dataclass(frozen=True, order=True)                                                                                                                                                            # dtype.py:9
          class DType:
            def scalar(self): return DTYPES_DICT[self.name[:-len(str(self.count))]] if self.count > 1 else self                                                                                          # dtype.py:19

          class dtypes:                                                                                                                                                                                  # dtype.py:38
            @staticmethod                                                                                                                                                                                # dtype.py:44
            def is_unsigned(x: DType) -> bool: return x.scalar() in (dtypes.uint8, dtypes.uint16, dtypes.uint32, dtypes.uint64)

      class dtypes:                                                                                                                                                                                      # dtype.py:38
        @staticmethod                                                                                                                                                                                    # dtype.py:40
        def is_float(x: DType) -> bool: return x.scalar() in (dtypes.float16, dtypes.bfloat16, dtypes.float32, dtypes.float64)

  @dataclass(frozen=True, repr=False)  # reuse repr from UOp                                                                                                                                             # codegen/uops.py:131
  class NOp(UOp):
    def compile(self: NOp, name:Optional[str]=None) -> UPat:                                                                                                                                             # codegen/uops.py:141
      return UPat(name=self.name, dtype=self.dtype) if self.op is UOps.NOOP else UPat(self.op, self.arg, (list if self.commutative()                                                                     # codegen/uops.py:142
        else tuple)(src.compile() for src in self.src) or None, self.name or name, self.dtype, self.allow_any_len)

        @dataclass(frozen=True, eq=False)                                                                                                                                                                # codegen/uops.py:32
        class UOp:
          def commutative(self) -> bool:                                                                                                                                                                 # codegen/uops.py:37
            return (self.op is UOps.ALU and \                                                                                                                                                            # codegen/uops.py:38
              self.arg in {BinaryOps.ADD, BinaryOps.MUL, BinaryOps.MAX, BinaryOps.CMPNE, BinaryOps.XOR, BinaryOps.AND, BinaryOps.OR})

acc_number = 0                                                                                                                                                                                           # codegen/uopgraph.py:391
expander = PatternMatcher([                                                                                                                                                                              # codegen/uopgraph.py:432
  # create gate MUST BE BEFORE expander
  (NOp(UOps.STORE, name="root"), create_gate),
  # do expansion
  (UPat({UOps.ALU, UOps.CAST, UOps.BITCAST, UOps.GEP, UOps.WMMA, UOps.LOAD, UOps.STORE,
         UOps.VECTORIZE, UOps.REDUCE, UOps.EXPAND, UOps.IF}, name="root"), do_expand),
  (NOp(UOps.CONTRACT, name="con"), do_contract),
  # remove EXPANDs from SINK
  (NOp(UOps.SINK, name="root"),
   lambda root: UOp(UOps.SINK, root.dtype, a, root.arg)
    if len(a:=tuple(flatten(x.src if x.op is UOps.EXPAND else (x,) for x in root.src))) != len(root.src) else None),
  # BARRIERs aren't actually expanded
  (NOp(UOps.BARRIER, src=(NOp(UOps.EXPAND, name="ex"),)), lambda ex: UOp(UOps.EXPAND, None, (UOp(UOps.BARRIER, None, ex.src),)*len(ex.src), ex.arg)),
  # empty EXPAND is NOOP
  (NOp(UOps.EXPAND, src=(NOp.var('x'),), arg=()), lambda x: x),
  # EXPAND GEP (needed for WMMA, generalize this) -> vectorized ALU
  (NOp(UOps.EXPAND, name="ex", src=tuple(NOp.var('x').gep(i)+NOp.var('y').gep(i) for i in range(8))),
    lambda ex,x,y: UOp(UOps.EXPAND, ex.dtype, tuple((x+y).gep(i) for i in range(8)), ex.arg)),
])

  @dataclass(frozen=True, eq=False)                                                                                                                                                                      # codegen/uops.py:32
  class UOp:
    def gep(self, i:int): return type(self)(UOps.GEP, self.dtype.scalar() if self.dtype is not None else None, (self,), i)                                                                               # codegen/uops.py:51

reducer = PatternMatcher([                                                                                                                                                                               # codegen/uopgraph.py:460
  (NOp(UOps.REDUCE, name="root"), do_reduce),
  # no ALU on vectorized dtypes
  (UPat({UOps.ALU, UOps.CAST, UOps.BITCAST}, name="alu"), no_vectorized_alu),
  # VECTORIZE a CONST is a CONST (eventually remove this rule)
  (UPat(UOps.VECTORIZE, name="root", src=UPat(UOps.CONST, name="c")), lambda root, c: root.const(c.arg)),
  # delete_redundant_gates (after expand, is this still needed?)
  (NOp(UOps.STORE, name="root"), delete_redundant_gates),
])

from tinygrad.codegen.lowerer import lazyop_to_uop                                                                                                                                                       # codegen/kernel.py:17
from __future__ import annotations                                                                                                                                                                       # codegen/lowerer.py:1
from typing import List, Tuple, cast, Optional, Any, Dict                                                                                                                                                # codegen/lowerer.py:2
import functools                                                                                                                                                                                         # codegen/lowerer.py:3
from tinygrad.shape.shapetracker import ShapeTracker, View                                                                                                                                               # codegen/lowerer.py:4
from tinygrad.shape.symbolic import sint                                                                                                                                                                 # codegen/lowerer.py:5
from tinygrad.dtype import dtypes, PtrDType, ImageDType, DType                                                                                                                                           # codegen/lowerer.py:6
from tinygrad.ops import BufferOps, LazyOp, ReduceOps, UnaryOps, MetaOps, KernelInfo, MemBuffer, BinaryOps                                                                                               # codegen/lowerer.py:7
from tinygrad.codegen.uops import UOp, UOps                                                                                                                                                              # codegen/lowerer.py:8
from tinygrad.renderer import Renderer                                                                                                                                                                   # codegen/lowerer.py:9
from tinygrad.helpers import getenv, all_int, get_contraction, prod, partition, flatten                                                                                                                  # codegen/lowerer.py:10
from tinygrad.shape.symbolic import Variable, NumNode, SumNode, MulNode, DivNode, ModNode, LtNode, AndNode                                                                                               # codegen/lowerer.py:13
render_ops: Any = { NumNode: lambda self, ops, ctx: UOp.const(dtypes.bigint, self.b),                                                                                                                    # codegen/lowerer.py:15
                    MulNode: lambda self, ops, ctx: self.a.render(ops, ctx)*variable_to_uop(self.b, ctx),
                    DivNode: lambda self, ops, ctx: self.a.render(ops, ctx)//variable_to_uop(self.b, ctx),
                    ModNode: lambda self, ops, ctx: self.a.render(ops, ctx)%variable_to_uop(self.b, ctx),
                    LtNode: lambda self, ops, ctx: self.a.render(ops, ctx).lt(variable_to_uop(self.b, ctx)),
  Variable: lambda self,ops,ctx: ctx[self] if ctx is not None and self in ctx else \
    UOp(UOps.DEFINE_VAR, dtypes.int, (UOp.const(dtypes.int, self.min), UOp.const(dtypes.int, self.max)), self),
  SumNode: lambda self,ops,ctx: functools.reduce(lambda a,b: a+b.render(ops, ctx), self.nodes[1:], self.nodes[0].render(ops,ctx)),
  AndNode: lambda self,ops,ctx: functools.reduce(lambda a,b: a*b.render(ops, ctx), self.nodes[1:], self.nodes[0].render(ops,ctx)) }

from enum import Enum, auto                                                                                                                                                                              # codegen/kernel.py:18

class OptOps(Enum):                                                                                                                                                                                      # codegen/kernel.py:20
  TC = auto(); UPCAST = auto(); UPCASTMID = auto(); UNROLL = auto(); LOCAL = auto() # noqa: E702                                                                                                         # codegen/kernel.py:21
  GROUP = auto(); GROUPTOP = auto(); NOLOCALS = auto(); PADTO = auto(); SWAP = auto() # noqa: E702                                                                                                       # codegen/kernel.py:22

@dataclass(frozen=True, order=True)                                                                                                                                                                      # codegen/kernel.py:31
class Opt:
  op: OptOps                                                                                                                                                                                             # codegen/kernel.py:32
  axis: Optional[int] = None                                                                                                                                                                             # codegen/kernel.py:33
  amt: Optional[int] = None                                                                                                                                                                              # codegen/kernel.py:34

@dataclass                                                                                                                                                                                               # codegen/kernel.py:43
class TensorCoreOptions:
  axes: Tuple[int, ...] # the location of the original N and M axes if still in the shape                                                                                                                # codegen/kernel.py:44
  axes_exist: Tuple[bool, ...] # true if the original N and M axes are still in the shape                                                                                                                # codegen/kernel.py:45
  axis_pads: Tuple[Tuple[int, int], ...]                                                                                                                                                                 # codegen/kernel.py:46

class Kernel:                                                                                                                                                                                            # codegen/kernel.py:54
  kernel_cnt: Final[DefaultDict[str, int]] = defaultdict(int)                                                                                                                                            # codegen/kernel.py:620

from tinygrad.engine.schedule import ScheduleItem                                                                                                                                                        # engine/realize.py:11
import sys, pickle, atexit                                                                                                                                                                               # engine/schedule.py:1
from collections import defaultdict, deque                                                                                                                                                               # engine/schedule.py:2
from dataclasses import dataclass                                                                                                                                                                        # engine/schedule.py:3
from typing import Tuple, List, Dict, Optional, Set, DefaultDict, Union, cast, get_args                                                                                                                  # engine/schedule.py:4
from tinygrad.ops import MetaOps, BufferOps, LazyOp, Op, ReduceOps, ConstBuffer, MemBuffer, UNSAFE_PAD_OPS, UnaryOps, reduce_st                                                                          # engine/schedule.py:5
from tinygrad.engine.graph import log_lazybuffer, realized_lazybuffer                                                                                                                                    # engine/schedule.py:6
import os, atexit, functools, contextlib                                                                                                                                                                 # engine/graph.py:1
from collections import defaultdict                                                                                                                                                                      # engine/graph.py:2
from typing import List, Any, DefaultDict                                                                                                                                                                # engine/graph.py:3
from tinygrad.ops import UnaryOps, BinaryOps, ReduceOps, MetaOps, BufferOps, TernaryOps                                                                                                                  # engine/graph.py:4
from tinygrad.device import Device                                                                                                                                                                       # engine/graph.py:5
from tinygrad.helpers import GRAPHPATH, DEBUG, GlobalCounters                                                                                                                                            # engine/graph.py:6
from tinygrad.codegen.uops import UOps, UOp                                                                                                                                                              # engine/graph.py:7
from tinygrad.shape.symbolic import NumNode                                                                                                                                                              # engine/graph.py:8
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # engine/graph.py:9
with contextlib.suppress(ImportError): import networkx as nx                                                                                                                                             # engine/graph.py:11
if DEBUG >= 2: atexit.register(print_globalcounters)                                                                                                                                                     # engine/graph.py:19

  class ContextVar:                                                                                                                                                                                      # helpers.py:91
    def __ge__(self, x): return self.value >= x                                                                                                                                                          # helpers.py:101

G:Any = None                                                                                                                                                                                             # engine/graph.py:26
counts: DefaultDict[type, int] = defaultdict(int)                                                                                                                                                        # engine/graph.py:33
top_colors = {MetaOps: '#FFFFa0', UnaryOps: "#c0c0c0", ReduceOps: "#FFA0A0", BinaryOps: "#c0c0c0",                                                                                                       # engine/graph.py:46
              TernaryOps: "#c0c0c0", BufferOps: '#a0a0ff'}
graph_uops_cnt = 0                                                                                                                                                                                       # engine/graph.py:76
from tinygrad.helpers import GRAPH, DEBUG, MULTIOUTPUT, SAVE_SCHEDULE, FUSE_CONV_BW, FUSE_ARANGE, GlobalCounters, colored, prod, dedup,\                                                                 # engine/schedule.py:7
    all_int, merge_dicts, getenv, Metadata
from tinygrad.shape.symbolic import Variable, sint                                                                                                                                                       # engine/schedule.py:9
from tinygrad.dtype import ConstType, ImageDType, dtypes                                                                                                                                                 # engine/schedule.py:10
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # engine/schedule.py:11
from tinygrad.shape.shapetracker import ShapeTracker                                                                                                                                                     # engine/schedule.py:12
from tinygrad.device import Buffer, Device                                                                                                                                                               # engine/schedule.py:13
from tinygrad.shape.view import View, strides_for_shape                                                                                                                                                  # engine/schedule.py:14
sys.setrecursionlimit(10000)                                                                                                                                                                             # engine/schedule.py:17
logops = open(getenv("LOGOPS", ""), "a") if getenv("LOGOPS", "") else None                                                                                                                               # engine/schedule.py:20

@dataclass(frozen=True)                                                                                                                                                                                  # engine/schedule.py:25
class ScheduleItem:
  ast: LazyOp                                                                                                                                                                                            # engine/schedule.py:26
  bufs: Tuple[Buffer, ...]                                                                                                                                                                               # engine/schedule.py:27
  metadata: Optional[List[Metadata]] = None                                                                                                                                                              # engine/schedule.py:28

SCHEDULES: List = []                                                                                                                                                                                     # engine/schedule.py:358
logkerns, logkerns_level = open(getenv("LOGKERNS", ""), "a") if getenv("LOGKERNS", "") else None, getenv("LOGKERNS_LEVEL", 1)                                                                            # engine/realize.py:15

method_cache: Dict[Tuple[str, LazyOp, int, bool], CompiledRunner] = {}                                                                                                                                   # engine/realize.py:148

@dataclass(frozen=True)                                                                                                                                                                                  # engine/realize.py:166
class ExecItem:
  prg: Runner                                                                                                                                                                                            # engine/realize.py:167
  bufs: List[Optional[Buffer]]                                                                                                                                                                           # engine/realize.py:168
  metadata: Optional[List[Metadata]] = None                                                                                                                                                              # engine/realize.py:169

capturing: List = []  # put classes with an add method in here                                                                                                                                           # engine/realize.py:216
from tinygrad.engine.schedule import ScheduleItem, create_schedule_with_vars, memory_planner                                                                                                             # tensor.py:19

import tinygrad.function as F                                                                                                                                                                            # tensor.py:42
"""This is where the forwards and backwards passes live."""                                                                                                                                              # function.py:1
import math                                                                                                                                                                                              # function.py:2
from typing import Tuple, Optional                                                                                                                                                                       # function.py:3
from tinygrad.helpers import argsort                                                                                                                                                                     # function.py:4
from tinygrad.dtype import dtypes, DType, sum_acc_dtype                                                                                                                                                  # function.py:5
from tinygrad.ops import UnaryOps, BinaryOps, TernaryOps, ReduceOps                                                                                                                                      # function.py:6
from tinygrad.tensor import Function                                                                                                                                                                     # function.py:7
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # function.py:8
from tinygrad.shape.symbolic import sint                                                                                                                                                                 # function.py:9

class Tensor:                                                                                                                                                                                            # tensor.py:92
  """                                                                                                                                                                                                    # tensor.py:93
  A `Tensor` is a multi-dimensional matrix containing elements of a single data type.

  ```python exec="true" session="tensor"
  from tinygrad import Tensor, dtypes, nn
  import numpy as np
  import math
  np.set_printoptions(precision=4)
  ```
  """
  __slots__ = "lazydata", "requires_grad", "grad", "_ctx"                                                                                                                                                # tensor.py:103
  __deletable__ = ('_ctx',)                                                                                                                                                                              # tensor.py:104
  training: ClassVar[bool] = False                                                                                                                                                                       # tensor.py:105
  no_grad: ClassVar[bool] = False                                                                                                                                                                        # tensor.py:106

  _seed: int = int(time.time())                                                                                                                                                                          # tensor.py:386
  _rng_counter: Optional[Tensor] = None                                                                                                                                                                  # tensor.py:387

for device in Device._devices: setattr(Tensor, f"{device.lower()}", functools.partialmethod(Tensor.to, device))                                                                                          # tensor.py:3144
if IMAGE:                                                                                                                                                                                                # tensor.py:3146

  class ContextVar:                                                                                                                                                                                      # helpers.py:91
    def __bool__(self): return bool(self.value)                                                                                                                                                          # helpers.py:100

if TRACEMETA >= 1:                                                                                                                                                                                       # tensor.py:3191

  for name, fn in inspect.getmembers(Tensor, inspect.isfunction):                                                                                                                                        # tensor.py:3192
    if name in ["__class__", "__init__", "__new__", "__repr__", "backward", "sequential"]: continue                                                                                                      # tensor.py:3193
    setattr(Tensor, name, functools.wraps(fn)(_metadata_wrapper(fn)))                                                                                                                                    # tensor.py:3194

      def _metadata_wrapper(fn):                                                                                                                                                                         # tensor.py:3159
        return _wrapper                                                                                                                                                                                  # tensor.py:3189

from tinygrad.engine.jit import TinyJit                       # noqa: F401                                                                                                                               # __init__.py:2
from __future__ import annotations                                                                                                                                                                       # engine/jit.py:1
from typing import TypeVar, Generic, Callable, List, Tuple, Union, Dict, cast, Optional, Any                                                                                                             # engine/jit.py:2
import functools, itertools, collections                                                                                                                                                                 # engine/jit.py:3
from tinygrad.tensor import Tensor                                                                                                                                                                       # engine/jit.py:4
from tinygrad.lazy import LazyBuffer                                                                                                                                                                     # engine/jit.py:5
from tinygrad.helpers import flatten, merge_dicts, DEBUG, Context, GRAPH, BEAM, getenv, all_int, colored, JIT, dedup                                                                                     # engine/jit.py:6
from tinygrad.device import Buffer, Compiled, Device                                                                                                                                                     # engine/jit.py:7
from tinygrad.dtype import DType                                                                                                                                                                         # engine/jit.py:8
from tinygrad.shape.shapetracker import ShapeTracker                                                                                                                                                     # engine/jit.py:9
from tinygrad.shape.symbolic import Variable, sint, sym_infer                                                                                                                                            # engine/jit.py:10
from tinygrad.engine.realize import ExecItem, capturing, EmptyOp, ViewOp, BufferXfer, CompiledRunner, Runner                                                                                             # engine/jit.py:11
from tinygrad.engine.schedule import _internal_memory_planner                                                                                                                                            # engine/jit.py:12
from tinygrad.nn.state import get_parameters                                                                                                                                                             # engine/jit.py:13
import math                                                                                                                                                                                              # nn/__init__.py:1
from typing import Optional, Union, Tuple                                                                                                                                                                # nn/__init__.py:2
from tinygrad.tensor import Tensor                                                                                                                                                                       # nn/__init__.py:3
from tinygrad.helpers import prod                                                                                                                                                                        # nn/__init__.py:4
from tinygrad.nn import optim, state, datasets  # noqa: F401                                                                                                                                             # nn/__init__.py:5
from typing import List                                                                                                                                                                                  # nn/optim.py:2
from tinygrad.helpers import dedup, flatten, getenv                                                                                                                                                      # nn/optim.py:3
from tinygrad.tensor import Tensor                                                                                                                                                                       # nn/optim.py:4
from tinygrad.dtype import dtypes, least_upper_dtype                                                                                                                                                     # nn/optim.py:5

import os, json, pathlib, zipfile, pickle, tarfile, struct                                                                                                                                               # nn/state.py:1
from typing import Dict, Union, List, Optional, Any, Tuple                                                                                                                                               # nn/state.py:2
from tinygrad.tensor import Tensor                                                                                                                                                                       # nn/state.py:3
from tinygrad.dtype import dtypes                                                                                                                                                                        # nn/state.py:4
from tinygrad.helpers import prod, argsort, DEBUG, Timing, CI, unwrap, GlobalCounters, tqdm                                                                                                              # nn/state.py:5
from tinygrad.shape.view import strides_for_shape                                                                                                                                                        # nn/state.py:6
from tinygrad.multi import MultiLazyBuffer                                                                                                                                                               # nn/state.py:7
safe_dtypes = {"BOOL":dtypes.bool, "I8":dtypes.int8, "U8":dtypes.uint8, "I16":dtypes.int16, "U16":dtypes.uint16, "I32":dtypes.int, "U32":dtypes.uint,                                                    # nn/state.py:9
               "I64":dtypes.int64, "U64":dtypes.uint64, "F16":dtypes.float16, "BF16":dtypes.bfloat16, "F32":dtypes.float32, "F64":dtypes.float64}
inverse_safe_dtypes = {v:k for k,v in safe_dtypes.items()}                                                                                                                                               # nn/state.py:11
from collections import OrderedDict                                                                                                                                                                      # nn/state.py:62
import gzip                                                                                                                                                                                              # nn/datasets.py:1
from tinygrad.tensor import Tensor                                                                                                                                                                       # nn/datasets.py:2
from tinygrad.helpers import fetch                                                                                                                                                                       # nn/datasets.py:3

BatchNorm2d = BatchNorm3d = BatchNorm                                                                                                                                                                    # nn/__init__.py:62

from dataclasses import dataclass                                                                                                                                                                        # engine/jit.py:14
from weakref import WeakKeyDictionary                                                                                                                                                                    # engine/jit.py:15

ReturnType = TypeVar('ReturnType')                                                                                                                                                                       # engine/jit.py:131

@dataclass                                                                                                                                                                                               # engine/jit.py:133
class CapturedJit(Generic[ReturnType]):
  ret: Any  # includes the Tensors or any other returned object                                                                                                                                          # engine/jit.py:134
  jit_cache: List[ExecItem]                                                                                                                                                                              # engine/jit.py:135
  input_replace: Dict[Tuple[int, int], int]                                                                                                                                                              # engine/jit.py:136
  extra_view_inputs: List[Tuple[int, int, str, int, DType]]                                                                                                                                              # engine/jit.py:137
  expected_names: List[Union[int, str]]                                                                                                                                                                  # engine/jit.py:138
  expected_st_vars_dtype_device: List[Tuple[ShapeTracker, Tuple[Variable, ...], DType, str]]                                                                                                             # engine/jit.py:139

from tinygrad.shape.symbolic import Variable                  # noqa: F401                                                                                                                               # __init__.py:3
from tinygrad.dtype import dtypes                             # noqa: F401                                                                                                                               # __init__.py:4
from tinygrad.helpers import GlobalCounters, fetch, Context   # noqa: F401                                                                                                                               # __init__.py:5
from tinygrad.device import Device                            # noqa: F401                                                                                                                               # __init__.py:6
from tinygrad.helpers import Timing, DEBUG, JIT, getenv, fetch, colored, trange                                                                                                                          # test.py:14
from tinygrad.nn import Embedding, Linear, LayerNorm                                                                                                                                                     # test.py:15
from tinygrad.nn.state import torch_load, load_state_dict, get_state_dict                                                                                                                                # test.py:16
MAX_CONTEXT = getenv("MAX_CONTEXT", 512)                                                                                                                                                                 # test.py:18

HALF = getenv("HALF")                                                                                                                                                                                    # test.py:19

VOCAB_SIZE = 50257                                                                                                                                                                                       # test.py:121
MODEL_PARAMS = {                                                                                                                                                                                         # test.py:122
  'gpt2':         dict(n_layers=12, n_heads=12, dim=768, norm_eps=1e-5, vocab_size=VOCAB_SIZE),   # 124M params
  'gpt2-medium':  dict(n_layers=24, n_heads=16, dim=1024, norm_eps=1e-5, vocab_size=VOCAB_SIZE),  # 350M params
  'gpt2-large':   dict(n_layers=36, n_heads=20, dim=1280, norm_eps=1e-5, vocab_size=VOCAB_SIZE),  # 774M params
  'gpt2-xl':      dict(n_layers=48, n_heads=25, dim=1600, norm_eps=1e-5, vocab_size=VOCAB_SIZE),  # 1558M params
}

if __name__ == "__main__":                                                                                                                                                                               # test.py:178
  Tensor.no_grad = True                                                                                                                                                                                  # test.py:179
  print(f"using {Device.DEFAULT} backend")                                                                                                                                                               # test.py:180

    class _Device:                                                                                                                                                                                       # device.py:13
      @functools.cached_property                                                                                                                                                                         # device.py:31
      def DEFAULT(self) -> str:
        device_from_env: Optional[str] = functools.reduce(lambda val, ele: ele if getenv(ele) == 1 else val, self._devices, None)   # type: ignore                                                       # device.py:32

        if device_from_env: return device_from_env                                                                                                                                                       # device.py:33

  default_prompt = "What is the answer to life, the universe, and everything?"                                                                                                                           # test.py:181
  parser = argparse.ArgumentParser(description='Run GPT2 in tinygrad', formatter_class=argparse.ArgumentDefaultsHelpFormatter)                                                                           # test.py:183
  parser.add_argument('--prompt', type=str, default=default_prompt, help="Phrase to start with")                                                                                                         # test.py:184
  parser.add_argument('--count', type=int, default=100, help="Max number of tokens to generate")                                                                                                         # test.py:185
  parser.add_argument('--temperature', type=float, default=0.8, help="Temperature in the softmax")                                                                                                       # test.py:186
  parser.add_argument('--model_size', type=str, default="gpt2-medium", help="Size of model to use [gpt2, gpt2-medium, gpt2-large, gpt2-xl]")                                                             # test.py:187
  parser.add_argument('--timing', action='store_true', help="Print timing per token")                                                                                                                    # test.py:188
  parser.add_argument('--seed', type=int, help="Set the random seed")                                                                                                                                    # test.py:189
  parser.add_argument('--batch_size', type=int, default=1, help="Set the input batch size")                                                                                                              # test.py:190
  parser.add_argument('--benchmark', type=int, default=-1, help="Benchmark GPT with the given number of tokens")                                                                                         # test.py:191
  parser.add_argument('--noshow', action='store_true', help="Don't show the output")                                                                                                                     # test.py:192
  args = parser.parse_args()                                                                                                                                                                             # test.py:193
  if args.seed is not None:                                                                                                                                                                              # test.py:195
  print(f"using {args.model_size}")                                                                                                                                                                      # test.py:199
  gpt2 = GPT2.build(args.model_size)                                                                                                                                                                     # test.py:200

    class GPT2:                                                                                                                                                                                          # test.py:129
      @staticmethod                                                                                                                                                                                      # test.py:131
      def build(model_size="gpt2"):
        tokenizer = tiktoken.get_encoding("gpt2")                                                                                                                                                        # test.py:132
        model = Transformer(**MODEL_PARAMS[model_size])                                                                                                                                                  # test.py:134

          class Transformer:                                                                                                                                                                             # test.py:75
            def __init__(self, dim, n_heads, n_layers, norm_eps, vocab_size, max_seq_len=1024):                                                                                                          # test.py:76
              self.vocab_size = vocab_size                                                                                                                                                               # test.py:77
              self.wte = Embedding(vocab_size, dim)                                                                                                                                                      # test.py:78

                class Embedding:                                                                                                                                                                         # nn/__init__.py:302
                  def __init__(self, vocab_size:int, embed_size:int):                                                                                                                                    # nn/__init__.py:313
                    self.vocab_sz, self.embed_sz, self.weight = vocab_size, embed_size, Tensor.glorot_uniform(vocab_size, embed_size)                                                                    # nn/__init__.py:314

                      def _metadata_wrapper(fn):                                                                                                                                                         # tensor.py:3159
                        def _wrapper(*args, **kwargs):                                                                                                                                                   # tensor.py:3160
                          if _METADATA.get() is not None: return fn(*args, **kwargs)                                                                                                                     # tensor.py:3161
                          if TRACEMETA >= 2:                                                                                                                                                             # tensor.py:3163

                          else: caller = ""                                                                                                                                                              # tensor.py:3183
                          token = _METADATA.set(Metadata(name=fn.__name__, caller=caller))                                                                                                               # tensor.py:3185
                          ret = fn(*args, **kwargs)                                                                                                                                                      # tensor.py:3186

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              # https://www.tensorflow.org/api_docs/python/tf/keras/initializers/GlorotUniform                                                                                           # tensor.py:677
                              @staticmethod
                              def glorot_uniform(*shape, **kwargs) -> Tensor:
                                return Tensor.uniform(*shape, low=-1.0, high=1.0, **kwargs).mul((6/(argfix(*shape)[0]+prod(argfix(*shape)[1:])))**0.5)                                                   # tensor.py:689

                              class Tensor:                                                                                                                                                              # tensor.py:92
                                @staticmethod                                                                                                                                                            # tensor.py:644
                                def uniform(*shape, low=0.0, high=1.0, **kwargs) -> Tensor:
                                  dtype = kwargs.pop("dtype", dtypes.default_float)                                                                                                                      # tensor.py:656
                                  return ((high-low) * Tensor.rand(*shape, **kwargs)).cast(dtype) + low                                                                                                  # tensor.py:657

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  @staticmethod                                                                                                                                                          # tensor.py:407
                                  def rand(*shape, device:Optional[Union[Tuple[str, ...], str]]=None, dtype:Optional[DTypeLike]=None, **kwargs):
                                    if Tensor._rng_counter is None: Tensor._rng_counter = Tensor([0], dtype=dtypes.uint32, requires_grad=False)                                                          # tensor.py:420

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __init__(self, data:Union[None, ConstType, List, Tuple, LazyBuffer, np.ndarray, bytes, MultiLazyBuffer, Variable],                                           # tensor.py:108
                                                     device:Optional[Union[str, tuple, list]]=None, dtype:Optional[DTypeLike]=None, requires_grad:Optional[bool]=None):
                                          if dtype is not None: dtype = to_dtype(dtype)                                                                                                                  # tensor.py:110

                                            def to_dtype(dtype:DTypeLike) -> DType: return dtype if isinstance(dtype, DType) else getattr(dtypes, dtype)                                                 # dtype.py:100

                                          assert dtype is None or isinstance(dtype, DType), f"invalid dtype {dtype}"                                                                                     # tensor.py:111
                                          device = tuple(Device.canonicalize(x) for x in device) if isinstance(device, (tuple, list)) else Device.canonicalize(device)                                   # tensor.py:112

                                            class _Device:                                                                                                                                               # device.py:13
                                              # NOTE: you can't cache canonicalize in case Device.DEFAULT changes                                                                                        # device.py:18
                                              def canonicalize(self, device:Optional[str]) -> str: return self._canonicalize(device) if device is not None else Device.DEFAULT

                                          self.grad: Optional[Tensor] = None                                                                                                                             # tensor.py:115
                                          self.requires_grad: Optional[bool] = requires_grad                                                                                                             # tensor.py:119
                                          self._ctx: Optional[Function] = None                                                                                                                           # tensor.py:122
                                          if isinstance(data, LazyBuffer): assert dtype is None or dtype == data.dtype, "dtype doesn't match, and casting isn't supported"                               # tensor.py:125
                                          elif isinstance(data, get_args(ConstType)): data = _metaop(MetaOps.CONST, tuple(), dtype or dtypes.from_py(data), device, data)                                # tensor.py:126
                                          elif isinstance(data, Variable): data = _metaop(MetaOps.CONST, tuple(), dtype or dtypes.from_py(data.unbind()[1]), device, data)                               # tensor.py:127
                                          elif isinstance(data, bytes): data = _frompy(data, dtypes.uint8 if dtype is None else dtype)                                                                   # tensor.py:128
                                          elif isinstance(data, (list, tuple)):                                                                                                                          # tensor.py:129
                                            if dtype is None:                                                                                                                                            # tensor.py:130
                                            if dtype == dtypes.bfloat16: data = Tensor(_fromnp(np.array(data, np.float32)), device=device).cast(dtypes.bfloat16).lazydata                                # tensor.py:133
                                            else: data = _fromnp(np.array(data).astype(_to_np_dtype(dtype)))                                                                                             # tensor.py:134

                                              def _to_np_dtype(dtype:DType) -> Optional[type]: return np.dtype(dtype.fmt).type if dtype.fmt is not None else None                                        # tensor.py:49

                                              def _fromnp(x: np.ndarray) -> LazyBuffer:                                                                                                                  # tensor.py:51
                                                ret = LazyBuffer.metaop(MetaOps.EMPTY, x.shape, _from_np_dtype(x.dtype), "NPY")                                                                          # tensor.py:52

                                                  def _from_np_dtype(npdtype:type) -> DType: return dtypes.fields()[np.dtype(npdtype).name]                                                              # tensor.py:48

                                                    class dtypes:                                                                                                                                        # dtype.py:38
                                                      @staticmethod                                                                                                                                      # dtype.py:64
                                                      def fields() -> Dict[str, DType]: return DTYPES_DICT

                                                  class LazyBuffer:                                                                                                                                      # lazy.py:26
                                                    @staticmethod                                                                                                                                        # lazy.py:70
                                                    def metaop(op, shape:Tuple[sint,...], dtype:DTypeLike, device:str, arg=None, src:Tuple[LazyBuffer, ...]=(), enable_cache=False) -> LazyBuffer:
                                                      assert isinstance(src, tuple)                                                                                                                      # lazy.py:71
                                                      return create_lazybuffer(device, ShapeTracker.from_shape(shape), dtype, op, arg, src, enable_cache=enable_cache)                                   # lazy.py:72

                                                        @dataclass(frozen=True)                                                                                                                          # shape/shapetracker.py:10
                                                        class ShapeTracker:
                                                          @staticmethod                                                                                                                                  # shape/shapetracker.py:26
                                                          def from_shape(shape:Tuple[sint, ...]) -> ShapeTracker: return ShapeTracker((View.create(shape),))

                                                            @dataclass(frozen=True)                                                                                                                      # shape/view.py:85
                                                            class View:
                                                              @staticmethod                                                                                                                              # shape/view.py:101
                                                              @functools.lru_cache(maxsize=None)
                                                              def create(shape:Tuple[sint, ...], strides:Optional[Tuple[sint, ...]]=None, offset:sint=0, mask:Optional[Tuple[Tuple[sint, sint], ...]]=None):
                                                                if not all(s >= 0 for s in shape): raise ValueError(f"Trying to create View with negative dimension: {shape=}")                          # shape/view.py:102
                                                                strides = canonicalize_strides(shape, strides) if strides else strides_for_shape(shape)                                                  # shape/view.py:103

                                                                  @functools.lru_cache(maxsize=None)                                                                                                     # shape/view.py:13
                                                                  def strides_for_shape(shape:Tuple[sint, ...]) -> Tuple[sint, ...]:
                                                                    if not shape: return ()                                                                                                              # shape/view.py:14
                                                                    strides = tuple(itertools.accumulate(reversed(shape[1:]), operator.mul, initial=1))[::-1]                                            # shape/view.py:15
                                                                    return canonicalize_strides(shape, strides)                                                                                          # shape/view.py:16

                                                                      @functools.lru_cache(maxsize=None)                                                                                                 # shape/view.py:9
                                                                      def canonicalize_strides(shape:Tuple[sint, ...], strides:Tuple[sint, ...]) -> Tuple[sint, ...]:
                                                                        return tuple(0 if s == 1 else st for s, st in zip(shape, strides))                                                               # shape/view.py:10

                                                                if 0 in shape: return View(shape, (0,) * len(shape), offset=0, mask=None, contiguous=True)                                               # shape/view.py:105
                                                                if mask is not None and all(m == (0,s) for m,s in zip(mask, shape)): mask = None                                                         # shape/view.py:107
                                                                if mask and any(elim := [not (b+1 < e) for b,e in mask]):                                                                                # shape/view.py:111
                                                                contiguous = offset == 0 and mask is None and strides == strides_for_shape(shape)                                                        # shape/view.py:116
                                                                return View(shape, strides, offset, mask, contiguous)                                                                                    # shape/view.py:117

                                                        def create_lazybuffer(device:str, st:ShapeTracker, dtype:DTypeLike, op:Optional[Op]=None, arg:Any=None, srcs:Tuple[LazyBuffer, ...]=(),          # lazy.py:12
                                                                              base:Optional[LazyBuffer]=None, enable_cache=bool(getenv("LAZYCACHE", 1))):
                                                          if st.size == 0: op, arg, srcs, base = MetaOps.CONST, 0, (), None                                                                              # lazy.py:14

                                                            @dataclass(frozen=True)                                                                                                                      # shape/shapetracker.py:10
                                                            class ShapeTracker:
                                                              @property                                                                                                                                  # shape/shapetracker.py:38
                                                              def size(self) -> int: return self.views[-1].size()

                                                                @dataclass(frozen=True)                                                                                                                  # shape/view.py:85
                                                                class View:
                                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                       # shape/view.py:93
                                                                  def size(self) -> int:
                                                                    ret = prod([x.max if isinstance(x, Node) else x for x in self.shape])                                                                # shape/view.py:95

                                                                      # NOTE: it returns int 1 if x is empty regardless of the type of x                                                                 # helpers.py:13
                                                                      def prod(x:Iterable[T]) -> Union[T,int]: return functools.reduce(operator.mul, x, 1)

                                                                    assert isinstance(ret, int), f"{ret=} is not int"                                                                                    # shape/view.py:96
                                                                    return ret                                                                                                                           # shape/view.py:97

                                                          dtype = to_dtype(dtype)                                                                                                                        # lazy.py:15

                                                          if op is MetaOps.CONST: arg, enable_cache = dtypes.as_const(arg, dtype) if not isinstance(arg, Variable) else arg, True                        # lazy.py:16
                                                          cache_key = (device, st, dtype, op, arg, tuple(ref(x) for x in srcs)) if base is None else (st, ref(base))                                     # lazy.py:18
                                                          if enable_cache and (rret := lazycache.get(cache_key, None)): return rret                                                                      # lazy.py:19
                                                          ret = LazyBuffer(device, st, dtype, op, arg, srcs, base=base, metadata=_METADATA.get())                                                        # lazy.py:21

                                                            class LazyBuffer:                                                                                                                            # lazy.py:26
                                                              def __init__(self, device:str, st:ShapeTracker, dtype:DTypeLike,                                                                           # lazy.py:27
                                                                           op:Optional[Op]=None, arg:Any=None, srcs:Tuple[LazyBuffer, ...]=(),
                                                                           base:Optional[LazyBuffer]=None, metadata:Optional[Metadata]=None):
                                                                self.device, self.st, self.dtype, self.shape, self.size, self.metadata = device, st, to_dtype(dtype), st.shape, st.size, metadata        # lazy.py:30

                                                                  @dataclass(frozen=True)                                                                                                                # shape/shapetracker.py:10
                                                                  class ShapeTracker:
                                                                    @property                                                                                                                            # shape/shapetracker.py:35
                                                                    def shape(self) -> Tuple[sint, ...]: return self.views[-1].shape

                                                                self._base: Optional[LazyBuffer] = None                                                                                                  # lazy.py:31
                                                                if base is None:                                                                                                                         # lazy.py:32
                                                                  self.op, self.arg, self.srcs = op, arg, srcs  # this is a LazyOp, except the src is LazyBuffers and not LazyOps                        # lazy.py:34
                                                                  assert self.op is not MetaOps.ASSIGN or srcs[1].base.realized is not None, "assign target must be realized"                            # lazy.py:35
                                                                  if self.op is MetaOps.VIEW:                                                                                                            # lazy.py:37
                                                                    self.buffer = srcs[1].base.buffer if self.op is MetaOps.ASSIGN else Buffer(device, self.size, self.dtype)                            # lazy.py:41

                                                                      class Buffer:                                                                                                                      # device.py:53
                                                                        def __init__(self, device:str, size:int, dtype:DType, opaque:Any=None, options:Optional[BufferOptions]=None,                     # device.py:54
                                                                                     initial_value:Optional[bytes]=None, lb_refcount=0, base:Optional[Buffer]=None, offset:int=0, preallocate=False):
                                                                          assert isinstance(dtype, DType)                                                                                                # device.py:56
                                                                          if isinstance(dtype, ImageDType): options = BufferOptions(image=dtype) # TODO: image hack shouldn't be here. where should it be? # device.py:57
                                                                          self.device, self.size, self.dtype, self.options, self.offset = device, size, dtype, options, offset                           # device.py:58
                                                                          if base is None:                                                                                                               # device.py:59
                                                                            assert offset == 0, "base buffers can't have offset"                                                                         # device.py:60
                                                                            self._base = None                                                                                                            # device.py:61
                                                                            self._lb_refcount = lb_refcount                                                                                              # device.py:62
                                                                            if opaque is not None: self.allocate(opaque)                                                                                 # device.py:63
                                                                            if initial_value is not None:                                                                                                # device.py:64
                                                                          if preallocate: self.allocate()                                                                                                # device.py:71

                                                                  self.buffer.ref(1)                                                                                                                     # lazy.py:42

                                                                    class Buffer:                                                                                                                        # device.py:53
                                                                      def ref(self, cnt): self.base._lb_refcount += cnt                                                                                  # device.py:76

                                                                        class Buffer:                                                                                                                    # device.py:53
                                                                          @property                                                                                                                      # device.py:73
                                                                          def base(self) -> Buffer: return self._base if self._base is not None else self

                                                                  self.contiguous_child: Optional[Tuple[ReferenceType[LazyBuffer], ShapeTracker]] = None                                                 # lazy.py:43
                                                                  self.forced_realize = False                                                                                                            # lazy.py:44

                                                          if enable_cache: lazycache[cache_key] = ret                                                                                                    # lazy.py:22
                                                          return ret                                                                                                                                     # lazy.py:23

                                                ret.buffer.allocate(x)                                                                                                                                   # tensor.py:54

                                                  class Buffer:                                                                                                                                          # device.py:53
                                                    def allocate(self, opaque=None) -> Buffer:                                                                                                           # device.py:79
                                                      assert not hasattr(self, '_buf'), "can't allocate already allocated buffer"                                                                        # device.py:80
                                                      self.allocator = Device[self.device].allocator                                                                                                     # device.py:81

                                                        class _Device:                                                                                                                                   # device.py:13
                                                          def __getitem__(self, ix:str) -> Compiled: return self.__get_canonicalized_item(self.canonicalize(ix))                                         # device.py:19

                                                          class _Device:                                                                                                                                 # device.py:13
                                                            @functools.lru_cache(maxsize=None)  # this class is a singleton, pylint: disable=method-cache-max-size-none                                  # device.py:16
                                                            def _canonicalize(self, device:str) -> str: return (device.split(":", 1)[0].upper() + ((":"+device.split(":", 1)[1]) if ':' in device else '')).replace(":0", "")   # noqa: E501

                                                            class _Device:                                                                                                                               # device.py:13
                                                              @functools.lru_cache(maxsize=None)  # this class is a singleton, pylint: disable=method-cache-max-size-none                                # device.py:21
                                                              def __get_canonicalized_item(self, ix:str) -> Compiled:
                                                                assert ((cpn:=multiprocessing.current_process().name) == "MainProcess") or ix.split(":")[0] in ["DISK", "NPY"], \                        # device.py:22
                                                                  f"can only open device {ix} from parent, not {cpn}"
                                                                x = ix.split(":")[0].upper()                                                                                                             # device.py:24
                                                                ret = [cls for cname, cls in inspect.getmembers(importlib.import_module(f'tinygrad.runtime.ops_{x.lower()}')) if (cname.lower() == x.lower() + "device") and x in self._devices][0](ix)  # noqa: E501 # device.py:25
                                                            import numpy as np                                                                                                                           # runtime/ops_npy.py:1
                                                            from tinygrad.helpers import flat_mv                                                                                                         # runtime/ops_npy.py:2
                                                            from tinygrad.device import Compiled, Allocator                                                                                              # runtime/ops_npy.py:3

                                                                  class NpyDevice(Compiled):                                                                                                             # runtime/ops_npy.py:8
                                                                    def __init__(self, device:str): super().__init__(device, NpyAllocator(), None, None, None)                                           # runtime/ops_npy.py:9

                                                                      class Compiled:                                                                                                                    # device.py:187
                                                                        def __init__(self, device:str, allocator:Allocator, renderer:Optional[Renderer], compiler:Optional[Compiler], runtime, graph=None): # device.py:188
                                                                          self.dname, self.allocator, self.compiler, self.runtime, self.graph = device, allocator, compiler or Compiler(), runtime, graph # device.py:189

                                                                            class Compiler:                                                                                                              # device.py:177
                                                                              def __init__(self, cachekey:Optional[str]=None): self.cachekey = None if getenv("DISABLE_COMPILER_CACHE") else cachekey    # device.py:178

                                                                          self.renderer = renderer or Renderer()                                                                                         # device.py:190

                                                                if DEBUG >= 1: print(f"opened device {ix} from pid:{os.getpid()}")                                                                       # device.py:26

                                                                return ret                                                                                                                               # device.py:27

                                                      if self._base is not None:                                                                                                                         # device.py:82
                                                        self._buf = opaque if opaque is not None else self.allocator.alloc(self.nbytes, self.options)                                                    # device.py:87
                                                        if not self.device.startswith("DISK"): GlobalCounters.mem_used += self.nbytes                                                                    # device.py:88

                                                          class Buffer:                                                                                                                                  # device.py:53
                                                            @property                                                                                                                                    # device.py:100
                                                            def nbytes(self): return self.size*self.dtype.itemsize

                                                      return self                                                                                                                                        # device.py:89

                                                del ret.srcs                                                                                                                                             # tensor.py:55
                                                return ret                                                                                                                                               # tensor.py:56

                                          if not isinstance(data, (LazyBuffer, MultiLazyBuffer)):                                                                                                        # tensor.py:141
                                          if isinstance(device, tuple):                                                                                                                                  # tensor.py:145
                                            self.lazydata = data if data.device == device else data.copy_to_device(device)                                                                               # tensor.py:153

                                              class LazyBuffer:                                                                                                                                          # lazy.py:26
                                                def copy_to_device(self, device:str, force: bool = False) -> LazyBuffer:                                                                                 # lazy.py:119
                                                  if self.device == device: return self                                                                                                                  # lazy.py:121
                                                  if not force and self.st.contiguous and self.size == self.base.size and not self.base.realized and self.base.op is MetaOps.COPY:                       # lazy.py:124

                                                    @dataclass(frozen=True)                                                                                                                              # shape/shapetracker.py:10
                                                    class ShapeTracker:
                                                      @property                                                                                                                                          # shape/shapetracker.py:29
                                                      def contiguous(self) -> bool: return len(self.views) == 1 and self.views[0].contiguous

                                                    class LazyBuffer:                                                                                                                                    # lazy.py:26
                                                      # NOTE: this has to be a function to prevent self reference                                                                                        # lazy.py:63
                                                      @property
                                                      def base(self) -> LazyBuffer: return self._base if self._base is not None else self

                                                    class LazyBuffer:                                                                                                                                    # lazy.py:26
                                                      @property                                                                                                                                          # lazy.py:57
                                                      def realized(self) -> Optional[Buffer]:
                                                        return self.buffer if self._base is None and not hasattr(self, 'srcs') else None                                                                 # lazy.py:59

                                                  if self.is_unrealized_const():                                                                                                                         # lazy.py:128

                                                    class LazyBuffer:                                                                                                                                    # lazy.py:26
                                                      def is_unrealized_const(self): return self.base.realized is None and self.base.op is MetaOps.CONST and not isinstance(self.base.arg, Variable)     # lazy.py:113

                                                  if prod(self.st.shape) < prod(self.base.st.shape): return self.contiguous()._copy(device)                                                              # lazy.py:132

                                                  return self.base._copy(device)._view(self.st)                                                                                                          # lazy.py:135

                                                    class LazyBuffer:                                                                                                                                    # lazy.py:26
                                                      def _copy(self, device:str) -> LazyBuffer:                                                                                                         # lazy.py:116
                                                        return create_lazybuffer(device, ShapeTracker.from_shape(self.shape), self.dtype, MetaOps.COPY, self.buffer.nbytes, (self,), enable_cache=False) # lazy.py:117

                                                    class LazyBuffer:                                                                                                                                    # lazy.py:26
                                                      def _view(self, new_st:ShapeTracker) -> LazyBuffer:                                                                                                # lazy.py:208
                                                        if self.st.size == 0 or (new_st.views[-1].mask is not None and any((x[1]-x[0]) == 0 for x in new_st.views[-1].mask)):                            # lazy.py:209

                                                        if new_st.contiguous and self.base.shape == new_st.shape: return self.base                                                                       # lazy.py:211

                                    if not THREEFRY.value:                                                                                                                                               # tensor.py:421
                                      if to_dtype(dtype or dtypes.default_float) == dtypes.bfloat16:                                                                                                     # tensor.py:423

                                      return Tensor._metaop(MetaOps.CUSTOM, argfix(*shape), arg=custom_random, device=device, dtype=dtype, **kwargs)                                                     # tensor.py:425

                                        def argfix(*x):                                                                                                                                                  # helpers.py:20
                                          if x and x[0].__class__ in (tuple, list):                                                                                                                      # helpers.py:21
                                          return x                                                                                                                                                       # helpers.py:24

                                  class Tensor:                                                                                                                                                          # tensor.py:92
                                    @staticmethod                                                                                                                                                        # tensor.py:365
                                    def _metaop(op, shape, device:Optional[Union[Tuple[str, ...], str]]=None, dtype:Optional[DTypeLike]=None, arg=None, **kwargs):
                                      if isinstance(device, tuple):                                                                                                                                      # tensor.py:366
                                      return Tensor(LazyBuffer.metaop(op, shape, dtype or dtypes.default_float, Device.canonicalize(device), arg), device, dtype, **kwargs)                              # tensor.py:369

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def __rmul__(self, x) -> Tensor: return self.mul(x, True)                                                                                                              # tensor.py:2752

                                  class Tensor:                                                                                                                                                          # tensor.py:92
                                    def mul(self, x:Union[Tensor, ConstType], reverse=False) -> Tensor:                                                                                                  # tensor.py:2529
                                      return F.Mul.apply(*self._broadcasted(x, reverse))                                                                                                                 # tensor.py:2547

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def _broadcasted(self, y:Union[Tensor, Node, ConstType], reverse:bool=False, match_dtype:bool=True) -> Tuple[Tensor, Tensor]:                                      # tensor.py:2464
                                        x: Tensor = self                                                                                                                                                 # tensor.py:2465
                                        if not isinstance(y, Tensor):                                                                                                                                    # tensor.py:2466
                                          assert isinstance(y, (*get_args(ConstType), Node)), f"{type(y)=}, {y=}"                                                                                        # tensor.py:2468
                                          if isinstance(x.dtype, ImageDType) or dtypes.is_float(x.dtype) or (dtypes.is_int(x.dtype) and isinstance(y, int)): y_dtype = x.dtype                           # tensor.py:2469

                                            class Tensor:                                                                                                                                                # tensor.py:92
                                              @property                                                                                                                                                  # tensor.py:184
                                              def dtype(self) -> DType: return self.lazydata.dtype

                                          if isinstance(y, Node): y = Tensor.from_node(y, device=x.device)                                                                                               # tensor.py:2471
                                          else: y = Tensor(dtypes.as_const(y, y_dtype), x.device, y_dtype, requires_grad=False)                                                                          # tensor.py:2472

                                            class Tensor:                                                                                                                                                # tensor.py:92
                                              @property                                                                                                                                                  # tensor.py:178
                                              def device(self) -> Union[str, Tuple[str, ...]]: return self.lazydata.device

                                      def _metaop(op, shape:Tuple[sint,...], dtype:DType, device:Union[str, Tuple[str, ...]], arg=None, src:Tuple[LazyBuffer, ...]=()):                                  # tensor.py:44
                                        if isinstance(device, str): return LazyBuffer.metaop(op, shape, dtype, device, arg, src)                                                                         # tensor.py:45

                                        if match_dtype and x.dtype != y.dtype:                                                                                                                           # tensor.py:2474

                                        if reverse: x, y = y, x                                                                                                                                          # tensor.py:2478
                                        out_shape = _broadcast_shape(x.shape, y.shape)                                                                                                                   # tensor.py:2481

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            @property                                                                                                                                                    # tensor.py:181
                                            def shape(self) -> Tuple[sint, ...]: return self.lazydata.shape

                                          def _broadcast_shape(*shapes:Tuple[sint, ...]) -> Tuple[sint, ...]:                                                                                            # tensor.py:89
                                            return tuple(0 if 0 in nth_dim_sizes else max(nth_dim_sizes) for nth_dim_sizes in zip(*_pad_left(*shapes)))                                                  # tensor.py:90

                                              def _pad_left(*shapes:Tuple[sint, ...]) -> Tuple[Tuple[sint, ...], ...]:                                                                                   # tensor.py:86
                                                max_dim = max(len(shape) for shape in shapes)                                                                                                            # tensor.py:87
                                                return tuple((1,) * (max_dim - len(shape)) + shape for shape in shapes)                                                                                  # tensor.py:88

                                        return x._broadcast_to(out_shape), y._broadcast_to(out_shape)                                                                                                    # tensor.py:2482

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        # ***** broadcasted elementwise ops *****                                                                                                                        # tensor.py:2455
                                        def _broadcast_to(self, shape:Tuple[sint, ...]) -> Tensor:
                                          if self.shape == shape: return self                                                                                                                            # tensor.py:2456

                                          if self.ndim > len(shape): raise ValueError(f"cannot broadcast tensor to fewer dimensions. shape={self.shape} to {shape=}")                                    # tensor.py:2457

                                            class Tensor:                                                                                                                                                # tensor.py:92
                                              @property                                                                                                                                                  # tensor.py:2955
                                              def ndim(self) -> int: return len(self.shape)

                                          padded, _ = _pad_left(self.shape, shape)                                                                                                                       # tensor.py:2459

                                          if any(from_ != 1 and from_ != to for from_,to in zip(padded, shape)): raise ValueError(f"cannot broadcast from shape={self.shape} to {shape=}")               # tensor.py:2461
                                          return F.Expand.apply(self.reshape(padded), shape=shape)                                                                                                       # tensor.py:2462

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def reshape(self, shape, *args) -> Tensor:                                                                                                                     # tensor.py:785
                                            new_shape = tuple([s if s is not None else self.shape[i] for i,s in enumerate(argfix(shape, *args))])                                                        # tensor.py:796

                                              def argfix(*x):                                                                                                                                            # helpers.py:20
                                                if x and x[0].__class__ in (tuple, list):                                                                                                          # OLD # helpers.py:21
                                                  if len(x) != 1: raise ValueError(f"bad arg {x}")                                                                                                       # helpers.py:22
                                                  return tuple(x[0])                                                                                                                                     # helpers.py:23

                                            if (c := new_shape.count(-1)) > 1: raise RuntimeError(f"only one dimension can be inferred using -1, getting {new_shape}")                                   # tensor.py:798
                                            if c: new_shape = tuple([-prod(self.shape) // prod(new_shape) if s == -1 else s for s in new_shape])                                                         # tensor.py:799
                                            return F.Reshape.apply(self, shape=new_shape) if new_shape != self.shape else self                                                                           # tensor.py:800

                                              class Function:                                                                                                                                            # tensor.py:23
                                                @classmethod                                                                                                                                             # tensor.py:35
                                                def apply(fxn:Type[Function], *x:Tensor, **kwargs) -> Tensor:
                                                  ctx = fxn(x[0].device, *x, metadata=_METADATA.get())                                                                                                   # tensor.py:36

                                                    class Function:                                                                                                                                      # tensor.py:23
                                                      def __init__(self, device:Union[str, Tuple[str, ...]], *tensors:Tensor, metadata:Optional[Metadata]=None):                                         # tensor.py:24
                                                        self.device = device                                                                                                                             # tensor.py:25
                                                        self.needs_input_grad = [t.requires_grad for t in tensors]                                                                                       # tensor.py:26
                                                        self.requires_grad = True if any(self.needs_input_grad) else None if None in self.needs_input_grad else False                                    # tensor.py:27
                                                        if self.requires_grad: self.parents = tensors                                                                                                    # tensor.py:28
                                                        self.metadata = metadata                                                                                                                         # tensor.py:29

                                                  ret = Tensor.__new__(Tensor)                                                                                                                           # tensor.py:37
                                                  ret.lazydata, ret.requires_grad, ret.grad = ctx.forward(*[t.lazydata for t in x], **kwargs), ctx.requires_grad, None                                   # tensor.py:38

                                                    class Reshape(Function):                                                                                                                             # function.py:187
                                                      def forward(self, x:LazyBuffer, shape:Tuple[int, ...]) -> LazyBuffer:                                                                              # function.py:188
                                                        self.input_shape = x.shape                                                                                                                       # function.py:189
                                                        return x.reshape(shape)                                                                                                                          # function.py:190

                                                          class LazyBuffer:                                                                                                                              # lazy.py:26
                                                            def reshape(self, arg:Tuple[sint, ...]): return self._view(self.st.reshape(arg))                                                             # lazy.py:214

                                                              @dataclass(frozen=True)                                                                                                                    # shape/shapetracker.py:10
                                                              class ShapeTracker:
                                                                def reshape(self, new_shape: Tuple[sint, ...]) -> ShapeTracker:                                                                          # shape/shapetracker.py:110
                                                                  if getenv("MERGE_VIEW", 1) and (new_view := self.views[-1].reshape(new_shape)) is not None: return ShapeTracker(self.views[0:-1] + (new_view,)) # shape/shapetracker.py:111

                                                                    @dataclass(frozen=True)                                                                                                              # shape/view.py:85
                                                                    class View:
                                                                      @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                   # shape/view.py:267
                                                                      def reshape(self, new_shape: Tuple[sint, ...]) -> Optional[View]:
                                                                        if self.shape == new_shape: return self                                                                                          # shape/view.py:268
                                                                        assert all(x >= 0 for x in new_shape), f"shape can't contain negative numbers {new_shape}"                                       # shape/view.py:270
                                                                        if 0 in self.shape:                                                                                                              # shape/view.py:271
                                                                        if (self_all_int := all_int(self.shape)):                                                                                        # shape/view.py:275

                                                                          def all_int(t: Sequence[Any]) -> TypeGuard[Tuple[int, ...]]: return all(isinstance(s, int) for s in t)                         # helpers.py:27

                                                                          assert all(isinstance(s, (int, Variable)) for s in new_shape), f"{self.shape=} -> {new_shape=} contains non (int, Variable) dim" # shape/view.py:276
                                                                          if prod(self.shape) != prod([s if isinstance(s, int) else cast(Variable,s).val for s in new_shape]):                           # shape/view.py:277

                                                                        if new_shape == () and self.mask and any(mx==my for (mx,my) in self.mask): return None                                           # shape/view.py:280
                                                                        if self.contiguous: return View.create(new_shape)                                                                                # shape/view.py:283

                                                              class LazyBuffer:                                                                                                                          # lazy.py:26
                                                                def _view(self, new_st:ShapeTracker) -> LazyBuffer:                                                                                      # lazy.py:208
                                                                  if self.st.size == 0 or (new_st.views[-1].mask is not None and any((x[1]-x[0]) == 0 for x in new_st.views[-1].mask)):            # OLD # lazy.py:209
                                                                  if new_st.contiguous and self.base.shape == new_st.shape: return self.base                                                       # OLD # lazy.py:211
                                                                  return create_lazybuffer(self.device, new_st, self.dtype, base=self.base)                                                              # lazy.py:212

                                                                class LazyBuffer:                                                                                                                        # lazy.py:26
                                                                  def __init__(self, device:str, st:ShapeTracker, dtype:DTypeLike,                                                                       # lazy.py:27
                                                                               op:Optional[Op]=None, arg:Any=None, srcs:Tuple[LazyBuffer, ...]=(),
                                                                               base:Optional[LazyBuffer]=None, metadata:Optional[Metadata]=None):
                                                                    self.device, self.st, self.dtype, self.shape, self.size, self.metadata = device, st, to_dtype(dtype), st.shape, st.size, metadata # OLD # lazy.py:30
                                                                    self._base: Optional[LazyBuffer] = None                                                                                        # OLD # lazy.py:31
                                                                    if base is None:                                                                                                               # OLD # lazy.py:32
                                                                      self.op, self.arg, self.srcs = op, arg, srcs  # this is a LazyOp, except the src is LazyBuffers and not LazyOps              # OLD # lazy.py:34
                                                                      assert self.op is not MetaOps.ASSIGN or srcs[1].base.realized is not None, "assign target must be realized"                  # OLD # lazy.py:35
                                                                      if self.op is MetaOps.VIEW:                                                                                                  # OLD # lazy.py:37
                                                                        self.buffer = srcs[1].base.buffer if self.op is MetaOps.ASSIGN else Buffer(device, self.size, self.dtype)                  # OLD # lazy.py:41
                                                                      self.buffer.ref(1)                                                                                                           # OLD # lazy.py:42
                                                                      self.contiguous_child: Optional[Tuple[ReferenceType[LazyBuffer], ShapeTracker]] = None                                       # OLD # lazy.py:43
                                                                      self.forced_realize = False                                                                                                  # OLD # lazy.py:44
                                                                      assert base.base == base, "base must be a base itself"                                                                             # lazy.py:47

                                                                      self._base = base                                                                                                                  # lazy.py:48

                                                  ret._ctx = ctx if ctx.requires_grad and not Tensor.no_grad else None  # used by autograd engine                                                        # tensor.py:39
                                                  return ret                                                                                                                                             # tensor.py:40

                                        # NOTE: this is sum in reverse                                                                                                                                   # function.py:179
                                        class Expand(Function):
                                          def forward(self, x:LazyBuffer, shape:Tuple[int, ...]) -> LazyBuffer:                                                                                          # function.py:180
                                            self.expanded_axis = tuple(i for i, (si, so) in enumerate(zip(x.shape, shape)) if si != so)                                                                  # function.py:181
                                            return x.expand(shape)                                                                                                                                       # function.py:182

                                              class LazyBuffer:                                                                                                                                          # lazy.py:26
                                                def expand(self, arg:Tuple[sint, ...]): return self._view(self.st.expand(arg))                                                                           # lazy.py:216

                                                  @dataclass(frozen=True)                                                                                                                                # shape/shapetracker.py:10
                                                  class ShapeTracker:
                                                    def expand(self, new_shape: Tuple[sint, ...]) -> ShapeTracker: return ShapeTracker(self.views[0:-1] + (self.views[-1].expand(new_shape), ))          # shape/shapetracker.py:106

                                                      @dataclass(frozen=True)                                                                                                                            # shape/view.py:85
                                                      class View:
                                                        @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                 # shape/view.py:239
                                                        def expand(self, new_shape: Tuple[sint, ...]) -> View:
                                                          if len(new_shape) != len(self.shape): raise ValueError(f"expand arg {new_shape=} must have same number of dimensions as shape {self.shape=}")  # shape/view.py:240
                                                          if 0 in self.shape:                                                                                                                            # shape/view.py:241
                                                          assert all((s == x or (s == 1 and st == 0)) for s,x,st in zip(self.shape, new_shape, self.strides)), f"can't expand {self.shape} into {new_shape}" # shape/view.py:244
                                                          mask = tuple([(((0,0) if m != (0,1) else (0,ns)) if s != ns else m) for m,s,ns in zip(self.mask, self.shape, new_shape)]) if self.mask else None # shape/view.py:246
                                                          return View.create(new_shape, self.strides, self.offset, mask)                                                                                 # shape/view.py:247

                                            class LazyBuffer:                                                                                                                                            # lazy.py:26
                                              def __del__(self):                                                                                                                                         # lazy.py:50
                                                if hasattr(self, 'buffer'): self.buffer.ref(-1)                                                                                                          # lazy.py:51

                                    class Mul(Function):                                                                                                                                                 # function.py:125
                                      def forward(self, x:LazyBuffer, y:LazyBuffer) -> LazyBuffer:                                                                                                       # function.py:126
                                        self.x, self.y = x, y                                                                                                                                            # function.py:127
                                        return x.e(BinaryOps.MUL, y)                                                                                                                                     # function.py:128

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def e(self, op:Union[MetaOps, UnaryOps, BinaryOps, TernaryOps], *in_srcs:LazyBuffer, arg:Optional[Any]=None) -> LazyBuffer:                                  # lazy.py:137
                                              srcs: List[LazyBuffer] = []                                                                                                                                # lazy.py:138
                                              for s in (self,)+in_srcs:                                                                                                                                  # lazy.py:139
                                                if s == s.base and s.base.contiguous_child and (root:=s.base.contiguous_child[0]()) is not None:                                                         # lazy.py:140

                                                  srcs.append(s)                                                                                                                                         # lazy.py:143

                                              assert all_same(dts:=[x.dtype.scalar() for x in (srcs[1:] if op is TernaryOps.WHERE else srcs)]), f"all dtypes must match {dts} on {op}"                   # lazy.py:144

                                                def all_same(items:List[T]): return all(x == items[0] for x in items)                                                                                    # helpers.py:26

                                              assert all_same([x.shape for x in srcs]), f"all shapes must be the same {[x.shape for x in srcs]}"                                                         # lazy.py:145

                                              if op is TernaryOps.WHERE: assert srcs[0].dtype == dtypes.bool, "TernaryOps.WHERE must have the first arg be bool"                                         # lazy.py:146
                                              if op is UnaryOps.NEG: assert srcs[0].dtype != dtypes.bool, "UnaryOps.NEG does not accept dtype bool"                                                      # lazy.py:147
                                              out_dtype = dtypes.bool if op in (BinaryOps.CMPLT, BinaryOps.CMPNE) else srcs[-1].dtype                                                                    # lazy.py:149
                                              if op in python_alu and all(s.is_unrealized_unmasked_const() for s in srcs):                                                                               # lazy.py:152

                                            class LazyBuffer:                                                                                                                                            # lazy.py:26
                                              def is_unrealized_unmasked_const(self): return self.is_unrealized_const() and all(v.mask is None for v in self.st.views)                                   # lazy.py:114

                                              if op is UnaryOps.NEG and self.base.op is UnaryOps.NEG and self.base.realized is None: return self.base.srcs[0]                                            # lazy.py:154
                                              if op in BinaryOps:                                                                                                                                        # lazy.py:155
                                                x, y = self, in_srcs[0]                                                                                                                                  # lazy.py:156
                                                if op is BinaryOps.ADD:                                                                                                                                  # lazy.py:157
                                                if op is BinaryOps.MUL:                                                                                                                                  # lazy.py:160
                                                  if x.is_unrealized_unmasked_const() and (val := x.base.arg) in (1, 0, -1):                                                                             # lazy.py:161

                                                  if y.is_unrealized_unmasked_const() and (val := y.base.arg) in (1, 0, -1):                                                                             # lazy.py:163

                                              return create_lazybuffer(self.device, ShapeTracker.from_shape(self.shape), out_dtype, op, arg, tuple(srcs))                                                # lazy.py:166

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def cast(self, dtype:DTypeLike) -> Tensor:                                                                                                                             # tensor.py:2969
                                    return self if self.dtype == (dt:=to_dtype(dtype)) else F.Cast.apply(self, dtype=dt)                                                                                 # tensor.py:2982

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def __add__(self, x) -> Tensor: return self.add(x)                                                                                                                     # tensor.py:2738

                                  class Tensor:                                                                                                                                                          # tensor.py:92
                                    def add(self, x:Union[Tensor, ConstType], reverse=False) -> Tensor:                                                                                                  # tensor.py:2488
                                      return F.Add.apply(*self._broadcasted(x, reverse))                                                                                                                 # tensor.py:2506

                                    class Add(Function):                                                                                                                                                 # function.py:118
                                      def forward(self, x:LazyBuffer, y:LazyBuffer) -> LazyBuffer: return x.e(BinaryOps.ADD, y)                                                                          # function.py:119

                                        class LazyBuffer:                                                                                                                                                # lazy.py:26
                                          def e(self, op:Union[MetaOps, UnaryOps, BinaryOps, TernaryOps], *in_srcs:LazyBuffer, arg:Optional[Any]=None) -> LazyBuffer:                                    # lazy.py:137
                                            srcs: List[LazyBuffer] = []                                                                                                                            # OLD # lazy.py:138
                                            for s in (self,)+in_srcs:                                                                                                                              # OLD # lazy.py:139
                                              if s == s.base and s.base.contiguous_child and (root:=s.base.contiguous_child[0]()) is not None:                                                     # OLD # lazy.py:140
                                                srcs.append(s)                                                                                                                                     # OLD # lazy.py:143
                                            assert all_same(dts:=[x.dtype.scalar() for x in (srcs[1:] if op is TernaryOps.WHERE else srcs)]), f"all dtypes must match {dts} on {op}"               # OLD # lazy.py:144
                                            assert all_same([x.shape for x in srcs]), f"all shapes must be the same {[x.shape for x in srcs]}"                                                     # OLD # lazy.py:145
                                            if op is TernaryOps.WHERE: assert srcs[0].dtype == dtypes.bool, "TernaryOps.WHERE must have the first arg be bool"                                     # OLD # lazy.py:146
                                            if op is UnaryOps.NEG: assert srcs[0].dtype != dtypes.bool, "UnaryOps.NEG does not accept dtype bool"                                                  # OLD # lazy.py:147
                                            out_dtype = dtypes.bool if op in (BinaryOps.CMPLT, BinaryOps.CMPNE) else srcs[-1].dtype                                                                # OLD # lazy.py:149
                                            if op in python_alu and all(s.is_unrealized_unmasked_const() for s in srcs):                                                                           # OLD # lazy.py:152
                                            if op is UnaryOps.NEG and self.base.op is UnaryOps.NEG and self.base.realized is None: return self.base.srcs[0]                                        # OLD # lazy.py:154
                                            if op in BinaryOps:                                                                                                                                    # OLD # lazy.py:155
                                              x, y = self, in_srcs[0]                                                                                                                              # OLD # lazy.py:156
                                              if op is BinaryOps.ADD:                                                                                                                              # OLD # lazy.py:157
                                                if y.is_unrealized_unmasked_const() and y.base.arg == 0: return x                                                                                        # lazy.py:158

                                                if x.is_unrealized_unmasked_const() and x.base.arg == 0: return y                                                                                        # lazy.py:159

                          _METADATA.reset(token)                                                                                                                                                         # tensor.py:3187
                          return ret                                                                                                                                                                     # tensor.py:3188

              self.wpe = Embedding(max_seq_len, dim)                                                                                                                                                     # test.py:79

              self.h = [TransformerBlock(dim, n_heads, norm_eps) for _ in range(n_layers)]                                                                                                               # test.py:80

            class TransformerBlock:                                                                                                                                                                      # test.py:64
              def __init__(self, dim, n_heads, norm_eps):                                                                                                                                                # test.py:65
                self.attn = Attention(dim, n_heads)                                                                                                                                                      # test.py:66

                  class Attention:                                                                                                                                                                       # test.py:21
                    def __init__(self, dim, n_heads):                                                                                                                                                    # test.py:22
                      self.c_attn = Linear(dim, 3*dim, bias=True)                                                                                                                                        # test.py:23

                        class Linear:                                                                                                                                                                    # nn/__init__.py:152
                          def __init__(self, in_features, out_features, bias=True):                                                                                                                      # nn/__init__.py:168
                            bound = 1 / math.sqrt(in_features)                                                                                                                                           # nn/__init__.py:169
                            self.weight = Tensor.uniform(out_features, in_features, low=-bound, high=bound)                                                                                              # nn/__init__.py:170

                            self.bias = Tensor.uniform(out_features, low=-bound, high=bound) if bias else None                                                                                           # nn/__init__.py:171

                      self.c_proj = Linear(dim, dim, bias=True)                                                                                                                                          # test.py:24

                      self.n_heads = n_heads                                                                                                                                                             # test.py:25
                      self.dim = dim                                                                                                                                                                     # test.py:26
                      self.head_dim = dim // n_heads                                                                                                                                                     # test.py:27

                self.mlp = FeedForward(dim, 4*dim)                                                                                                                                                       # test.py:67

                  class FeedForward:                                                                                                                                                                     # test.py:56
                    def __init__(self, dim, hidden_dim):                                                                                                                                                 # test.py:57
                      self.c_fc = Linear(dim, hidden_dim, bias=True)                                                                                                                                     # test.py:58

                      self.c_proj = Linear(hidden_dim, dim, bias=True)                                                                                                                                   # test.py:59

                self.ln_1 = LayerNorm(dim, norm_eps)                                                                                                                                                     # test.py:68

                  class LayerNorm:                                                                                                                                                                       # nn/__init__.py:234
                    def __init__(self, normalized_shape:Union[int, Tuple[int, ...]], eps:float=1e-5, elementwise_affine:bool=True):                                                                      # nn/__init__.py:251
                      self.normalized_shape = (normalized_shape,) if isinstance(normalized_shape, int) else tuple(normalized_shape)                                                                      # nn/__init__.py:252
                      self.axis, self.eps, self.elementwise_affine = tuple(-1-i for i in range(len(self.normalized_shape))), eps, elementwise_affine                                                     # nn/__init__.py:253
                      self.weight, self.bias = (Tensor.ones(*self.normalized_shape), Tensor.zeros(*self.normalized_shape)) if elementwise_affine else (None, None)                                       # nn/__init__.py:254

                    class Tensor:                                                                                                                                                                        # tensor.py:92
                      @staticmethod                                                                                                                                                                      # tensor.py:479
                      def ones(*shape, **kwargs):
                        return Tensor.full(argfix(*shape), 1.0, **kwargs)                                                                                                                                # tensor.py:493

                      class Tensor:                                                                                                                                                                      # tensor.py:92
                        @staticmethod                                                                                                                                                                    # tensor.py:445
                        def full(shape:Tuple[sint, ...], fill_value:ConstType, **kwargs):
                          return Tensor(fill_value, **kwargs).reshape((1, )*len(new_shape := argfix(shape))).expand(new_shape)                                                                           # tensor.py:459

                        class dtypes:                                                                                                                                                                    # dtype.py:38
                          @staticmethod                                                                                                                                                                  # dtype.py:46
                          def from_py(x) -> DType:
                            if x.__class__ is float: return dtypes.default_float                                                                                                                         # dtype.py:47

                        class Tensor:                                                                                                                                                                    # tensor.py:92
                          def expand(self, shape, *args) -> Tensor:                                                                                                                                      # tensor.py:802
                            return self._broadcast_to(tuple(from_ if to == -1 or to is None else to for from_, to in zip(*(_pad_left(self.shape, argfix(shape, *args))))))                               # tensor.py:814

                    class Tensor:                                                                                                                                                                        # tensor.py:92
                      @staticmethod                                                                                                                                                                      # tensor.py:462
                      def zeros(*shape, **kwargs):
                        return Tensor.full(argfix(*shape), 0.0, **kwargs)                                                                                                                                # tensor.py:476

                self.ln_2 = LayerNorm(dim, norm_eps)                                                                                                                                                     # test.py:69

              self.ln_f = LayerNorm(dim, norm_eps)                                                                                                                                                       # test.py:81

              self.lm_head = Linear(dim, vocab_size, bias=False)                                                                                                                                         # test.py:82

              self.forward_jit = TinyJit(self.forward)                                                                                                                                                   # test.py:83

                class TinyJit(Generic[ReturnType]):                                                                                                                                                      # engine/jit.py:186
                  def __init__(self, fxn:Optional[Callable[..., ReturnType]], captured:Optional[CapturedJit]=None):                                                                                      # engine/jit.py:187
                    assert fxn or captured, "need either a function or a CapturedJit"                                                                                                                    # engine/jit.py:188
                    self.fxn = fxn                                                                                                                                                                       # engine/jit.py:189
                    self.captured: Optional[CapturedJit] = captured                                                                                                                                      # engine/jit.py:190
                    self.cnt: int = 2 if self.fxn is None else 0                                                                                                                                         # engine/jit.py:191

        weights = torch_load(fetch(f'https://huggingface.co/{model_size}/resolve/main/pytorch_model.bin'))                                                                                               # test.py:135

          def fetch(url:str, name:Optional[Union[pathlib.Path, str]]=None, subdir:Optional[str]=None,                                                                                                    # helpers.py:258
                    allow_caching=not getenv("DISABLE_HTTP_CACHE")) -> pathlib.Path:
            if url.startswith(("/", ".")): return pathlib.Path(url)                                                                                                                                      # helpers.py:260
            if name is not None and (isinstance(name, pathlib.Path) or '/' in name): fp = pathlib.Path(name)                                                                                             # helpers.py:261
            else: fp = pathlib.Path(_cache_dir) / "tinygrad" / "downloads" / (subdir or "") / (name or hashlib.md5(url.encode('utf-8')).hexdigest())                                                     # helpers.py:262
            if not fp.is_file() or not allow_caching:                                                                                                                                                    # helpers.py:263
            return fp                                                                                                                                                                                    # helpers.py:275

          def torch_load(fn:str) -> Dict[str, Tensor]:                                                                                                                                                   # nn/state.py:134
            t = Tensor.empty(os.stat(fn).st_size, dtype=dtypes.uint8, device=f"disk:{fn}")                                                                                                               # nn/state.py:142

            class Tensor:                                                                                                                                                                                # tensor.py:92
              @staticmethod                                                                                                                                                                              # tensor.py:372
              def empty(*shape, **kwargs):
                return Tensor._metaop(MetaOps.EMPTY, argfix(*shape), **kwargs)                                                                                                                           # tensor.py:384

            offsets: Dict[Union[str, int], int] = {}                                                                                                                                                     # nn/state.py:144
            lens: Dict[Union[str, int], int] = {}                                                                                                                                                        # nn/state.py:145

            deserialized_objects: Dict[str, Any] = {}                                                                                                                                                    # nn/state.py:169
            intercept = {"HalfStorage": dtypes.float16, "FloatStorage": dtypes.float32, "BFloat16Storage": dtypes.bfloat16, "IntStorage": dtypes.int32,                                                  # nn/state.py:170
                         "LongStorage": dtypes.int64, "_rebuild_tensor_v2": _rebuild_tensor_v2, "FloatTensor": None, "Parameter": Parameter}
            whitelist = {"torch", "collections", "numpy", "_codecs"}  # NOTE: this is not for security, only speed                                                                                       # nn/state.py:172

            if zipfile.is_zipfile(fn):                                                                                                                                                                   # nn/state.py:183
            elif tarfile.is_tarfile(fn):                                                                                                                                                                 # nn/state.py:192
              with open(fn, "rb") as f:                                                                                                                                                                  # nn/state.py:208
                pkl = TorchPickle(f)                                                                                                                                                                     # nn/state.py:209
                _, _, _, rwd, _, ids, base_offset = pkl.load(), pkl.load(), pkl.load(), f.tell(), pkl.load(), pkl.load(), f.tell()                                                                       # nn/state.py:210

                    class TorchPickle(pickle.Unpickler):                                                                                                                                                 # nn/state.py:174
                  def torch_load(fn:str) -> Dict[str, Tensor]:                                                                                                                                           # nn/state.py:134
                      def find_class(self, module, name):                                                                                                                                                # nn/state.py:175
                        module_root = module.split(".")[0]                                                                                                                                               # nn/state.py:176
                        if module_root not in whitelist:                                                                                                                                                 # nn/state.py:177
                        return intercept[name] if module_root == "torch" else super().find_class(module, name)                                                                                           # nn/state.py:180

                    class TorchPickle(pickle.Unpickler):                                                                                                                                                 # nn/state.py:174
                  def torch_load(fn:str) -> Dict[str, Tensor]:                                                                                                                                           # nn/state.py:134
                      def persistent_load(self, pid): return deserialized_objects.get(pid, pid)                                                                                                          # nn/state.py:181

                  def torch_load(fn:str) -> Dict[str, Tensor]:                                                                                                                                           # nn/state.py:134
                    def _rebuild_tensor_v2(storage, storage_offset, size, stride, requires_grad=None, backward_hooks=None, metadata=None):                                                               # nn/state.py:146
                      lens[storage[2]] = storage[4] * storage[1].itemsize                                                                                                                                # nn/state.py:148
                      if storage[2] not in offsets: return None                                                                                                                                          # nn/state.py:149

                for i in ids:                                                                                                                                                                            # nn/state.py:211
                  offsets[i] = base_offset + 8                                                                                                                                                           # nn/state.py:212
                  base_offset += 8 + lens[i]                                                                                                                                                             # nn/state.py:213
                f.seek(rwd)                                                                                                                                                                              # nn/state.py:214
                return TorchPickle(f).load()                                                                                                                                                             # nn/state.py:215

                  def torch_load(fn:str) -> Dict[str, Tensor]:                                                                                                                                           # nn/state.py:134
                    def _rebuild_tensor_v2(storage, storage_offset, size, stride, requires_grad=None, backward_hooks=None, metadata=None):                                                               # nn/state.py:146
                      lens[storage[2]] = storage[4] * storage[1].itemsize                                                                                                                          # OLD # nn/state.py:148
                      if storage[2] not in offsets: return None                                                                                                                                    # OLD # nn/state.py:149
                      byte_offset = offsets[storage[2]]+storage_offset*storage[1].itemsize                                                                                                               # nn/state.py:150
                      ret = t[byte_offset:byte_offset+prod(size)*storage[1].itemsize].bitcast(storage[1])                                                                                                # nn/state.py:151

                    class Tensor:                                                                                                                                                                        # tensor.py:92
                      # Supported Indexing Implementations:                                                                                                                                              # tensor.py:926
                      #   1. Int indexing (no copy)
                      #     - for all dims where there's int, shrink -> reshape
                      #     - negative indices are taken relative to the end of the sequence, so X[-2] returns the 2nd-to-last element
                      #     - X = Tensor.rand(4,5,9); X[2,-2] shrinks the Tensor to X.shrink(((2, 3), (3, 4), (0, 9))) -> X.shape=(1,1,9)
                      #     - Then we reshape (collapse) the int dim away such that for X: (1,1,9) -> (9,)
                      #   2. Slice indexing (no copy)
                      #     - for all dims where slice is start:end:stride, shrink -> Optional[flip] -> pad -> reshape -> shrink
                      #     - first shrink the Tensor to X.shrink(((start, end),))
                      #     - then we apply stride through Optional[flip] -> pad -> reshape -> shrink
                      #       - flip where dim value is negative
                      #       - pad on dims to be multiple of strides, such that reshaping [dim_size_padded] -> [dim_size_padded // stride, stride] is possible
                      #       - shrink [dim_size_padded // stride, stride] -> [dim_size_padded // stride, 1]
                      #       - reshape [dim_size_padded // stride, 1] -> [dim_size_padded // stride] and now you have your stride
                      #   3. None indexing (no copy)
                      #     - reshape (inject) a dim at the dim where there's None
                      #   4. Tensor indexing (copy)
                      #     - use Tensor.arange == tensor_index to create masks for dims with Tensors (adds a dim for each mask)
                      #     - combine masks together with mul
                      #     - apply mask to self by mask * self
                      #     - sum reduce away the extra dims added from creating masks
                      # Tiny Things:
                      #   1. Supported indices: Union[int, slice, Tensor, None, List, Tuple, Ellipsis]
                      #     - for any list, List[Union[List, Tuple, int]], must have homogeneous shape
                      #     - for any tuple, Tuple[Union[List, Tuple, int]], must have homogeneous shape
                      #   2. Bool indexing is not supported
                      #   3. Out of bounds Tensor indexing results in 0
                      #     - e.g: Tensor([1, 2, 3])[Tensor([4, 3, 2])] -> [0, 0, 3] index 4 and 3 are out of bounds
                      def __getitem__(self, indices) -> Tensor:
                        if isinstance(indices, list) and all_int(indices): indices = [Tensor(indices, self.device, requires_grad=False)]                                                                 # tensor.py:929
                        elif isinstance(indices, (tuple, list)):                                                                                                                                         # tensor.py:930
                        else: indices = [indices]                                                                                                                                                        # tensor.py:932
                        indices = [self._to_const_val(i) if isinstance(i, Tensor) and i.shape == () else i for i in indices]                                                                             # tensor.py:935
                        indices = [i.to(self.device) if isinstance(i, Tensor) else i for i in indices]                                                                                                   # tensor.py:937
                        ellipsis_idx = [dim for dim, i in enumerate(indices) if i is Ellipsis]                                                                                                           # tensor.py:940
                        fill_idx = ellipsis_idx[0] if ellipsis_idx else len(indices)                                                                                                                     # tensor.py:941
                        num_indices = len(indices) - len(ellipsis_idx) - sum(1 for i in indices if i is None)                                                                                            # tensor.py:942
                        indices[fill_idx:fill_idx+1] = [slice(None)] * (self.ndim - num_indices)                                                                                                         # tensor.py:943

                        type_dim: DefaultDict[Union[type, None], List[int]] = defaultdict(list)                                                                                                          # tensor.py:946
                        type_dim[None] = [dim for dim, i in enumerate(indices) if i is None]                                                                                                             # tensor.py:949
                        tensor_dims = [dim for dim, i in enumerate(indices) if isinstance(i, Tensor)]                                                                                                    # tensor.py:950
                        indices_filtered = [i for i in indices if i is not None]                                                                                                                         # tensor.py:951
                        for dim,i in enumerate(indices_filtered): type_dim[type(i)].append(dim)                                                                                                          # tensor.py:952
                        if len(ellipsis_idx) > 1: raise IndexError("indices can only have a single ellipsis ('...')")                                                                                    # tensor.py:954
                        for index_type in type_dim:                                                                                                                                                      # tensor.py:955
                          if index_type not in [None, int, slice, Tensor]: raise IndexError(f"{index_type=} not supported")                                                                              # tensor.py:956
                        if num_indices > self.ndim: raise IndexError(f"too many {num_indices=} for {self.ndim=}")                                                                                        # tensor.py:957

                        for dim in type_dim[int]:                                                                                                                                                        # tensor.py:962
                        for dim in type_dim[slice]:                                                                                                                                                      # tensor.py:966
                          if (index := indices_filtered[dim]).step == 0: raise ValueError(f"{index=} on {dim=} cannot have 0 as step")                                                                   # tensor.py:967
                          s, e, st = index.indices(self.shape[dim])                                                                                                                                      # tensor.py:968

                          indices_filtered[dim] = ((0, 0) if (st * (e - s)) < 0 else (s, e) if st > 0 else (e+1, s+1), st)                                                                               # tensor.py:969
                        tensor_index: List[Tensor] = []                                                                                                                                                  # tensor.py:971
                        for dim in type_dim[Tensor]:                                                                                                                                                     # tensor.py:972
                        new_slice, strides = ((), ()) if not indices_filtered else zip(*indices_filtered)                                                                                                # tensor.py:977
                        ret = self.shrink(new_slice).flip(tuple(i for i, st in enumerate(strides) if st < 0))                                                                                            # tensor.py:979

                      class Tensor:                                                                                                                                                                      # tensor.py:92
                        def shrink(self, arg:Tuple[Optional[Tuple[sint, sint]], ...]) -> Tensor:                                                                                                         # tensor.py:854
                          if all(x is None or x == (0,s) for x,s in zip(arg, self.shape)): return self                                                                                                   # tensor.py:871

                          return F.Shrink.apply(self, arg=tuple(x if x is not None else (0,s) for x,s in zip(arg, self.shape)))                                                                          # tensor.py:872

                        class Shrink(Function):                                                                                                                                                          # function.py:208
                          def forward(self, x:LazyBuffer, arg:Tuple[Tuple[sint, sint], ...]) -> LazyBuffer:                                                                                              # function.py:209
                            self.narg = tuple([(p[0], s-p[1]) for s,p in zip(x.shape, arg)])                                                                                                             # function.py:210
                            return x.shrink(arg)                                                                                                                                                         # function.py:211

                              class LazyBuffer:                                                                                                                                                          # lazy.py:26
                                def shrink(self, arg:Tuple[Tuple[sint, sint], ...]): return self._view(self.st.shrink(arg))                                                                              # lazy.py:218

                                  @dataclass(frozen=True)                                                                                                                                                # shape/shapetracker.py:10
                                  class ShapeTracker:
                                    def shrink(self, arg: Tuple[Tuple[sint, sint], ...]) -> ShapeTracker: return ShapeTracker(self.views[0:-1] + (self.views[-1].shrink(arg), ))                         # shape/shapetracker.py:105

                                      @dataclass(frozen=True)                                                                                                                                            # shape/view.py:85
                                      class View:
                                        @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                 # shape/view.py:234
                                        def shrink(self, arg: Tuple[Tuple[sint, sint], ...]) -> View:
                                          assert all((0<=b<=e<=s) for s,(b,e) in zip(self.shape,arg)) and len(arg) == len(self.shape), f"invalid shrink {arg} for {self.shape}"                          # shape/view.py:235
                                          return self.__unsafe_resize(arg)                                                                                                                               # shape/view.py:236

                                            @dataclass(frozen=True)                                                                                                                                      # shape/view.py:85
                                            class View:
                                              def __unsafe_resize(self, arg: Tuple[Tuple[sint, sint], ...], mask=None) -> View:                                                                          # shape/view.py:213
                                                offset = sum([s * x[0] for s, x in zip(self.strides,arg)])                                                                                               # shape/view.py:214
                                                if self.mask:                                                                                                                                            # shape/view.py:215
                                                shape = [y-x for x,y in arg]                                                                                                                             # shape/view.py:220
                                                if mask is not None and all(m[0] == 0 and m[1] == s for m,s in zip(mask, shape)): mask = None                                                            # shape/view.py:221
                                                return View.create(tuple(s.b if isinstance(s, NumNode) else s for s in shape), self.strides, self.offset+offset, mask)                                   # shape/view.py:222

                      class Tensor:                                                                                                                                                                      # tensor.py:92
                        def flip(self, axis, *args) -> Tensor:                                                                                                                                           # tensor.py:834
                          axis_arg = tuple(self._resolve_dim(x) for x in argfix(axis, *args))                                                                                                            # tensor.py:850

                          if len(axis_arg) != len(dedup(axis_arg)): raise RuntimeError(f"dim can appear at least once, getting {axis_arg}")                                                              # tensor.py:851

                            def dedup(x:Iterable[T]): return list(dict.fromkeys(x))   # retains list order                                                                                               # helpers.py:19

                          return F.Flip.apply(self, axis=axis_arg)                                                                                                                                       # tensor.py:852

                        class Flip(Function):                                                                                                                                                            # function.py:215
                          def forward(self, x:LazyBuffer, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                                           # function.py:216
                            self.arg = tuple([-1 if i in axis else 1 for i in range(len(x.shape))])                                                                                                      # function.py:217
                            return x.stride(self.arg)                                                                                                                                                    # function.py:218

                              class LazyBuffer:                                                                                                                                                          # lazy.py:26
                                def stride(self, arg:Tuple[int, ...]): return self._view(self.st.stride(arg))                                                                                            # lazy.py:219

                                  @dataclass(frozen=True)                                                                                                                                                # shape/shapetracker.py:10
                                  class ShapeTracker:
                                    def stride(self, mul: Tuple[int, ...]) -> ShapeTracker: return ShapeTracker(self.views[0:-1] + (self.views[-1].stride(mul), ))                                       # shape/shapetracker.py:108

                                      @dataclass(frozen=True)                                                                                                                                            # shape/view.py:85
                                      class View:
                                        @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                 # shape/view.py:256
                                        def stride(self, mul: Tuple[int, ...]) -> View:
                                          assert all(isinstance(x, int) and x != 0 for x in mul), f"invalid stride {mul} for {self.shape}"                                                               # shape/view.py:258
                                          strides = tuple([z*m for z,m in zip(self.strides, mul)])                                                                                                       # shape/view.py:259
                                          new_shape = tuple([(s+(abs(m)-1))//abs(m) for s,m in zip(self.shape, mul)])                                                                                    # shape/view.py:260
                                          offset = sum([(s-1)*z for s,z,m in zip(self.shape, self.strides, mul) if m < 0])                                                                               # shape/view.py:261
                                          mask = tuple([(((mx if m > 0 else s-my)+(abs(m)-1))//abs(m), ((my if m > 0 else s-mx)+(abs(m)-1))//abs(m)) \                                                   # shape/view.py:262
                                                        for (mx,my),s,m in zip(self.mask, self.shape, mul)]) if self.mask is not None else None
                                          return View.create(new_shape, strides, self.offset + offset, mask)                                                                                             # shape/view.py:264

                        if any(abs(st) != 1 for st in strides):                                                                                                                                          # tensor.py:981
                        new_shape = list(ret.shape)                                                                                                                                                      # tensor.py:989

                        for dim in type_dim[None]: new_shape.insert(dim, 1)                                                                                                                              # tensor.py:990
                        for dim in (dims_collapsed := tuple(dim + sum(1 for d in type_dim[None] if dim >= d) for dim in reversed(type_dim[int]))): new_shape.pop(dim)                                    # tensor.py:991
                        ret = ret.reshape(new_shape)                                                                                                                                                     # tensor.py:993

                        if type_dim[Tensor]:                                                                                                                                                             # tensor.py:996
                        return ret                                                                                                                                                                       # tensor.py:1027

                    class Tensor:                                                                                                                                                                        # tensor.py:92
                      def bitcast(self, dtype:DTypeLike) -> Tensor:                                                                                                                                      # tensor.py:2984
                        if self.requires_grad: raise RuntimeError("can't backprop through bitcast")                                                                                                      # tensor.py:2999
                        return F.Cast.apply(self, dtype=dt, bitcast=True) if self.dtype != (dt:=to_dtype(dtype)) else self                                                                               # tensor.py:3000

                      class Cast(Function):                                                                                                                                                              # function.py:19
                        def forward(self, x:LazyBuffer, dtype:DType, bitcast:bool=False) -> LazyBuffer:                                                                                                  # function.py:20
                          self.input_dtype, self.bitcast = x.dtype, bitcast                                                                                                                              # function.py:21
                          return x.cast(dtype, bitcast)                                                                                                                                                  # function.py:22

                            class LazyBuffer:                                                                                                                                                            # lazy.py:26
                              def cast(self, dtype:DType, bitcast:bool=False, allow_buffer_view=True) -> LazyBuffer:                                                                                     # lazy.py:95
                                if self.dtype == dtype: return self                                                                                                                                      # lazy.py:96
                                if self.device.startswith("DISK") and not bitcast: raise RuntimeError("attempted to cast disk buffer (bitcast only)")                                                    # lazy.py:97
                                if self.is_unrealized_unmasked_const() and not bitcast:                                                                                                                  # lazy.py:98

                                new_shape = self.shape                                                                                                                                                   # lazy.py:100
                                if bitcast and self.dtype.itemsize != dtype.itemsize:                                                                                                                    # lazy.py:101
                                  if not self.device.startswith("DISK"): raise RuntimeError("shape changing bitcast only supported on DISK right now")                                                   # lazy.py:102
                                  if not all_int(new_shape): raise RuntimeError("shape changing bitcast with symbolic shape isn't supported yet")                                                        # lazy.py:103

                                  if not (new_shape[-1]*self.dtype.itemsize) % dtype.itemsize == 0: raise RuntimeError("unsupported size in bitcast")                                                    # lazy.py:105
                                  new_shape = new_shape[:-1] + ((new_shape[-1]*self.dtype.itemsize) // dtype.itemsize,)                                                                                  # lazy.py:106
                                cast_op: Union[MetaOps, UnaryOps] = (MetaOps.VIEW if self.can_view() and allow_buffer_view else UnaryOps.BITCAST) if bitcast else UnaryOps.CAST                          # lazy.py:110

                                  class LazyBuffer:                                                                                                                                                      # lazy.py:26
                                    def can_view(self): return self.st.consecutive and not self.is_unrealized_const() and self.device.split(":")[0] in view_supported_devices                            # lazy.py:85

                                      @dataclass(frozen=True)                                                                                                                                            # shape/shapetracker.py:10
                                      class ShapeTracker:
                                        @property                                                                                                                                                        # shape/shapetracker.py:32
                                        def consecutive(self) -> bool: return len(self.views) == 1 and (v:=self.views[0]).mask is None and v.strides == strides_for_shape(v.shape)

                                return create_lazybuffer(self.device, ShapeTracker.from_shape(new_shape), dtype, cast_op, dtype, (self,))                                                                # lazy.py:111

                              class LazyBuffer:                                                                                                                                                          # lazy.py:26
                                def __init__(self, device:str, st:ShapeTracker, dtype:DTypeLike,                                                                                                         # lazy.py:27
                                             op:Optional[Op]=None, arg:Any=None, srcs:Tuple[LazyBuffer, ...]=(),
                                             base:Optional[LazyBuffer]=None, metadata:Optional[Metadata]=None):
                                  self.device, self.st, self.dtype, self.shape, self.size, self.metadata = device, st, to_dtype(dtype), st.shape, st.size, metadata                                # OLD # lazy.py:30
                                  self._base: Optional[LazyBuffer] = None                                                                                                                          # OLD # lazy.py:31
                                  if base is None:                                                                                                                                                 # OLD # lazy.py:32
                                    self.op, self.arg, self.srcs = op, arg, srcs  # this is a LazyOp, except the src is LazyBuffers and not LazyOps                                                # OLD # lazy.py:34
                                    assert self.op is not MetaOps.ASSIGN or srcs[1].base.realized is not None, "assign target must be realized"                                                    # OLD # lazy.py:35
                                    if self.op is MetaOps.VIEW:                                                                                                                                    # OLD # lazy.py:37
                                      self.buffer: Buffer = srcs[0].base.buffer.view(st.size, self.dtype, srcs[0].st.views[0].offset * srcs[0].dtype.itemsize)                                           # lazy.py:39

                                        class Buffer:                                                                                                                                                    # device.py:53
                                          def view(self, size:int, dtype:DType, offset:int) -> Buffer:                                                                                                   # device.py:127
                                            assert offset < self.nbytes, "offset must be less than nbytes"                                                                                               # device.py:128

                                            if self._base is not None: return Buffer(self.device, size, dtype, base=self._base, offset=self.offset+offset)                                               # device.py:129
                                            return Buffer(self.device, size, dtype, base=self, offset=offset)                                                                                            # device.py:130

                                              class Buffer:                                                                                                                                              # device.py:53
                                                def __init__(self, device:str, size:int, dtype:DType, opaque:Any=None, options:Optional[BufferOptions]=None,                                             # device.py:54
                                                             initial_value:Optional[bytes]=None, lb_refcount=0, base:Optional[Buffer]=None, offset:int=0, preallocate=False):
                                                  assert isinstance(dtype, DType)                                                                                                                  # OLD # device.py:56
                                                  if isinstance(dtype, ImageDType): options = BufferOptions(image=dtype) # TODO: image hack shouldn't be here. where should it be?                 # OLD # device.py:57
                                                  self.device, self.size, self.dtype, self.options, self.offset = device, size, dtype, options, offset                                             # OLD # device.py:58
                                                  if base is None:                                                                                                                                 # OLD # device.py:59
                                                    assert offset == 0, "base buffers can't have offset"                                                                                           # OLD # device.py:60
                                                    self._base = None                                                                                                                              # OLD # device.py:61
                                                    self._lb_refcount = lb_refcount                                                                                                                # OLD # device.py:62
                                                    if opaque is not None: self.allocate(opaque)                                                                                                   # OLD # device.py:63
                                                    if initial_value is not None:                                                                                                                  # OLD # device.py:64
                                                    assert base._base is None, "base can't have a base"                                                                                                  # device.py:68
                                                    assert device == base.device, "base must have the same device"                                                                                       # device.py:69
                                                    self._base = base                                                                                                                                    # device.py:70

                      shape_strides = [(s, st) for s,st in zip(size, stride) if s != 1]                                                                                                                  # nn/state.py:154
                      permute_indexes = [len(shape_strides)-1-y for y in argsort([x[1] for x in shape_strides])]                                                                                         # nn/state.py:155

                        def argsort(x): return type(x)(sorted(range(len(x)), key=x.__getitem__)) # https://stackoverflow.com/questions/3382352/equivalent-of-numpy-argsort-in-basic-python               # helpers.py:25

                      if tuple(permute_indexes) != tuple(range(len(permute_indexes))):                                                                                                                   # nn/state.py:156
                      return ret.reshape(size)                                                                                                                                                           # nn/state.py:164

        transposed = ('attn.c_attn.weight', 'attn.c_proj.weight', 'mlp.c_fc.weight', 'mlp.c_proj.weight')                                                                                                # test.py:137
        for k in weights:                                                                                                                                                                                # test.py:138
          if k.endswith(transposed):                                                                                                                                                                     # test.py:139
            weights[k] = weights[k].T                                                                                                                                                                    # test.py:140

              class Tensor:                                                                                                                                                                              # tensor.py:92
                @property                                                                                                                                                                                # tensor.py:1247
                def T(self) -> Tensor:
                  return self.transpose()                                                                                                                                                                # tensor.py:1249

                class Tensor:                                                                                                                                                                            # tensor.py:92
                  def transpose(self, dim0=1, dim1=0) -> Tensor:                                                                                                                                         # tensor.py:1251
                    order = list(range(self.ndim))                                                                                                                                                       # tensor.py:1264

                    order[dim0], order[dim1] = order[dim1], order[dim0]                                                                                                                                  # tensor.py:1265
                    return self.permute(order)                                                                                                                                                           # tensor.py:1266

                  class Tensor:                                                                                                                                                                          # tensor.py:92
                    def permute(self, order, *args) -> Tensor:                                                                                                                                           # tensor.py:816
                      order_arg = tuple(self._resolve_dim(x) for x in argfix(order, *args))                                                                                                              # tensor.py:830

                    class Tensor:                                                                                                                                                                        # tensor.py:92
                      def _resolve_dim(self, dim:int, *, outer:bool=False) -> int:                                                                                                                       # tensor.py:1141
                        if not -max(1, self.ndim+outer) <= dim < max(1, self.ndim+outer):                                                                                                                # tensor.py:1142

                        return dim + self.ndim+outer if dim < 0 else dim                                                                                                                                 # tensor.py:1144

                      if sorted(order_arg) != list(range(self.ndim)): raise RuntimeError(f"order is not a valid permutation, getting {order_arg}")                                                       # tensor.py:831

                      return F.Permute.apply(self, order=order_arg)                                                                                                                                      # tensor.py:832

                    class Permute(Function):                                                                                                                                                             # function.py:194
                      def forward(self, x:LazyBuffer, order:Tuple[int, ...]) -> LazyBuffer:                                                                                                              # function.py:195
                        self.input_order = order                                                                                                                                                         # function.py:196
                        return x.permute(order)                                                                                                                                                          # function.py:197

                          class LazyBuffer:                                                                                                                                                              # lazy.py:26
                            def permute(self, arg:Tuple[int, ...]): return self._view(self.st.permute(arg))                                                                                              # lazy.py:217

                              @dataclass(frozen=True)                                                                                                                                                    # shape/shapetracker.py:10
                              class ShapeTracker:
                                def permute(self, axis: Tuple[int, ...]) -> ShapeTracker: return ShapeTracker(self.views[0:-1] + (self.views[-1].permute(axis), ))                                       # shape/shapetracker.py:107

                                  @dataclass(frozen=True)                                                                                                                                                # shape/view.py:85
                                  class View:
                                    @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                     # shape/view.py:250
                                    def permute(self, axis: Tuple[int, ...]) -> View:
                                      assert sorted(axis) == list(range(len(self.shape))), f"invalid permutation {axis} of len {len(self.shape)}"                                                        # shape/view.py:251
                                      return View.create(tuple(self.shape[a] for a in axis), tuple(self.strides[a] for a in axis), self.offset,                                                          # shape/view.py:252
                                                         tuple(self.mask[a] for a in axis) if self.mask is not None else None)

        weights['lm_head.weight'] = weights['wte.weight']                                                                                                                                                # test.py:142
        load_state_dict(model, weights)                                                                                                                                                                  # test.py:144

          def load_state_dict(model, state_dict:Dict[str, Tensor], strict=True, verbose=True, consume=False) -> None:                                                                                    # nn/state.py:101
            start_mem_used = GlobalCounters.mem_used                                                                                                                                                     # nn/state.py:116
            with Timing("loaded weights in ", lambda et_ns: f", {(GlobalCounters.mem_used-start_mem_used)/1e9:.2f} GB loaded at {(GlobalCounters.mem_used-start_mem_used)/et_ns:.2f} GB/s"):  # noqa: E501 # nn/state.py:117

              class Timing(contextlib.ContextDecorator):                                                                                                                                                 # helpers.py:136
                def __init__(self, prefix="", on_exit=None, enabled=True): self.prefix, self.on_exit, self.enabled = prefix, on_exit, enabled                                                            # helpers.py:137

              class Timing(contextlib.ContextDecorator):                                                                                                                                                 # helpers.py:136
                def __enter__(self): self.st = time.perf_counter_ns()                                                                                                                                    # helpers.py:138

              model_state_dict = get_state_dict(model)                                                                                                                                                   # nn/state.py:118

                def get_state_dict(obj, prefix:str='', tensor_type=Tensor) -> Dict[str, Tensor]:                                                                                                         # nn/state.py:63
                  if isinstance(obj, tensor_type): return {prefix.strip('.'):obj}                                                                                                                        # nn/state.py:77
                  if hasattr(obj, '_asdict'): return get_state_dict(obj._asdict(), prefix, tensor_type)  # namedtuple                                                                                    # nn/state.py:78
                  if isinstance(obj, OrderedDict): return get_state_dict(dict(obj), prefix, tensor_type)                                                                                                 # nn/state.py:79
                  if hasattr(obj, '__dict__'): return get_state_dict(obj.__dict__, prefix, tensor_type)                                                                                                  # nn/state.py:80

                    def get_state_dict(obj, prefix:str='', tensor_type=Tensor) -> Dict[str, Tensor]:                                                                                                     # nn/state.py:63
                      if isinstance(obj, tensor_type): return {prefix.strip('.'):obj}                                                                                                              # OLD # nn/state.py:77
                      if hasattr(obj, '_asdict'): return get_state_dict(obj._asdict(), prefix, tensor_type)  # namedtuple                                                                          # OLD # nn/state.py:78
                      if isinstance(obj, OrderedDict): return get_state_dict(dict(obj), prefix, tensor_type)                                                                                       # OLD # nn/state.py:79
                      if hasattr(obj, '__dict__'): return get_state_dict(obj.__dict__, prefix, tensor_type)                                                                                        # OLD # nn/state.py:80
                      state_dict = {}                                                                                                                                                                    # nn/state.py:81
                      if isinstance(obj, (list, tuple)):                                                                                                                                                 # nn/state.py:82
                      elif isinstance(obj, dict):                                                                                                                                                        # nn/state.py:84
                        for k,v in obj.items(): state_dict.update(get_state_dict(v, f"{prefix}{str(k)}.", tensor_type))                                                                                  # nn/state.py:85

                          def get_state_dict(obj, prefix:str='', tensor_type=Tensor) -> Dict[str, Tensor]:                                                                                               # nn/state.py:63
                            if isinstance(obj, tensor_type): return {prefix.strip('.'):obj}                                                                                                        # OLD # nn/state.py:77
                            if hasattr(obj, '_asdict'): return get_state_dict(obj._asdict(), prefix, tensor_type)  # namedtuple                                                                    # OLD # nn/state.py:78
                            if isinstance(obj, OrderedDict): return get_state_dict(dict(obj), prefix, tensor_type)                                                                                 # OLD # nn/state.py:79
                            if hasattr(obj, '__dict__'): return get_state_dict(obj.__dict__, prefix, tensor_type)                                                                                  # OLD # nn/state.py:80
                            state_dict = {}                                                                                                                                                        # OLD # nn/state.py:81
                            if isinstance(obj, (list, tuple)):                                                                                                                                     # OLD # nn/state.py:82
                            elif isinstance(obj, dict):                                                                                                                                            # OLD # nn/state.py:84
                              for k,v in obj.items(): state_dict.update(get_state_dict(v, f"{prefix}{str(k)}.", tensor_type))                                                                      # OLD # nn/state.py:85
                            return state_dict                                                                                                                                                            # nn/state.py:86

                          def get_state_dict(obj, prefix:str='', tensor_type=Tensor) -> Dict[str, Tensor]:                                                                                               # nn/state.py:63
                            if isinstance(obj, tensor_type): return {prefix.strip('.'):obj}                                                                                                        # OLD # nn/state.py:77
                            if hasattr(obj, '_asdict'): return get_state_dict(obj._asdict(), prefix, tensor_type)  # namedtuple                                                                    # OLD # nn/state.py:78
                            if isinstance(obj, OrderedDict): return get_state_dict(dict(obj), prefix, tensor_type)                                                                                 # OLD # nn/state.py:79
                            if hasattr(obj, '__dict__'): return get_state_dict(obj.__dict__, prefix, tensor_type)                                                                                  # OLD # nn/state.py:80
                            state_dict = {}                                                                                                                                                        # OLD # nn/state.py:81
                            if isinstance(obj, (list, tuple)):                                                                                                                                     # OLD # nn/state.py:82
                              for i,x in enumerate(obj): state_dict.update(get_state_dict(x, f"{prefix}{str(i)}.", tensor_type))                                                                         # nn/state.py:83

              if DEBUG >= 1 and len(state_dict) > len(model_state_dict):                                                                                                                                 # nn/state.py:119

              for k,v in (t := tqdm(model_state_dict.items(), disable=CI or not verbose)):                                                                                                               # nn/state.py:121

                class tqdm:                                                                                                                                                                              # helpers.py:307
                  def __init__(self, iterable=None, desc:str='', disable:bool=False, unit:str='it', unit_scale=False, total:Optional[int]=None, rate:int=100):                                           # helpers.py:308
                    self.iter, self.desc, self.dis, self.unit, self.unit_scale, self.rate = iterable, f"{desc}: " if desc else "", disable, unit, unit_scale, rate                                       # helpers.py:309
                    self.st, self.i, self.n, self.skip, self.t = time.perf_counter(), -1, 0, 1, getattr(iterable, "__len__", lambda:0)() if total is None else total                                     # helpers.py:310
                    self.update(0)                                                                                                                                                                       # helpers.py:311

                      class tqdm:                                                                                                                                                                        # helpers.py:307
                        def update(self, n:int=0, close:bool=False):                                                                                                                                     # helpers.py:318
                          self.n, self.i = self.n+n, self.i+1                                                                                                                                            # helpers.py:319
                          if self.dis or (not close and self.i % self.skip != 0): return                                                                                                                 # helpers.py:320
                          prog, dur, ncols = self.n/self.t if self.t else 0, time.perf_counter()-self.st, shutil.get_terminal_size().columns                                                             # helpers.py:321
                          if self.i/dur > self.rate and self.i: self.skip = max(int(self.i/dur)//self.rate,1)                                                                                            # helpers.py:322
                          unit_text = f'{fn(self.n)}{f"/{fn(self.t)}" if self.t else self.unit}' if self.unit_scale else f'{self.n}{f"/{self.t}" if self.t else self.unit}'                              # helpers.py:325
                          it_text = (fn(self.n/dur) if self.unit_scale else f"{self.n/dur:5.2f}") if self.n else "?"                                                                                     # helpers.py:326
                          tm = f'{fmt(dur)}<{fmt(dur/prog-dur) if self.n else "?"}' if self.t else fmt(dur)                                                                                              # helpers.py:327

                              def update(self, n:int=0, close:bool=False):                                                                                                                               # helpers.py:318
                            class tqdm:                                                                                                                                                                  # helpers.py:307
                                def fmt(t): return ':'.join(f'{x:02d}' if i else str(x) for i,x in enumerate([int(t)//3600,int(t)%3600//60,int(t)%60]) if i or x)                                        # helpers.py:323

                          suf = f'{unit_text} [{tm}, {it_text}{self.unit}/s]'                                                                                                                            # helpers.py:328
                          sz = max(ncols-len(self.desc)-5-2-len(suf), 1)                                                                                                                                 # helpers.py:329
                          bar = '\r' + self.desc + (f'{100*prog:3.0f}%|{("█"*int(num:=sz*prog)+" ▏▎▍▌▋▊▉"[int(8*num)%8].strip()).ljust(sz," ")}| ' if self.t else '') + suf                              # helpers.py:330
                          print(bar[:ncols+1],flush=True,end='\n'*close,file=sys.stderr)                                                                                                                 # helpers.py:331

                class tqdm:                                                                                                                                                                              # helpers.py:307
                  def __iter__(self):                                                                                                                                                                    # helpers.py:312
                    for item in self.iter:                                                                                                                                                               # helpers.py:313
                      yield item                                                                                                                                                                         # helpers.py:314

                t.desc = f"ram used: {GlobalCounters.mem_used/1e9:5.2f} GB, {k:50s}: "                                                                                                                   # nn/state.py:122
                if k not in state_dict and not strict:                                                                                                                                                   # nn/state.py:123
                if isinstance((mlb:=v.lazydata), MultiLazyBuffer):                                                                                                                                       # nn/state.py:126
                else: v.replace(state_dict[k].to(v.device)).realize()                                                                                                                                    # nn/state.py:129

            class Tensor:                                                                                                                                                                                # tensor.py:92
              def to(self, device:Optional[Union[str, Tuple[str, ...]]]) -> Tensor:                                                                                                                      # tensor.py:303
                device = tuple(Device.canonicalize(x) for x in device) if isinstance(device, (tuple, list)) else Device.canonicalize(device)                                                             # tensor.py:307

                if device == self.device: return self                                                                                                                                                    # tensor.py:308

                if not isinstance(device, str): return self.shard(device)                                                                                                                                # tensor.py:309
                ret = Tensor(self.lazydata, device, requires_grad=self.requires_grad)                                                                                                                    # tensor.py:310

                if self.grad is not None: ret.grad = self.grad.to(device)                                                                                                                                # tensor.py:311
                if hasattr(self, '_ctx'): ret._ctx = self._ctx                                                                                                                                           # tensor.py:312
                return ret                                                                                                                                                                               # tensor.py:313

            class Tensor:                                                                                                                                                                                # tensor.py:92
              def replace(self, x:Tensor) -> Tensor:                                                                                                                                                     # tensor.py:207
                assert not x.requires_grad and getattr(self, '_ctx', None) is None                                                                                                                       # tensor.py:212
                assert self.shape == x.shape, f"replace shape mismatch {self.shape} != {x.shape}"                                                                                                        # tensor.py:213

                self.lazydata = x.lazydata                                                                                                                                                               # tensor.py:214
                return self                                                                                                                                                                              # tensor.py:215

            class Tensor:                                                                                                                                                                                # tensor.py:92
              def realize(self, *lst:Tensor, do_update_stats=True) -> Tensor:                                                                                                                            # tensor.py:202
                run_schedule(*self.schedule_with_vars(*lst), do_update_stats=do_update_stats)                                                                                                            # tensor.py:204

              class Tensor:                                                                                                                                                                              # tensor.py:92
                def schedule_with_vars(self, *lst:Tensor, seen:Optional[Set[LazyBuffer]]=None) -> Tuple[List[ScheduleItem], Dict[Variable, int]]:                                                        # tensor.py:188
                  if getenv("FUZZ_SCHEDULE"):                                                                                                                                                            # tensor.py:190

                  schedule, var_vals = create_schedule_with_vars(flatten([x.lazydata.lbs for x in (self,)+lst]), seen)                                                                                   # tensor.py:193

                class LazyBuffer:                                                                                                                                                                        # lazy.py:26
                  # same API as multi                                                                                                                                                                    # lazy.py:67
                  @property
                  def lbs(self) -> List[LazyBuffer]: return [self]

                    def flatten(l:Iterable[Iterable[T]]): return [item for sublist in l for item in sublist]                                                                                             # helpers.py:33

                    def create_schedule_with_vars(outs:List[LazyBuffer], seen:Optional[Set[LazyBuffer]]=None) -> Tuple[List[ScheduleItem], Dict[Variable, int]]:                                         # engine/schedule.py:359
                      if seen is None: seen = set()                                                                                                                                                      # engine/schedule.py:360
                      graph, in_degree, prescheduled = _graph_schedule(outs, seen)                                                                                                                       # engine/schedule.py:361

                        def _graph_schedule(outs:List[LazyBuffer], seen:Set[LazyBuffer]):                                                                                                                # engine/schedule.py:238
                          realizes: Dict[LazyBuffer, None] = {x.base:None for x in outs if x.base.realized is None}                                                                                      # engine/schedule.py:241

                          allbufs: Dict[LazyBuffer, None] = {}                                                                                                                                           # engine/schedule.py:242
                          simple_pads: Dict[LazyBuffer, None] = {}                                                                                                                                       # engine/schedule.py:243
                          children: DefaultDict[LazyBuffer, Dict[LazyBuffer, None]] = defaultdict(dict)                                                                                                  # engine/schedule.py:244
                          assign_targets: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                                              # engine/schedule.py:245
                          double_reduces: Dict[LazyBuffer, None] = {}                                                                                                                                    # engine/schedule.py:246
                          for out in outs: _recurse_lb(out.base, realizes, allbufs, simple_pads, children, assign_targets, double_reduces, scheduled=True)                                               # engine/schedule.py:247

                            def _recurse_lb(buf:LazyBuffer, realizes:Dict[LazyBuffer, None], allbufs:Dict[LazyBuffer, None], simple_pads:Dict[LazyBuffer, None],\                                        # engine/schedule.py:165
                                children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]], assign_targets:Dict[LazyBuffer, LazyBuffer],\
                                double_reduces:Dict[LazyBuffer, None], scheduled=False):
                              if buf in allbufs or buf.base.realized is not None: return                                                                                                                 # engine/schedule.py:169

                              if GRAPH: log_lazybuffer(buf, scheduled)                                                                                                                                   # engine/schedule.py:170

                              if buf is not buf.base:                                                                                                                                                    # engine/schedule.py:172

                              if buf.op in ReduceOps and buf.srcs[0].base.op is buf.op and buf.srcs[0] is not buf.srcs[0].base: double_reduces[buf] = None                                               # engine/schedule.py:186
                              allbufs[buf] = None                                                                                                                                                        # engine/schedule.py:187
                              if buf.forced_realize or buf.op in MetaOps: realizes[buf] = None                                                                                                           # engine/schedule.py:188
                              if buf.op is MetaOps.ASSIGN:                                                                                                                                               # engine/schedule.py:189
                              if buf.op is MetaOps.COPY:                                                                                                                                                 # engine/schedule.py:193
                                assert buf.srcs[0].st.contiguous and buf.srcs[0].size == buf.srcs[0].base.size, "can only copy contig"                                                                   # engine/schedule.py:194

                                realizes[buf.srcs[0].base] = None                                                                                                                                        # engine/schedule.py:195

                              if buf.op is MetaOps.VIEW: realizes[buf.srcs[0].base] = None                                                                                                               # engine/schedule.py:196
                              for x in buf.srcs:                                                                                                                                                         # engine/schedule.py:197
                                if x.base.realized is None: children[x.base][buf] = None                                                                                                                 # engine/schedule.py:198

                                _recurse_lb(x, realizes, allbufs, simple_pads, children, assign_targets, double_reduces)                                                                                 # engine/schedule.py:199

                              def _recurse_lb(buf:LazyBuffer, realizes:Dict[LazyBuffer, None], allbufs:Dict[LazyBuffer, None], simple_pads:Dict[LazyBuffer, None],\                                      # engine/schedule.py:165
                                  children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]], assign_targets:Dict[LazyBuffer, LazyBuffer],\
                                  double_reduces:Dict[LazyBuffer, None], scheduled=False):
                                if buf in allbufs or buf.base.realized is not None: return                                                                                                         # OLD # engine/schedule.py:169
                                if GRAPH: log_lazybuffer(buf, scheduled)                                                                                                                           # OLD # engine/schedule.py:170
                                if buf is not buf.base:                                                                                                                                            # OLD # engine/schedule.py:172
                                  if len(buf.st.views) == 1 and buf.st.views[-1].mask is not None and all_int(buf.base.st.shape) and \                                                                   # engine/schedule.py:174
                                      prod(buf.base.st.shape) >= prod([y-x for x,y in buf.st.views[-1].mask]):
                                  elif prod(buf.base.st.shape) < prod(buf.st.shape):                                                                                                                     # engine/schedule.py:178

                                  elif any(v.mask is not None for v in buf.st.views): simple_pads[buf.base] = None                                                                                       # engine/schedule.py:184
                                  return _recurse_lb(buf.base, realizes, allbufs, simple_pads, children, assign_targets, double_reduces)                                                                 # engine/schedule.py:185

                          for p in simple_pads:                                                                                                                                                          # engine/schedule.py:250
                          reduce_for_op: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                                               # engine/schedule.py:255
                          reduce_of_const: List[LazyBuffer] = []                                                                                                                                         # engine/schedule.py:256
                          for r in allbufs:                                                                                                                                                              # engine/schedule.py:257
                            if r.op not in ReduceOps or r in realizes: continue                                                                                                                          # engine/schedule.py:258
                          if FUSE_CONV_BW:                                                                                                                                                               # engine/schedule.py:298

                          for r in reduce_of_const:                                                                                                                                                      # engine/schedule.py:303
                          output_groups: DefaultDict[LazyBuffer, List[LazyBuffer]] = defaultdict(list)                                                                                                   # engine/schedule.py:312
                          for buf in realizes:                                                                                                                                                           # engine/schedule.py:313
                            if buf.realized is not None or buf.op is MetaOps.CONST or buf in seen: continue                                                                                              # engine/schedule.py:314

                            output_groups[reduce_for_op[buf] if buf in reduce_for_op and MULTIOUTPUT else buf].append(buf)                                                                               # engine/schedule.py:315
                            if isinstance(buf.dtype, ImageDType) and (prod(buf.shape) != prod(buf.dtype.shape) or                                                                                        # engine/schedule.py:318
                                                                      not any(buf.shape[x]%4 == 0 for x in buf.st.unit_stride_axes())):

                          prescheduled = {group[0]:(group, *_lower_lazybuffer(group, realizes)) for group in output_groups.values()}                                                                     # engine/schedule.py:329

                          def _lower_lazybuffer(outs:List[LazyBuffer], realizes:Dict[LazyBuffer, None]):                                                                                                 # engine/schedule.py:128
                            if (out:=outs[0]).op is MetaOps.COPY and getenv("USE_COPY_KERNEL") and out.device.split(":")[0] == out.srcs[0].device.split(":")[0]:                                         # engine/schedule.py:130

                            if out.op in {MetaOps.CUSTOM, MetaOps.COPY, MetaOps.EMPTY, MetaOps.VIEW}: return LazyOp(out.op, (), out.arg), [x.base for x in out.srcs], {}, []                             # engine/schedule.py:133

                          schedule_targets = {out:ps for ps in prescheduled.values() for out in ps[0]}                                                                                                   # engine/schedule.py:330
                          graph: DefaultDict[LazyBuffer, List[LazyBuffer]] = defaultdict(list)                                                                                                           # engine/schedule.py:332
                          in_degree: DefaultDict[LazyBuffer, int] = defaultdict(int)                                                                                                                     # engine/schedule.py:333
                          for key, lsi in prescheduled.items():                                                                                                                                          # engine/schedule.py:334
                            if key not in in_degree: in_degree[key] = 0                                                                                                                                  # engine/schedule.py:335
                            scheduled_parents = set(schedule_targets[x][0][0] for x in lsi[2] if x in schedule_targets)                                                                                  # engine/schedule.py:337
                            for x in scheduled_parents:                                                                                                                                                  # engine/schedule.py:338
                              graph[x].append(key)                                                                                                                                                       # engine/schedule.py:339
                              in_degree[key] += 1                                                                                                                                                        # engine/schedule.py:340
                            parents_assigns = set(schedule_targets[assign_targets[x]][0][0] for x in lsi[2] if x in assign_targets)                                                                      # engine/schedule.py:342
                            for assign in parents_assigns:                                                                                                                                               # engine/schedule.py:343
                          if SAVE_SCHEDULE:                                                                                                                                                              # engine/schedule.py:347

                          return graph, in_degree, prescheduled                                                                                                                                          # engine/schedule.py:354

                      queue = deque(si for key, si in prescheduled.items() if in_degree[key] == 0)                                                                                                       # engine/schedule.py:362
                      schedule: List[ScheduleItem] = []                                                                                                                                                  # engine/schedule.py:363
                      var_vals: Dict[Variable, int] = {}                                                                                                                                                 # engine/schedule.py:364
                      kernel_number = GlobalCounters.kernel_count                                                                                                                                        # engine/schedule.py:365
                      while queue:                                                                                                                                                                       # engine/schedule.py:366
                        ps = queue.popleft()                                                                                                                                                             # engine/schedule.py:367
                        for buf in ps[0]: seen.add(buf)                                                                                                                                                  # engine/schedule.py:368
                        if GRAPH:                                                                                                                                                                        # engine/schedule.py:369

                        var_vals = merge_dicts([var_vals, ps[3]])                                                                                                                                        # engine/schedule.py:372

                          def merge_dicts(ds:Iterable[Dict[T,U]]) -> Dict[T,U]:                                                                                                                          # helpers.py:40
                            assert len(kvs:=set([(k,v) for d in ds for k,v in d.items()])) == len(set(kv[0] for kv in kvs)), f"cannot merge, {kvs} contains different values for the same key"  # noqa: E501 # helpers.py:41
                            return {k:v for d in ds for k,v in d.items()}                                                                                                                                # helpers.py:42

                        for out in ps[0]: del out.srcs  # can only schedule once                                                                                                                         # engine/schedule.py:373
                        schedule.append(si:=ScheduleItem(ps[1], tuple(x.buffer for x in ps[0]+ps[2] if x.size != 0), ps[4]))                                                                             # engine/schedule.py:374
                        if logops and si.ast.op is MetaOps.KERNEL and not any(i.device.startswith("DISK:") for i in si.inputs): logops.write(str(si.ast)+"\n")                                           # engine/schedule.py:375
                        for x in graph[ps[0][0]]:                                                                                                                                                        # engine/schedule.py:376
                          in_degree[x] -= 1                                                                                                                                                              # engine/schedule.py:377
                          if in_degree[x] == 0: queue.append(prescheduled[x])                                                                                                                            # engine/schedule.py:378

                      if any(degree != 0 for degree in in_degree.values()) or len(prescheduled) != len(schedule):                                                                                        # engine/schedule.py:381
                      if DEBUG >= 1 and len(schedule) >= 10: print(f"scheduled {len(schedule)} kernels")                                                                                                 # engine/schedule.py:383

                      return schedule, var_vals                                                                                                                                                          # engine/schedule.py:384

                  return memory_planner(schedule), var_vals                                                                                                                                              # tensor.py:194

                    def memory_planner(schedule:List[ScheduleItem]) -> List[ScheduleItem]:                                                                                                               # engine/schedule.py:430
                      assigned = _internal_memory_planner([si.bufs for si in schedule],                                                                                                                  # engine/schedule.py:432
                                                          noopt_buffers={b for si in schedule if si.ast.op is not MetaOps.KERNEL for b in si.bufs})

                        def _internal_memory_planner(buffers:List[Union[List[Buffer], Tuple[Buffer, ...]]], noopt_buffers=None, debug_prefix="") -> Dict[Buffer, Buffer]:                                # engine/schedule.py:393
                          if getenv("NO_MEMORY_PLANNER"): return {}                                                                                                                                      # engine/schedule.py:394

                          first_appearance, last_appearance = {}, {}                                                                                                                                     # engine/schedule.py:395
                          for i,u in enumerate(buffers):                                                                                                                                                 # engine/schedule.py:396
                            for buf in u:                                                                                                                                                                # engine/schedule.py:397
                              if buf.is_allocated() or buf.lb_refcount > 0 or (noopt_buffers is not None and buf.base in noopt_buffers): continue                                                        # engine/schedule.py:398

                                class Buffer:                                                                                                                                                            # device.py:53
                                  def is_allocated(self) -> bool: return hasattr(self, '_buf')                                                                                                           # device.py:77

                                class Buffer:                                                                                                                                                            # device.py:53
                                  @property                                                                                                                                                              # device.py:75
                                  def lb_refcount(self): return self.base._lb_refcount

                          free_segs: Dict[Tuple, List[Tuple[int, int, Buffer]]] = defaultdict(list) # Dict[buffer key, Tuple[start, end, buffer to reuse on the seg]]                                    # engine/schedule.py:404
                          buffer_requests = sorted([(first_appearance[buf], last_appearance[buf], buf) for buf in first_appearance.keys()], key=lambda x: -x[2].nbytes)                                  # engine/schedule.py:416
                          assigned = {buf:find_replace_buffer(buf, st, en) for st, en, buf in buffer_requests}                                                                                           # engine/schedule.py:417
                          for i,u in enumerate(buffers):                                                                                                                                                 # engine/schedule.py:419
                            for buf in u:                                                                                                                                                                # engine/schedule.py:420
                              if buf.is_allocated() or buf.lb_refcount > 0 or (noopt_buffers is not None and buf.base in noopt_buffers): continue                                                        # engine/schedule.py:421

                          if DEBUG >= 1 and len(ak:=dedup(x for x in assigned.keys() if x._base is None)) != len(av:=dedup(x for x in assigned.values() if x._base is None)):                            # engine/schedule.py:425

                          return assigned                                                                                                                                                                # engine/schedule.py:428

                      return [ScheduleItem(si.ast, tuple(assigned.get(x, x) for x in si.bufs), si.metadata) for si in schedule]                                                                          # engine/schedule.py:434

                  def run_schedule(schedule:List[ScheduleItem], var_vals:Optional[Dict[Variable, int]]=None, do_update_stats=True):                                                                      # engine/realize.py:218
                    for ei in lower_schedule(schedule):                                                                                                                                                  # engine/realize.py:219

                      def lower_schedule(schedule:List[ScheduleItem]) -> Generator[ExecItem, None, None]:                                                                                                # engine/realize.py:203
                        while len(schedule):                                                                                                                                                             # engine/realize.py:204
                          si = schedule.pop(0)                                                                                                                                                           # engine/realize.py:205
                          try: yield lower_schedule_item(si)                                                                                                                                             # engine/realize.py:206

                            def lower_schedule_item(si:ScheduleItem) -> ExecItem:                                                                                                                        # engine/realize.py:187
                              assert len(set(x.device for x in si.bufs)) == 1 or si.ast.op is MetaOps.COPY or getenv("USE_COPY_KERNEL")                                                                  # engine/realize.py:188
                              if si.ast.op is MetaOps.KERNEL:                                                                                                                                            # engine/realize.py:189
                              out = si.outputs[0]                                                                                                                                                        # engine/realize.py:192

                                @dataclass(frozen=True)                                                                                                                                                  # engine/schedule.py:25
                                class ScheduleItem:
                                  @property                                                                                                                                                              # engine/schedule.py:30
                                  def outputs(self) -> Tuple[Buffer, ...]:
                                    return self.bufs[:len(self.ast.src)] if self.ast.op is MetaOps.KERNEL else self.bufs[0:1]                                                                            # engine/schedule.py:32

                              if si.ast.op is MetaOps.COPY:                                                                                                                                              # engine/realize.py:193
                              if si.ast.op is MetaOps.CUSTOM: return ExecItem(CustomOp(si.ast.arg), list(si.bufs))                                                                                       # engine/realize.py:198
                              if si.ast.op is MetaOps.EMPTY: return ExecItem(EmptyOp(out), list(si.bufs))                                                                                                # engine/realize.py:199

                                class EmptyOp(Runner):                                                                                                                                                   # engine/realize.py:111
                                  def __init__(self, buf:Buffer): super().__init__(colored(f"empty {buf.size:10d} {buf.dtype}", "yellow"), buf.device)                                                   # engine/realize.py:112

                                    @dataclass(frozen=True, order=True)                                                                                                                                  # dtype.py:9
                                    class DType:
                                      def __repr__(self): return f"dtypes.{'_'*(c:=self.count!=1)}{INVERSE_DTYPES_DICT[self.name if not c else self.scalar().name]}{str(self.count)*c}"                  # dtype.py:15

                                    def colored(st, color:Optional[str], background=False): return f"\u001b[{10*background+60*(color.upper() == color)+30+['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white'].index(color.lower())}m{st}\u001b[0m" if color is not None else st  # replace the termcolor library with one line  # noqa: E501 # helpers.py:28

                                    class Runner:                                                                                                                                                        # engine/realize.py:67
                                      def __init__(self, display_name:str, dname:str, op_estimate:sint=0, mem_estimate:sint=0, lds_estimate:sint=0):                                                     # engine/realize.py:68
                                        self.first_run, self.display_name, self.dname, self.op_estimate, self.mem_estimate, self.lds_estimate = \                                                        # engine/realize.py:69
                                          True, display_name, dname, op_estimate, mem_estimate, lds_estimate

                      if len(capturing) and CAPTURING: capturing[0].add(ei)                                                                                                                              # engine/realize.py:220
                      ei.run(var_vals, do_update_stats=do_update_stats)                                                                                                                                  # engine/realize.py:221

                        @dataclass(frozen=True)                                                                                                                                                          # engine/realize.py:166
                        class ExecItem:
                          def run(self, var_vals:Optional[Dict[Variable, int]]=None, wait=False, jit=False, do_update_stats=True) -> Optional[float]:                                                    # engine/realize.py:170
                            bufs = [cast(Buffer, x) for x in self.bufs] if jit else [cast(Buffer, x).ensure_allocated() for x in self.bufs]                                                              # engine/realize.py:171

                          class Buffer:                                                                                                                                                                  # device.py:53
                            def ensure_allocated(self) -> Buffer: return self.allocate() if not hasattr(self, '_buf') else self                                                                          # device.py:78

                          from __future__ import annotations                                                                                                                                             # runtime/ops_disk.py:1
                          import os, sys, mmap, _posixshmem, io, ctypes, ctypes.util, platform, contextlib                                                                                               # runtime/ops_disk.py:2
                          from typing import Optional, Generator, Tuple, Callable, List                                                                                                                  # runtime/ops_disk.py:3
                          from tinygrad.helpers import OSX, round_up                                                                                                                                     # runtime/ops_disk.py:4
                          from tinygrad.device import Compiled, Allocator                                                                                                                                # runtime/ops_disk.py:5
                          from tinygrad.runtime.autogen import io_uring, libc                                                                                                                            # runtime/ops_disk.py:6
                          import ctypes                                                                                                                                                                  # runtime/autogen/io_uring.py:9

                          class Union(ctypes.Union, AsDictMixin):                                                                                                                                        # runtime/autogen/io_uring.py:115
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:116

                          c_int128 = ctypes.c_ubyte*16                                                                                                                                                   # runtime/autogen/io_uring.py:120
                          c_uint128 = c_int128                                                                                                                                                           # runtime/autogen/io_uring.py:121
                          void = None                                                                                                                                                                    # runtime/autogen/io_uring.py:122
                          if ctypes.sizeof(ctypes.c_longdouble) == 16:                                                                                                                                   # runtime/autogen/io_uring.py:123
                              c_long_double_t = ctypes.c_longdouble                                                                                                                                      # runtime/autogen/io_uring.py:124

                          _libraries = {}                                                                                                                                                                # runtime/autogen/io_uring.py:137
                          _libraries['FIXME_STUB'] = FunctionFactoryStub() #  ctypes.CDLL('FIXME_STUB')                                                                                                  # runtime/autogen/io_uring.py:138

                          class struct_io_uring_sq(Structure):                                                                                                                                           # runtime/autogen/io_uring.py:160
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:161

                          class struct_io_uring_sqe(Structure):                                                                                                                                          # runtime/autogen/io_uring.py:163
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:164

                          struct_io_uring_sq._pack_ = 1 # source:False                                                                                                                                   # runtime/autogen/io_uring.py:166
                          struct_io_uring_sq._fields_ = [                                                                                                                                                # runtime/autogen/io_uring.py:167
                              ('khead', ctypes.POINTER(ctypes.c_uint32)),
                              ('ktail', ctypes.POINTER(ctypes.c_uint32)),
                              ('kring_mask', ctypes.POINTER(ctypes.c_uint32)),
                              ('kring_entries', ctypes.POINTER(ctypes.c_uint32)),
                              ('kflags', ctypes.POINTER(ctypes.c_uint32)),
                              ('kdropped', ctypes.POINTER(ctypes.c_uint32)),
                              ('array', ctypes.POINTER(ctypes.c_uint32)),
                              ('sqes', ctypes.POINTER(struct_io_uring_sqe)),
                              ('sqe_head', ctypes.c_uint32),
                              ('sqe_tail', ctypes.c_uint32),
                              ('ring_sz', ctypes.c_uint64),
                              ('ring_ptr', ctypes.POINTER(None)),
                              ('pad', ctypes.c_uint32 * 4),
                          ]

                          class union_io_uring_sqe_0(Union):                                                                                                                                             # runtime/autogen/io_uring.py:183
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:184

                          union_io_uring_sqe_0._pack_ = 1 # source:False                                                                                                                                 # runtime/autogen/io_uring.py:186
                          union_io_uring_sqe_0._fields_ = [                                                                                                                                              # runtime/autogen/io_uring.py:187
                              ('off', ctypes.c_uint64),
                              ('addr2', ctypes.c_uint64),
                          ]

                          class union_io_uring_sqe_1(Union):                                                                                                                                             # runtime/autogen/io_uring.py:192
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:193

                          union_io_uring_sqe_1._pack_ = 1 # source:False                                                                                                                                 # runtime/autogen/io_uring.py:195
                          union_io_uring_sqe_1._fields_ = [                                                                                                                                              # runtime/autogen/io_uring.py:196
                              ('addr', ctypes.c_uint64),
                              ('splice_off_in', ctypes.c_uint64),
                          ]

                          class union_io_uring_sqe_2(Union):                                                                                                                                             # runtime/autogen/io_uring.py:201
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:202

                          union_io_uring_sqe_2._pack_ = 1 # source:False                                                                                                                                 # runtime/autogen/io_uring.py:204
                          union_io_uring_sqe_2._fields_ = [                                                                                                                                              # runtime/autogen/io_uring.py:205
                              ('rw_flags', ctypes.c_int32),
                              ('fsync_flags', ctypes.c_uint32),
                              ('poll_events', ctypes.c_uint16),
                              ('poll32_events', ctypes.c_uint32),
                              ('sync_range_flags', ctypes.c_uint32),
                              ('msg_flags', ctypes.c_uint32),
                              ('timeout_flags', ctypes.c_uint32),
                              ('accept_flags', ctypes.c_uint32),
                              ('cancel_flags', ctypes.c_uint32),
                              ('open_flags', ctypes.c_uint32),
                              ('statx_flags', ctypes.c_uint32),
                              ('fadvise_advice', ctypes.c_uint32),
                              ('splice_flags', ctypes.c_uint32),
                              ('rename_flags', ctypes.c_uint32),
                              ('unlink_flags', ctypes.c_uint32),
                              ('hardlink_flags', ctypes.c_uint32),
                          ]

                          class union_io_uring_sqe_3(Union):                                                                                                                                             # runtime/autogen/io_uring.py:224
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:225

                          union_io_uring_sqe_3._pack_ = 1 # source:True                                                                                                                                  # runtime/autogen/io_uring.py:227
                          union_io_uring_sqe_3._fields_ = [                                                                                                                                              # runtime/autogen/io_uring.py:228
                              ('buf_index', ctypes.c_uint16),
                              ('buf_group', ctypes.c_uint16),
                          ]

                          class union_io_uring_sqe_4(Union):                                                                                                                                             # runtime/autogen/io_uring.py:233
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:234

                          union_io_uring_sqe_4._pack_ = 1 # source:False                                                                                                                                 # runtime/autogen/io_uring.py:236
                          union_io_uring_sqe_4._fields_ = [                                                                                                                                              # runtime/autogen/io_uring.py:237
                              ('splice_fd_in', ctypes.c_int32),
                              ('file_index', ctypes.c_uint32),
                          ]
                          struct_io_uring_sqe._pack_ = 1 # source:False                                                                                                                                  # runtime/autogen/io_uring.py:242
                          struct_io_uring_sqe._anonymous_ = ('_0', '_1', '_2', '_3', '_4',)                                                                                                              # runtime/autogen/io_uring.py:243
                          struct_io_uring_sqe._fields_ = [                                                                                                                                               # runtime/autogen/io_uring.py:244
                              ('opcode', ctypes.c_ubyte),
                              ('flags', ctypes.c_ubyte),
                              ('ioprio', ctypes.c_uint16),
                              ('fd', ctypes.c_int32),
                              ('_0', union_io_uring_sqe_0),
                              ('_1', union_io_uring_sqe_1),
                              ('len', ctypes.c_uint32),
                              ('_2', union_io_uring_sqe_2),
                              ('user_data', ctypes.c_uint64),
                              ('_3', union_io_uring_sqe_3),
                              ('personality', ctypes.c_uint16),
                              ('_4', union_io_uring_sqe_4),
                              ('__pad2', ctypes.c_uint64 * 2),
                          ]

                          class struct_io_uring_cq(Structure):                                                                                                                                           # runtime/autogen/io_uring.py:260
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:261

                          class struct_io_uring_cqe(Structure):                                                                                                                                          # runtime/autogen/io_uring.py:263
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:264

                          struct_io_uring_cq._pack_ = 1 # source:False                                                                                                                                   # runtime/autogen/io_uring.py:266
                          struct_io_uring_cq._fields_ = [                                                                                                                                                # runtime/autogen/io_uring.py:267
                              ('khead', ctypes.POINTER(ctypes.c_uint32)),
                              ('ktail', ctypes.POINTER(ctypes.c_uint32)),
                              ('kring_mask', ctypes.POINTER(ctypes.c_uint32)),
                              ('kring_entries', ctypes.POINTER(ctypes.c_uint32)),
                              ('kflags', ctypes.POINTER(ctypes.c_uint32)),
                              ('koverflow', ctypes.POINTER(ctypes.c_uint32)),
                              ('cqes', ctypes.POINTER(struct_io_uring_cqe)),
                              ('ring_sz', ctypes.c_uint64),
                              ('ring_ptr', ctypes.POINTER(None)),
                              ('pad', ctypes.c_uint32 * 4),
                          ]
                          struct_io_uring_cqe._pack_ = 1 # source:False                                                                                                                                  # runtime/autogen/io_uring.py:280
                          struct_io_uring_cqe._fields_ = [                                                                                                                                               # runtime/autogen/io_uring.py:281
                              ('user_data', ctypes.c_uint64),
                              ('res', ctypes.c_int32),
                              ('flags', ctypes.c_uint32),
                          ]

                          class struct_io_uring(Structure):                                                                                                                                              # runtime/autogen/io_uring.py:287
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:288

                          struct_io_uring._pack_ = 1 # source:False                                                                                                                                      # runtime/autogen/io_uring.py:290
                          struct_io_uring._fields_ = [                                                                                                                                                   # runtime/autogen/io_uring.py:291
                              ('sq', struct_io_uring_sq),
                              ('cq', struct_io_uring_cq),
                              ('flags', ctypes.c_uint32),
                              ('ring_fd', ctypes.c_int32),
                              ('features', ctypes.c_uint32),
                              ('pad', ctypes.c_uint32 * 3),
                          ]

                          class struct_io_uring_probe(Structure):                                                                                                                                        # runtime/autogen/io_uring.py:300
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:301

                          class struct_io_uring_probe_op(Structure):                                                                                                                                     # runtime/autogen/io_uring.py:303
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:304

                          struct_io_uring_probe_op._pack_ = 1 # source:False                                                                                                                             # runtime/autogen/io_uring.py:306
                          struct_io_uring_probe_op._fields_ = [                                                                                                                                          # runtime/autogen/io_uring.py:307
                              ('op', ctypes.c_ubyte),
                              ('resv', ctypes.c_ubyte),
                              ('flags', ctypes.c_uint16),
                              ('resv2', ctypes.c_uint32),
                          ]
                          struct_io_uring_probe._pack_ = 1 # source:False                                                                                                                                # runtime/autogen/io_uring.py:314
                          struct_io_uring_probe._fields_ = [                                                                                                                                             # runtime/autogen/io_uring.py:315
                              ('last_op', ctypes.c_ubyte),
                              ('ops_len', ctypes.c_ubyte),
                              ('resv', ctypes.c_uint16),
                              ('resv2', ctypes.c_uint32 * 3),
                              ('ops', struct_io_uring_probe_op * 0),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:323
                              io_uring_get_probe_ring = _libraries['FIXME_STUB'].io_uring_get_probe_ring                                                                                                 # runtime/autogen/io_uring.py:324

                                class FunctionFactoryStub:                                                                                                                                               # runtime/autogen/io_uring.py:128
                                    def __getattr__(self, _):                                                                                                                                            # runtime/autogen/io_uring.py:129
                                      return ctypes.CFUNCTYPE(lambda y:y)                                                                                                                                # runtime/autogen/io_uring.py:130

                              io_uring_get_probe_ring.restype = ctypes.POINTER(struct_io_uring_probe)                                                                                                    # runtime/autogen/io_uring.py:325
                              io_uring_get_probe_ring.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                       # runtime/autogen/io_uring.py:326
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:329
                              io_uring_get_probe = _libraries['FIXME_STUB'].io_uring_get_probe                                                                                                           # runtime/autogen/io_uring.py:330

                              io_uring_get_probe.restype = ctypes.POINTER(struct_io_uring_probe)                                                                                                         # runtime/autogen/io_uring.py:331
                              io_uring_get_probe.argtypes = []                                                                                                                                           # runtime/autogen/io_uring.py:332
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:335
                              io_uring_free_probe = _libraries['FIXME_STUB'].io_uring_free_probe                                                                                                         # runtime/autogen/io_uring.py:336

                              io_uring_free_probe.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:337
                              io_uring_free_probe.argtypes = [ctypes.POINTER(struct_io_uring_probe)]                                                                                                     # runtime/autogen/io_uring.py:338
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:341
                              io_uring_opcode_supported = _libraries['FIXME_STUB'].io_uring_opcode_supported                                                                                             # runtime/autogen/io_uring.py:342

                              io_uring_opcode_supported.restype = ctypes.c_int32                                                                                                                         # runtime/autogen/io_uring.py:343
                              io_uring_opcode_supported.argtypes = [ctypes.POINTER(struct_io_uring_probe), ctypes.c_int32]                                                                               # runtime/autogen/io_uring.py:344

                          class struct_io_uring_params(Structure):                                                                                                                                       # runtime/autogen/io_uring.py:347
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:348

                          class struct_io_sqring_offsets(Structure):                                                                                                                                     # runtime/autogen/io_uring.py:350
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:351

                          struct_io_sqring_offsets._pack_ = 1 # source:False                                                                                                                             # runtime/autogen/io_uring.py:353
                          struct_io_sqring_offsets._fields_ = [                                                                                                                                          # runtime/autogen/io_uring.py:354
                              ('head', ctypes.c_uint32),
                              ('tail', ctypes.c_uint32),
                              ('ring_mask', ctypes.c_uint32),
                              ('ring_entries', ctypes.c_uint32),
                              ('flags', ctypes.c_uint32),
                              ('dropped', ctypes.c_uint32),
                              ('array', ctypes.c_uint32),
                              ('resv1', ctypes.c_uint32),
                              ('resv2', ctypes.c_uint64),
                          ]

                          class struct_io_cqring_offsets(Structure):                                                                                                                                     # runtime/autogen/io_uring.py:366
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:367

                          struct_io_cqring_offsets._pack_ = 1 # source:False                                                                                                                             # runtime/autogen/io_uring.py:369
                          struct_io_cqring_offsets._fields_ = [                                                                                                                                          # runtime/autogen/io_uring.py:370
                              ('head', ctypes.c_uint32),
                              ('tail', ctypes.c_uint32),
                              ('ring_mask', ctypes.c_uint32),
                              ('ring_entries', ctypes.c_uint32),
                              ('overflow', ctypes.c_uint32),
                              ('cqes', ctypes.c_uint32),
                              ('flags', ctypes.c_uint32),
                              ('resv1', ctypes.c_uint32),
                              ('resv2', ctypes.c_uint64),
                          ]
                          struct_io_uring_params._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/io_uring.py:382
                          struct_io_uring_params._fields_ = [                                                                                                                                            # runtime/autogen/io_uring.py:383
                              ('sq_entries', ctypes.c_uint32),
                              ('cq_entries', ctypes.c_uint32),
                              ('flags', ctypes.c_uint32),
                              ('sq_thread_cpu', ctypes.c_uint32),
                              ('sq_thread_idle', ctypes.c_uint32),
                              ('features', ctypes.c_uint32),
                              ('wq_fd', ctypes.c_uint32),
                              ('resv', ctypes.c_uint32 * 3),
                              ('sq_off', struct_io_sqring_offsets),
                              ('cq_off', struct_io_cqring_offsets),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:396
                              io_uring_queue_init_params = _libraries['FIXME_STUB'].io_uring_queue_init_params                                                                                           # runtime/autogen/io_uring.py:397

                              io_uring_queue_init_params.restype = ctypes.c_int32                                                                                                                        # runtime/autogen/io_uring.py:398
                              io_uring_queue_init_params.argtypes = [ctypes.c_uint32, ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_io_uring_params)]                                           # runtime/autogen/io_uring.py:399
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:402
                              io_uring_queue_init = _libraries['FIXME_STUB'].io_uring_queue_init                                                                                                         # runtime/autogen/io_uring.py:403

                              io_uring_queue_init.restype = ctypes.c_int32                                                                                                                               # runtime/autogen/io_uring.py:404
                              io_uring_queue_init.argtypes = [ctypes.c_uint32, ctypes.POINTER(struct_io_uring), ctypes.c_uint32]                                                                         # runtime/autogen/io_uring.py:405
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:408
                              io_uring_queue_mmap = _libraries['FIXME_STUB'].io_uring_queue_mmap                                                                                                         # runtime/autogen/io_uring.py:409

                              io_uring_queue_mmap.restype = ctypes.c_int32                                                                                                                               # runtime/autogen/io_uring.py:410
                              io_uring_queue_mmap.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_io_uring_params), ctypes.POINTER(struct_io_uring)]                                                   # runtime/autogen/io_uring.py:411
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:414
                              io_uring_ring_dontfork = _libraries['FIXME_STUB'].io_uring_ring_dontfork                                                                                                   # runtime/autogen/io_uring.py:415

                              io_uring_ring_dontfork.restype = ctypes.c_int32                                                                                                                            # runtime/autogen/io_uring.py:416
                              io_uring_ring_dontfork.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                        # runtime/autogen/io_uring.py:417
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:420
                              io_uring_queue_exit = _libraries['FIXME_STUB'].io_uring_queue_exit                                                                                                         # runtime/autogen/io_uring.py:421

                              io_uring_queue_exit.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:422
                              io_uring_queue_exit.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                           # runtime/autogen/io_uring.py:423
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:426
                              io_uring_peek_batch_cqe = _libraries['FIXME_STUB'].io_uring_peek_batch_cqe                                                                                                 # runtime/autogen/io_uring.py:427

                              io_uring_peek_batch_cqe.restype = ctypes.c_uint32                                                                                                                          # runtime/autogen/io_uring.py:428
                              io_uring_peek_batch_cqe.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe)), ctypes.c_uint32]                                 # runtime/autogen/io_uring.py:429

                          class struct___kernel_timespec(Structure):                                                                                                                                     # runtime/autogen/io_uring.py:432
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:433

                          struct___kernel_timespec._pack_ = 1 # source:False                                                                                                                             # runtime/autogen/io_uring.py:435
                          struct___kernel_timespec._fields_ = [                                                                                                                                          # runtime/autogen/io_uring.py:436
                              ('tv_sec', ctypes.c_int64),
                              ('tv_nsec', ctypes.c_int64),
                          ]

                          class struct_c__SA___sigset_t(Structure):                                                                                                                                      # runtime/autogen/io_uring.py:441
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:442

                          struct_c__SA___sigset_t._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/io_uring.py:444
                          struct_c__SA___sigset_t._fields_ = [                                                                                                                                           # runtime/autogen/io_uring.py:445
                              ('__val', ctypes.c_uint64 * 16),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:449
                              io_uring_wait_cqes = _libraries['FIXME_STUB'].io_uring_wait_cqes                                                                                                           # runtime/autogen/io_uring.py:450

                              io_uring_wait_cqes.restype = ctypes.c_int32                                                                                                                                # runtime/autogen/io_uring.py:451
                              io_uring_wait_cqes.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe)), ctypes.c_uint32, ctypes.POINTER(struct___kernel_timespec), ctypes.POINTER(struct_c__SA___sigset_t)] # runtime/autogen/io_uring.py:452
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:455
                              io_uring_wait_cqe_timeout = _libraries['FIXME_STUB'].io_uring_wait_cqe_timeout                                                                                             # runtime/autogen/io_uring.py:456

                              io_uring_wait_cqe_timeout.restype = ctypes.c_int32                                                                                                                         # runtime/autogen/io_uring.py:457
                              io_uring_wait_cqe_timeout.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe)), ctypes.POINTER(struct___kernel_timespec)]      # runtime/autogen/io_uring.py:458
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:461
                              io_uring_submit = _libraries['FIXME_STUB'].io_uring_submit                                                                                                                 # runtime/autogen/io_uring.py:462

                              io_uring_submit.restype = ctypes.c_int32                                                                                                                                   # runtime/autogen/io_uring.py:463
                              io_uring_submit.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                               # runtime/autogen/io_uring.py:464
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:467
                              io_uring_submit_and_wait = _libraries['FIXME_STUB'].io_uring_submit_and_wait                                                                                               # runtime/autogen/io_uring.py:468

                              io_uring_submit_and_wait.restype = ctypes.c_int32                                                                                                                          # runtime/autogen/io_uring.py:469
                              io_uring_submit_and_wait.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_uint32]                                                                                     # runtime/autogen/io_uring.py:470
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:473
                              io_uring_get_sqe = _libraries['FIXME_STUB'].io_uring_get_sqe                                                                                                               # runtime/autogen/io_uring.py:474

                              io_uring_get_sqe.restype = ctypes.POINTER(struct_io_uring_sqe)                                                                                                             # runtime/autogen/io_uring.py:475
                              io_uring_get_sqe.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                              # runtime/autogen/io_uring.py:476

                          class struct_iovec(Structure):                                                                                                                                                 # runtime/autogen/io_uring.py:479
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:480

                          struct_iovec._pack_ = 1 # source:False                                                                                                                                         # runtime/autogen/io_uring.py:482
                          struct_iovec._fields_ = [                                                                                                                                                      # runtime/autogen/io_uring.py:483
                              ('iov_base', ctypes.POINTER(None)),
                              ('iov_len', ctypes.c_uint64),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:488
                              io_uring_register_buffers = _libraries['FIXME_STUB'].io_uring_register_buffers                                                                                             # runtime/autogen/io_uring.py:489

                              io_uring_register_buffers.restype = ctypes.c_int32                                                                                                                         # runtime/autogen/io_uring.py:490
                              io_uring_register_buffers.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_iovec), ctypes.c_uint32]                                                      # runtime/autogen/io_uring.py:491
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:494
                              io_uring_register_buffers_tags = _libraries['FIXME_STUB'].io_uring_register_buffers_tags                                                                                   # runtime/autogen/io_uring.py:495

                              io_uring_register_buffers_tags.restype = ctypes.c_int32                                                                                                                    # runtime/autogen/io_uring.py:496
                              io_uring_register_buffers_tags.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_iovec), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint32]                # runtime/autogen/io_uring.py:497
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:500
                              io_uring_register_buffers_update_tag = _libraries['FIXME_STUB'].io_uring_register_buffers_update_tag                                                                       # runtime/autogen/io_uring.py:501

                              io_uring_register_buffers_update_tag.restype = ctypes.c_int32                                                                                                              # runtime/autogen/io_uring.py:502
                              io_uring_register_buffers_update_tag.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_uint32, ctypes.POINTER(struct_iovec), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint32] # runtime/autogen/io_uring.py:503
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:506
                              io_uring_unregister_buffers = _libraries['FIXME_STUB'].io_uring_unregister_buffers                                                                                         # runtime/autogen/io_uring.py:507

                              io_uring_unregister_buffers.restype = ctypes.c_int32                                                                                                                       # runtime/autogen/io_uring.py:508
                              io_uring_unregister_buffers.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                   # runtime/autogen/io_uring.py:509
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:512
                              io_uring_register_files = _libraries['FIXME_STUB'].io_uring_register_files                                                                                                 # runtime/autogen/io_uring.py:513

                              io_uring_register_files.restype = ctypes.c_int32                                                                                                                           # runtime/autogen/io_uring.py:514
                              io_uring_register_files.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.c_int32), ctypes.c_uint32]                                                      # runtime/autogen/io_uring.py:515
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:518
                              io_uring_register_files_tags = _libraries['FIXME_STUB'].io_uring_register_files_tags                                                                                       # runtime/autogen/io_uring.py:519

                              io_uring_register_files_tags.restype = ctypes.c_int32                                                                                                                      # runtime/autogen/io_uring.py:520
                              io_uring_register_files_tags.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint32]                # runtime/autogen/io_uring.py:521
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:524
                              io_uring_register_files_update_tag = _libraries['FIXME_STUB'].io_uring_register_files_update_tag                                                                           # runtime/autogen/io_uring.py:525

                              io_uring_register_files_update_tag.restype = ctypes.c_int32                                                                                                                # runtime/autogen/io_uring.py:526
                              io_uring_register_files_update_tag.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_uint32, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(ctypes.c_uint64), ctypes.c_uint32] # runtime/autogen/io_uring.py:527
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:530
                              io_uring_unregister_files = _libraries['FIXME_STUB'].io_uring_unregister_files                                                                                             # runtime/autogen/io_uring.py:531

                              io_uring_unregister_files.restype = ctypes.c_int32                                                                                                                         # runtime/autogen/io_uring.py:532
                              io_uring_unregister_files.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                     # runtime/autogen/io_uring.py:533
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:536
                              io_uring_register_files_update = _libraries['FIXME_STUB'].io_uring_register_files_update                                                                                   # runtime/autogen/io_uring.py:537

                              io_uring_register_files_update.restype = ctypes.c_int32                                                                                                                    # runtime/autogen/io_uring.py:538
                              io_uring_register_files_update.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_uint32, ctypes.POINTER(ctypes.c_int32), ctypes.c_uint32]                              # runtime/autogen/io_uring.py:539
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:542
                              io_uring_register_eventfd = _libraries['FIXME_STUB'].io_uring_register_eventfd                                                                                             # runtime/autogen/io_uring.py:543

                              io_uring_register_eventfd.restype = ctypes.c_int32                                                                                                                         # runtime/autogen/io_uring.py:544
                              io_uring_register_eventfd.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_int32]                                                                                     # runtime/autogen/io_uring.py:545
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:548
                              io_uring_register_eventfd_async = _libraries['FIXME_STUB'].io_uring_register_eventfd_async                                                                                 # runtime/autogen/io_uring.py:549

                              io_uring_register_eventfd_async.restype = ctypes.c_int32                                                                                                                   # runtime/autogen/io_uring.py:550
                              io_uring_register_eventfd_async.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_int32]                                                                               # runtime/autogen/io_uring.py:551
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:554
                              io_uring_unregister_eventfd = _libraries['FIXME_STUB'].io_uring_unregister_eventfd                                                                                         # runtime/autogen/io_uring.py:555

                              io_uring_unregister_eventfd.restype = ctypes.c_int32                                                                                                                       # runtime/autogen/io_uring.py:556
                              io_uring_unregister_eventfd.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                   # runtime/autogen/io_uring.py:557
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:560
                              io_uring_register_probe = _libraries['FIXME_STUB'].io_uring_register_probe                                                                                                 # runtime/autogen/io_uring.py:561

                              io_uring_register_probe.restype = ctypes.c_int32                                                                                                                           # runtime/autogen/io_uring.py:562
                              io_uring_register_probe.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_io_uring_probe), ctypes.c_uint32]                                               # runtime/autogen/io_uring.py:563
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:566
                              io_uring_register_personality = _libraries['FIXME_STUB'].io_uring_register_personality                                                                                     # runtime/autogen/io_uring.py:567

                              io_uring_register_personality.restype = ctypes.c_int32                                                                                                                     # runtime/autogen/io_uring.py:568
                              io_uring_register_personality.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                 # runtime/autogen/io_uring.py:569
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:572
                              io_uring_unregister_personality = _libraries['FIXME_STUB'].io_uring_unregister_personality                                                                                 # runtime/autogen/io_uring.py:573

                              io_uring_unregister_personality.restype = ctypes.c_int32                                                                                                                   # runtime/autogen/io_uring.py:574
                              io_uring_unregister_personality.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_int32]                                                                               # runtime/autogen/io_uring.py:575

                          class struct_io_uring_restriction(Structure):                                                                                                                                  # runtime/autogen/io_uring.py:578
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:579

                          class union_io_uring_restriction_0(Union):                                                                                                                                     # runtime/autogen/io_uring.py:581
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:582

                          union_io_uring_restriction_0._pack_ = 1 # source:False                                                                                                                         # runtime/autogen/io_uring.py:584
                          union_io_uring_restriction_0._fields_ = [                                                                                                                                      # runtime/autogen/io_uring.py:585
                              ('register_op', ctypes.c_ubyte),
                              ('sqe_op', ctypes.c_ubyte),
                              ('sqe_flags', ctypes.c_ubyte),
                          ]
                          struct_io_uring_restriction._pack_ = 1 # source:False                                                                                                                          # runtime/autogen/io_uring.py:591
                          struct_io_uring_restriction._anonymous_ = ('_0',)                                                                                                                              # runtime/autogen/io_uring.py:592
                          struct_io_uring_restriction._fields_ = [                                                                                                                                       # runtime/autogen/io_uring.py:593
                              ('opcode', ctypes.c_uint16),
                              ('_0', union_io_uring_restriction_0),
                              ('resv', ctypes.c_ubyte),
                              ('resv2', ctypes.c_uint32 * 3),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:600
                              io_uring_register_restrictions = _libraries['FIXME_STUB'].io_uring_register_restrictions                                                                                   # runtime/autogen/io_uring.py:601

                              io_uring_register_restrictions.restype = ctypes.c_int32                                                                                                                    # runtime/autogen/io_uring.py:602
                              io_uring_register_restrictions.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_io_uring_restriction), ctypes.c_uint32]                                  # runtime/autogen/io_uring.py:603
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:606
                              io_uring_enable_rings = _libraries['FIXME_STUB'].io_uring_enable_rings                                                                                                     # runtime/autogen/io_uring.py:607

                              io_uring_enable_rings.restype = ctypes.c_int32                                                                                                                             # runtime/autogen/io_uring.py:608
                              io_uring_enable_rings.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                         # runtime/autogen/io_uring.py:609
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:612
                              __io_uring_sqring_wait = _libraries['FIXME_STUB'].__io_uring_sqring_wait                                                                                                   # runtime/autogen/io_uring.py:613

                              __io_uring_sqring_wait.restype = ctypes.c_int32                                                                                                                            # runtime/autogen/io_uring.py:614
                              __io_uring_sqring_wait.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                        # runtime/autogen/io_uring.py:615
                          size_t = ctypes.c_uint64                                                                                                                                                       # runtime/autogen/io_uring.py:618

                          class struct_c__SA_cpu_set_t(Structure):                                                                                                                                       # runtime/autogen/io_uring.py:619
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:620

                          struct_c__SA_cpu_set_t._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/io_uring.py:622
                          struct_c__SA_cpu_set_t._fields_ = [                                                                                                                                            # runtime/autogen/io_uring.py:623
                              ('__bits', ctypes.c_uint64 * 16),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:627
                              io_uring_register_iowq_aff = _libraries['FIXME_STUB'].io_uring_register_iowq_aff                                                                                           # runtime/autogen/io_uring.py:628

                              io_uring_register_iowq_aff.restype = ctypes.c_int32                                                                                                                        # runtime/autogen/io_uring.py:629
                              io_uring_register_iowq_aff.argtypes = [ctypes.POINTER(struct_io_uring), size_t, ctypes.POINTER(struct_c__SA_cpu_set_t)]                                                    # runtime/autogen/io_uring.py:630
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:633
                              io_uring_unregister_iowq_aff = _libraries['FIXME_STUB'].io_uring_unregister_iowq_aff                                                                                       # runtime/autogen/io_uring.py:634

                              io_uring_unregister_iowq_aff.restype = ctypes.c_int32                                                                                                                      # runtime/autogen/io_uring.py:635
                              io_uring_unregister_iowq_aff.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                  # runtime/autogen/io_uring.py:636
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:639
                              io_uring_register_iowq_max_workers = _libraries['FIXME_STUB'].io_uring_register_iowq_max_workers                                                                           # runtime/autogen/io_uring.py:640

                              io_uring_register_iowq_max_workers.restype = ctypes.c_int32                                                                                                                # runtime/autogen/io_uring.py:641
                              io_uring_register_iowq_max_workers.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.c_uint32)]                                                           # runtime/autogen/io_uring.py:642
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:645
                              __io_uring_get_cqe = _libraries['FIXME_STUB'].__io_uring_get_cqe                                                                                                           # runtime/autogen/io_uring.py:646

                              __io_uring_get_cqe.restype = ctypes.c_int32                                                                                                                                # runtime/autogen/io_uring.py:647
                              __io_uring_get_cqe.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe)), ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(struct_c__SA___sigset_t)] # runtime/autogen/io_uring.py:648
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:651
                              io_uring_cq_advance = _libraries['FIXME_STUB'].io_uring_cq_advance                                                                                                         # runtime/autogen/io_uring.py:652

                              io_uring_cq_advance.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:653
                              io_uring_cq_advance.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_uint32]                                                                                          # runtime/autogen/io_uring.py:654
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:657
                              io_uring_cqe_seen = _libraries['FIXME_STUB'].io_uring_cqe_seen                                                                                                             # runtime/autogen/io_uring.py:658

                              io_uring_cqe_seen.restype = None                                                                                                                                           # runtime/autogen/io_uring.py:659
                              io_uring_cqe_seen.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(struct_io_uring_cqe)]                                                                        # runtime/autogen/io_uring.py:660
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:663
                              io_uring_sqe_set_data = _libraries['FIXME_STUB'].io_uring_sqe_set_data                                                                                                     # runtime/autogen/io_uring.py:664

                              io_uring_sqe_set_data.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:665
                              io_uring_sqe_set_data.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None)]                                                                               # runtime/autogen/io_uring.py:666
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:669
                              io_uring_cqe_get_data = _libraries['FIXME_STUB'].io_uring_cqe_get_data                                                                                                     # runtime/autogen/io_uring.py:670

                              io_uring_cqe_get_data.restype = ctypes.POINTER(None)                                                                                                                       # runtime/autogen/io_uring.py:671
                              io_uring_cqe_get_data.argtypes = [ctypes.POINTER(struct_io_uring_cqe)]                                                                                                     # runtime/autogen/io_uring.py:672
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:675
                              io_uring_sqe_set_flags = _libraries['FIXME_STUB'].io_uring_sqe_set_flags                                                                                                   # runtime/autogen/io_uring.py:676

                              io_uring_sqe_set_flags.restype = None                                                                                                                                      # runtime/autogen/io_uring.py:677
                              io_uring_sqe_set_flags.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_uint32]                                                                                   # runtime/autogen/io_uring.py:678
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:681
                              __io_uring_set_target_fixed_file = _libraries['FIXME_STUB'].__io_uring_set_target_fixed_file                                                                               # runtime/autogen/io_uring.py:682

                              __io_uring_set_target_fixed_file.restype = None                                                                                                                            # runtime/autogen/io_uring.py:683
                              __io_uring_set_target_fixed_file.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_uint32]                                                                         # runtime/autogen/io_uring.py:684
                          __u64 = ctypes.c_uint64                                                                                                                                                        # runtime/autogen/io_uring.py:687
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:688
                              io_uring_prep_rw = _libraries['FIXME_STUB'].io_uring_prep_rw                                                                                                               # runtime/autogen/io_uring.py:689

                              io_uring_prep_rw.restype = None                                                                                                                                            # runtime/autogen/io_uring.py:690
                              io_uring_prep_rw.argtypes = [ctypes.c_int32, ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32, __u64]                            # runtime/autogen/io_uring.py:691
                          int64_t = ctypes.c_int64                                                                                                                                                       # runtime/autogen/io_uring.py:694
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:695
                              io_uring_prep_splice = _libraries['FIXME_STUB'].io_uring_prep_splice                                                                                                       # runtime/autogen/io_uring.py:696

                              io_uring_prep_splice.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:697
                              io_uring_prep_splice.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, int64_t, ctypes.c_int32, int64_t, ctypes.c_uint32, ctypes.c_uint32]                  # runtime/autogen/io_uring.py:698
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:701
                              io_uring_prep_tee = _libraries['FIXME_STUB'].io_uring_prep_tee                                                                                                             # runtime/autogen/io_uring.py:702

                              io_uring_prep_tee.restype = None                                                                                                                                           # runtime/autogen/io_uring.py:703
                              io_uring_prep_tee.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_int32, ctypes.c_uint32, ctypes.c_uint32]                                       # runtime/autogen/io_uring.py:704
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:707
                              io_uring_prep_readv = _libraries['FIXME_STUB'].io_uring_prep_readv                                                                                                         # runtime/autogen/io_uring.py:708

                              io_uring_prep_readv.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:709
                              io_uring_prep_readv.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_iovec), ctypes.c_uint32, __u64]                                 # runtime/autogen/io_uring.py:710
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:713
                              io_uring_prep_read_fixed = _libraries['FIXME_STUB'].io_uring_prep_read_fixed                                                                                               # runtime/autogen/io_uring.py:714

                              io_uring_prep_read_fixed.restype = None                                                                                                                                    # runtime/autogen/io_uring.py:715
                              io_uring_prep_read_fixed.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32, __u64, ctypes.c_int32]                    # runtime/autogen/io_uring.py:716
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:719
                              io_uring_prep_writev = _libraries['FIXME_STUB'].io_uring_prep_writev                                                                                                       # runtime/autogen/io_uring.py:720

                              io_uring_prep_writev.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:721
                              io_uring_prep_writev.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_iovec), ctypes.c_uint32, __u64]                                # runtime/autogen/io_uring.py:722
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:725
                              io_uring_prep_write_fixed = _libraries['FIXME_STUB'].io_uring_prep_write_fixed                                                                                             # runtime/autogen/io_uring.py:726

                              io_uring_prep_write_fixed.restype = None                                                                                                                                   # runtime/autogen/io_uring.py:727
                              io_uring_prep_write_fixed.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32, __u64, ctypes.c_int32]                   # runtime/autogen/io_uring.py:728

                          class struct_msghdr(Structure):                                                                                                                                                # runtime/autogen/io_uring.py:731
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:732

                          struct_msghdr._pack_ = 1 # source:False                                                                                                                                        # runtime/autogen/io_uring.py:734
                          struct_msghdr._fields_ = [                                                                                                                                                     # runtime/autogen/io_uring.py:735
                              ('msg_name', ctypes.POINTER(None)),
                              ('msg_namelen', ctypes.c_uint32),
                              ('PADDING_0', ctypes.c_ubyte * 4),
                              ('msg_iov', ctypes.POINTER(struct_iovec)),
                              ('msg_iovlen', ctypes.c_uint64),
                              ('msg_control', ctypes.POINTER(None)),
                              ('msg_controllen', ctypes.c_uint64),
                              ('msg_flags', ctypes.c_int32),
                              ('PADDING_1', ctypes.c_ubyte * 4),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:747
                              io_uring_prep_recvmsg = _libraries['FIXME_STUB'].io_uring_prep_recvmsg                                                                                                     # runtime/autogen/io_uring.py:748

                              io_uring_prep_recvmsg.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:749
                              io_uring_prep_recvmsg.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_msghdr), ctypes.c_uint32]                                     # runtime/autogen/io_uring.py:750
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:753
                              io_uring_prep_sendmsg = _libraries['FIXME_STUB'].io_uring_prep_sendmsg                                                                                                     # runtime/autogen/io_uring.py:754

                              io_uring_prep_sendmsg.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:755
                              io_uring_prep_sendmsg.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_msghdr), ctypes.c_uint32]                                     # runtime/autogen/io_uring.py:756
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:759
                              __io_uring_prep_poll_mask = _libraries['FIXME_STUB'].__io_uring_prep_poll_mask                                                                                             # runtime/autogen/io_uring.py:760

                              __io_uring_prep_poll_mask.restype = ctypes.c_uint32                                                                                                                        # runtime/autogen/io_uring.py:761
                              __io_uring_prep_poll_mask.argtypes = [ctypes.c_uint32]                                                                                                                     # runtime/autogen/io_uring.py:762
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:765
                              io_uring_prep_poll_add = _libraries['FIXME_STUB'].io_uring_prep_poll_add                                                                                                   # runtime/autogen/io_uring.py:766

                              io_uring_prep_poll_add.restype = None                                                                                                                                      # runtime/autogen/io_uring.py:767
                              io_uring_prep_poll_add.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_uint32]                                                                   # runtime/autogen/io_uring.py:768
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:771
                              io_uring_prep_poll_multishot = _libraries['FIXME_STUB'].io_uring_prep_poll_multishot                                                                                       # runtime/autogen/io_uring.py:772

                              io_uring_prep_poll_multishot.restype = None                                                                                                                                # runtime/autogen/io_uring.py:773
                              io_uring_prep_poll_multishot.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_uint32]                                                             # runtime/autogen/io_uring.py:774
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:777
                              io_uring_prep_poll_remove = _libraries['FIXME_STUB'].io_uring_prep_poll_remove                                                                                             # runtime/autogen/io_uring.py:778

                              io_uring_prep_poll_remove.restype = None                                                                                                                                   # runtime/autogen/io_uring.py:779
                              io_uring_prep_poll_remove.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None)]                                                                           # runtime/autogen/io_uring.py:780
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:783
                              io_uring_prep_poll_update = _libraries['FIXME_STUB'].io_uring_prep_poll_update                                                                                             # runtime/autogen/io_uring.py:784

                              io_uring_prep_poll_update.restype = None                                                                                                                                   # runtime/autogen/io_uring.py:785
                              io_uring_prep_poll_update.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None), ctypes.POINTER(None), ctypes.c_uint32, ctypes.c_uint32]                   # runtime/autogen/io_uring.py:786
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:789
                              io_uring_prep_fsync = _libraries['FIXME_STUB'].io_uring_prep_fsync                                                                                                         # runtime/autogen/io_uring.py:790

                              io_uring_prep_fsync.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:791
                              io_uring_prep_fsync.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_uint32]                                                                      # runtime/autogen/io_uring.py:792
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:795
                              io_uring_prep_nop = _libraries['FIXME_STUB'].io_uring_prep_nop                                                                                                             # runtime/autogen/io_uring.py:796

                              io_uring_prep_nop.restype = None                                                                                                                                           # runtime/autogen/io_uring.py:797
                              io_uring_prep_nop.argtypes = [ctypes.POINTER(struct_io_uring_sqe)]                                                                                                         # runtime/autogen/io_uring.py:798
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:801
                              io_uring_prep_timeout = _libraries['FIXME_STUB'].io_uring_prep_timeout                                                                                                     # runtime/autogen/io_uring.py:802

                              io_uring_prep_timeout.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:803
                              io_uring_prep_timeout.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(struct___kernel_timespec), ctypes.c_uint32, ctypes.c_uint32]                         # runtime/autogen/io_uring.py:804
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:807
                              io_uring_prep_timeout_remove = _libraries['FIXME_STUB'].io_uring_prep_timeout_remove                                                                                       # runtime/autogen/io_uring.py:808

                              io_uring_prep_timeout_remove.restype = None                                                                                                                                # runtime/autogen/io_uring.py:809
                              io_uring_prep_timeout_remove.argtypes = [ctypes.POINTER(struct_io_uring_sqe), __u64, ctypes.c_uint32]                                                                      # runtime/autogen/io_uring.py:810
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:813
                              io_uring_prep_timeout_update = _libraries['FIXME_STUB'].io_uring_prep_timeout_update                                                                                       # runtime/autogen/io_uring.py:814

                              io_uring_prep_timeout_update.restype = None                                                                                                                                # runtime/autogen/io_uring.py:815
                              io_uring_prep_timeout_update.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(struct___kernel_timespec), __u64, ctypes.c_uint32]                            # runtime/autogen/io_uring.py:816

                          class struct_sockaddr(Structure):                                                                                                                                              # runtime/autogen/io_uring.py:819
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:820

                          struct_sockaddr._pack_ = 1 # source:False                                                                                                                                      # runtime/autogen/io_uring.py:822
                          struct_sockaddr._fields_ = [                                                                                                                                                   # runtime/autogen/io_uring.py:823
                              ('sa_family', ctypes.c_uint16),
                              ('sa_data', ctypes.c_char * 14),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:828
                              io_uring_prep_accept = _libraries['FIXME_STUB'].io_uring_prep_accept                                                                                                       # runtime/autogen/io_uring.py:829

                              io_uring_prep_accept.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:830
                              io_uring_prep_accept.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_sockaddr), ctypes.POINTER(ctypes.c_uint32), ctypes.c_int32]    # runtime/autogen/io_uring.py:831
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:834
                              io_uring_prep_accept_direct = _libraries['FIXME_STUB'].io_uring_prep_accept_direct                                                                                         # runtime/autogen/io_uring.py:835

                              io_uring_prep_accept_direct.restype = None                                                                                                                                 # runtime/autogen/io_uring.py:836
                              io_uring_prep_accept_direct.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_sockaddr), ctypes.POINTER(ctypes.c_uint32), ctypes.c_int32, ctypes.c_uint32] # runtime/autogen/io_uring.py:837
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:840
                              io_uring_prep_cancel = _libraries['FIXME_STUB'].io_uring_prep_cancel                                                                                                       # runtime/autogen/io_uring.py:841

                              io_uring_prep_cancel.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:842
                              io_uring_prep_cancel.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None), ctypes.c_int32]                                                                # runtime/autogen/io_uring.py:843
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:846
                              io_uring_prep_link_timeout = _libraries['FIXME_STUB'].io_uring_prep_link_timeout                                                                                           # runtime/autogen/io_uring.py:847

                              io_uring_prep_link_timeout.restype = None                                                                                                                                  # runtime/autogen/io_uring.py:848
                              io_uring_prep_link_timeout.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(struct___kernel_timespec), ctypes.c_uint32]                                     # runtime/autogen/io_uring.py:849
                          socklen_t = ctypes.c_uint32                                                                                                                                                    # runtime/autogen/io_uring.py:852
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:853
                              io_uring_prep_connect = _libraries['FIXME_STUB'].io_uring_prep_connect                                                                                                     # runtime/autogen/io_uring.py:854

                              io_uring_prep_connect.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:855
                              io_uring_prep_connect.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(struct_sockaddr), socklen_t]                                         # runtime/autogen/io_uring.py:856
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:859
                              io_uring_prep_files_update = _libraries['FIXME_STUB'].io_uring_prep_files_update                                                                                           # runtime/autogen/io_uring.py:860

                              io_uring_prep_files_update.restype = None                                                                                                                                  # runtime/autogen/io_uring.py:861
                              io_uring_prep_files_update.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(ctypes.c_int32), ctypes.c_uint32, ctypes.c_int32]                               # runtime/autogen/io_uring.py:862
                          off_t = ctypes.c_int64                                                                                                                                                         # runtime/autogen/io_uring.py:865
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:866
                              io_uring_prep_fallocate = _libraries['FIXME_STUB'].io_uring_prep_fallocate                                                                                                 # runtime/autogen/io_uring.py:867

                              io_uring_prep_fallocate.restype = None                                                                                                                                     # runtime/autogen/io_uring.py:868
                              io_uring_prep_fallocate.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_int32, off_t, off_t]                                                     # runtime/autogen/io_uring.py:869
                          mode_t = ctypes.c_uint32                                                                                                                                                       # runtime/autogen/io_uring.py:872
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:873
                              io_uring_prep_openat = _libraries['FIXME_STUB'].io_uring_prep_openat                                                                                                       # runtime/autogen/io_uring.py:874

                              io_uring_prep_openat.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:875
                              io_uring_prep_openat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, mode_t]                               # runtime/autogen/io_uring.py:876
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:879
                              io_uring_prep_openat_direct = _libraries['FIXME_STUB'].io_uring_prep_openat_direct                                                                                         # runtime/autogen/io_uring.py:880

                              io_uring_prep_openat_direct.restype = None                                                                                                                                 # runtime/autogen/io_uring.py:881
                              io_uring_prep_openat_direct.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, mode_t, ctypes.c_uint32]       # runtime/autogen/io_uring.py:882
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:885
                              io_uring_prep_close = _libraries['FIXME_STUB'].io_uring_prep_close                                                                                                         # runtime/autogen/io_uring.py:886

                              io_uring_prep_close.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:887
                              io_uring_prep_close.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32]                                                                                       # runtime/autogen/io_uring.py:888
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:891
                              io_uring_prep_read = _libraries['FIXME_STUB'].io_uring_prep_read                                                                                                           # runtime/autogen/io_uring.py:892

                              io_uring_prep_read.restype = None                                                                                                                                          # runtime/autogen/io_uring.py:893
                              io_uring_prep_read.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32, __u64]                                          # runtime/autogen/io_uring.py:894
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:897
                              io_uring_prep_write = _libraries['FIXME_STUB'].io_uring_prep_write                                                                                                         # runtime/autogen/io_uring.py:898

                              io_uring_prep_write.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:899
                              io_uring_prep_write.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), ctypes.c_uint32, __u64]                                         # runtime/autogen/io_uring.py:900

                          class struct_statx(Structure):                                                                                                                                                 # runtime/autogen/io_uring.py:903
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:904

                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:906
                              io_uring_prep_statx = _libraries['FIXME_STUB'].io_uring_prep_statx                                                                                                         # runtime/autogen/io_uring.py:907

                              io_uring_prep_statx.restype = None                                                                                                                                         # runtime/autogen/io_uring.py:908
                              io_uring_prep_statx.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_uint32, ctypes.POINTER(struct_statx)] # runtime/autogen/io_uring.py:909
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:912
                              io_uring_prep_fadvise = _libraries['FIXME_STUB'].io_uring_prep_fadvise                                                                                                     # runtime/autogen/io_uring.py:913

                              io_uring_prep_fadvise.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:914
                              io_uring_prep_fadvise.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, __u64, off_t, ctypes.c_int32]                                                       # runtime/autogen/io_uring.py:915
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:918
                              io_uring_prep_madvise = _libraries['FIXME_STUB'].io_uring_prep_madvise                                                                                                     # runtime/autogen/io_uring.py:919

                              io_uring_prep_madvise.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:920
                              io_uring_prep_madvise.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None), off_t, ctypes.c_int32]                                                        # runtime/autogen/io_uring.py:921
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:924
                              io_uring_prep_send = _libraries['FIXME_STUB'].io_uring_prep_send                                                                                                           # runtime/autogen/io_uring.py:925

                              io_uring_prep_send.restype = None                                                                                                                                          # runtime/autogen/io_uring.py:926
                              io_uring_prep_send.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), size_t, ctypes.c_int32]                                          # runtime/autogen/io_uring.py:927
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:930
                              io_uring_prep_recv = _libraries['FIXME_STUB'].io_uring_prep_recv                                                                                                           # runtime/autogen/io_uring.py:931

                              io_uring_prep_recv.restype = None                                                                                                                                          # runtime/autogen/io_uring.py:932
                              io_uring_prep_recv.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(None), size_t, ctypes.c_int32]                                          # runtime/autogen/io_uring.py:933

                          class struct_open_how(Structure):                                                                                                                                              # runtime/autogen/io_uring.py:936
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:937

                          struct_open_how._pack_ = 1 # source:False                                                                                                                                      # runtime/autogen/io_uring.py:939
                          struct_open_how._fields_ = [                                                                                                                                                   # runtime/autogen/io_uring.py:940
                              ('flags', ctypes.c_uint64),
                              ('mode', ctypes.c_uint64),
                              ('resolve', ctypes.c_uint64),
                          ]
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:946
                              io_uring_prep_openat2 = _libraries['FIXME_STUB'].io_uring_prep_openat2                                                                                                     # runtime/autogen/io_uring.py:947

                              io_uring_prep_openat2.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:948
                              io_uring_prep_openat2.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_open_how)]                     # runtime/autogen/io_uring.py:949
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:952
                              io_uring_prep_openat2_direct = _libraries['FIXME_STUB'].io_uring_prep_openat2_direct                                                                                       # runtime/autogen/io_uring.py:953

                              io_uring_prep_openat2_direct.restype = None                                                                                                                                # runtime/autogen/io_uring.py:954
                              io_uring_prep_openat2_direct.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(struct_open_how), ctypes.c_uint32] # runtime/autogen/io_uring.py:955

                          class struct_epoll_event(Structure):                                                                                                                                           # runtime/autogen/io_uring.py:958
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:959

                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:961
                              io_uring_prep_epoll_ctl = _libraries['FIXME_STUB'].io_uring_prep_epoll_ctl                                                                                                 # runtime/autogen/io_uring.py:962

                              io_uring_prep_epoll_ctl.restype = None                                                                                                                                     # runtime/autogen/io_uring.py:963
                              io_uring_prep_epoll_ctl.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.POINTER(struct_epoll_event)]               # runtime/autogen/io_uring.py:964
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:967
                              io_uring_prep_provide_buffers = _libraries['FIXME_STUB'].io_uring_prep_provide_buffers                                                                                     # runtime/autogen/io_uring.py:968

                              io_uring_prep_provide_buffers.restype = None                                                                                                                               # runtime/autogen/io_uring.py:969
                              io_uring_prep_provide_buffers.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(None), ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32]       # runtime/autogen/io_uring.py:970
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:973
                              io_uring_prep_remove_buffers = _libraries['FIXME_STUB'].io_uring_prep_remove_buffers                                                                                       # runtime/autogen/io_uring.py:974

                              io_uring_prep_remove_buffers.restype = None                                                                                                                                # runtime/autogen/io_uring.py:975
                              io_uring_prep_remove_buffers.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_int32]                                                              # runtime/autogen/io_uring.py:976
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:979
                              io_uring_prep_shutdown = _libraries['FIXME_STUB'].io_uring_prep_shutdown                                                                                                   # runtime/autogen/io_uring.py:980

                              io_uring_prep_shutdown.restype = None                                                                                                                                      # runtime/autogen/io_uring.py:981
                              io_uring_prep_shutdown.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_int32]                                                                    # runtime/autogen/io_uring.py:982
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:985
                              io_uring_prep_unlinkat = _libraries['FIXME_STUB'].io_uring_prep_unlinkat                                                                                                   # runtime/autogen/io_uring.py:986

                              io_uring_prep_unlinkat.restype = None                                                                                                                                      # runtime/autogen/io_uring.py:987
                              io_uring_prep_unlinkat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32]                                     # runtime/autogen/io_uring.py:988
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:991
                              io_uring_prep_renameat = _libraries['FIXME_STUB'].io_uring_prep_renameat                                                                                                   # runtime/autogen/io_uring.py:992

                              io_uring_prep_renameat.restype = None                                                                                                                                      # runtime/autogen/io_uring.py:993
                              io_uring_prep_renameat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32] # runtime/autogen/io_uring.py:994
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:997
                              io_uring_prep_sync_file_range = _libraries['FIXME_STUB'].io_uring_prep_sync_file_range                                                                                     # runtime/autogen/io_uring.py:998

                              io_uring_prep_sync_file_range.restype = None                                                                                                                               # runtime/autogen/io_uring.py:999
                              io_uring_prep_sync_file_range.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.c_uint32, __u64, ctypes.c_int32]                                     # runtime/autogen/io_uring.py:1000
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1003
                              io_uring_prep_mkdirat = _libraries['FIXME_STUB'].io_uring_prep_mkdirat                                                                                                     # runtime/autogen/io_uring.py:1004

                              io_uring_prep_mkdirat.restype = None                                                                                                                                       # runtime/autogen/io_uring.py:1005
                              io_uring_prep_mkdirat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), mode_t]                                              # runtime/autogen/io_uring.py:1006
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1009
                              io_uring_prep_symlinkat = _libraries['FIXME_STUB'].io_uring_prep_symlinkat                                                                                                 # runtime/autogen/io_uring.py:1010

                              io_uring_prep_symlinkat.restype = None                                                                                                                                     # runtime/autogen/io_uring.py:1011
                              io_uring_prep_symlinkat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char)]                     # runtime/autogen/io_uring.py:1012
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1015
                              io_uring_prep_linkat = _libraries['FIXME_STUB'].io_uring_prep_linkat                                                                                                       # runtime/autogen/io_uring.py:1016

                              io_uring_prep_linkat.restype = None                                                                                                                                        # runtime/autogen/io_uring.py:1017
                              io_uring_prep_linkat.argtypes = [ctypes.POINTER(struct_io_uring_sqe), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32] # runtime/autogen/io_uring.py:1018
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1021
                              io_uring_sq_ready = _libraries['FIXME_STUB'].io_uring_sq_ready                                                                                                             # runtime/autogen/io_uring.py:1022

                              io_uring_sq_ready.restype = ctypes.c_uint32                                                                                                                                # runtime/autogen/io_uring.py:1023
                              io_uring_sq_ready.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                             # runtime/autogen/io_uring.py:1024
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1027
                              io_uring_sq_space_left = _libraries['FIXME_STUB'].io_uring_sq_space_left                                                                                                   # runtime/autogen/io_uring.py:1028

                              io_uring_sq_space_left.restype = ctypes.c_uint32                                                                                                                           # runtime/autogen/io_uring.py:1029
                              io_uring_sq_space_left.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                        # runtime/autogen/io_uring.py:1030
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1033
                              io_uring_sqring_wait = _libraries['FIXME_STUB'].io_uring_sqring_wait                                                                                                       # runtime/autogen/io_uring.py:1034

                              io_uring_sqring_wait.restype = ctypes.c_int32                                                                                                                              # runtime/autogen/io_uring.py:1035
                              io_uring_sqring_wait.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                          # runtime/autogen/io_uring.py:1036
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1039
                              io_uring_cq_ready = _libraries['FIXME_STUB'].io_uring_cq_ready                                                                                                             # runtime/autogen/io_uring.py:1040

                              io_uring_cq_ready.restype = ctypes.c_uint32                                                                                                                                # runtime/autogen/io_uring.py:1041
                              io_uring_cq_ready.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                             # runtime/autogen/io_uring.py:1042
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1045
                              io_uring_cq_eventfd_enabled = _libraries['FIXME_STUB'].io_uring_cq_eventfd_enabled                                                                                         # runtime/autogen/io_uring.py:1046

                              io_uring_cq_eventfd_enabled.restype = ctypes.c_bool                                                                                                                        # runtime/autogen/io_uring.py:1047
                              io_uring_cq_eventfd_enabled.argtypes = [ctypes.POINTER(struct_io_uring)]                                                                                                   # runtime/autogen/io_uring.py:1048
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1051
                              io_uring_cq_eventfd_toggle = _libraries['FIXME_STUB'].io_uring_cq_eventfd_toggle                                                                                           # runtime/autogen/io_uring.py:1052

                              io_uring_cq_eventfd_toggle.restype = ctypes.c_int32                                                                                                                        # runtime/autogen/io_uring.py:1053
                              io_uring_cq_eventfd_toggle.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.c_bool]                                                                                     # runtime/autogen/io_uring.py:1054
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1057
                              io_uring_wait_cqe_nr = _libraries['FIXME_STUB'].io_uring_wait_cqe_nr                                                                                                       # runtime/autogen/io_uring.py:1058

                              io_uring_wait_cqe_nr.restype = ctypes.c_int32                                                                                                                              # runtime/autogen/io_uring.py:1059
                              io_uring_wait_cqe_nr.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe)), ctypes.c_uint32]                                    # runtime/autogen/io_uring.py:1060
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1063
                              io_uring_peek_cqe = _libraries['FIXME_STUB'].io_uring_peek_cqe                                                                                                             # runtime/autogen/io_uring.py:1064

                              io_uring_peek_cqe.restype = ctypes.c_int32                                                                                                                                 # runtime/autogen/io_uring.py:1065
                              io_uring_peek_cqe.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe))]                                                        # runtime/autogen/io_uring.py:1066
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1069
                              io_uring_wait_cqe = _libraries['FIXME_STUB'].io_uring_wait_cqe                                                                                                             # runtime/autogen/io_uring.py:1070

                              io_uring_wait_cqe.restype = ctypes.c_int32                                                                                                                                 # runtime/autogen/io_uring.py:1071
                              io_uring_wait_cqe.argtypes = [ctypes.POINTER(struct_io_uring), ctypes.POINTER(ctypes.POINTER(struct_io_uring_cqe))]                                                        # runtime/autogen/io_uring.py:1072
                          ssize_t = ctypes.c_int64                                                                                                                                                       # runtime/autogen/io_uring.py:1075
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1076
                              io_uring_mlock_size = _libraries['FIXME_STUB'].io_uring_mlock_size                                                                                                         # runtime/autogen/io_uring.py:1077

                              io_uring_mlock_size.restype = ssize_t                                                                                                                                      # runtime/autogen/io_uring.py:1078
                              io_uring_mlock_size.argtypes = [ctypes.c_uint32, ctypes.c_uint32]                                                                                                          # runtime/autogen/io_uring.py:1079
                          try:                                                                                                                                                                           # runtime/autogen/io_uring.py:1082
                              io_uring_mlock_size_params = _libraries['FIXME_STUB'].io_uring_mlock_size_params                                                                                           # runtime/autogen/io_uring.py:1083

                              io_uring_mlock_size_params.restype = ssize_t                                                                                                                               # runtime/autogen/io_uring.py:1084
                              io_uring_mlock_size_params.argtypes = [ctypes.c_uint32, ctypes.POINTER(struct_io_uring_params)]                                                                            # runtime/autogen/io_uring.py:1085
                          c__Ea_IOSQE_FIXED_FILE_BIT__enumvalues = {                                                                                                                                     # runtime/autogen/io_uring.py:1090
                              0: 'IOSQE_FIXED_FILE_BIT',
                              1: 'IOSQE_IO_DRAIN_BIT',
                              2: 'IOSQE_IO_LINK_BIT',
                              3: 'IOSQE_IO_HARDLINK_BIT',
                              4: 'IOSQE_ASYNC_BIT',
                              5: 'IOSQE_BUFFER_SELECT_BIT',
                          }
                          IOSQE_FIXED_FILE_BIT = 0                                                                                                                                                       # runtime/autogen/io_uring.py:1098
                          IOSQE_IO_DRAIN_BIT = 1                                                                                                                                                         # runtime/autogen/io_uring.py:1099
                          IOSQE_IO_LINK_BIT = 2                                                                                                                                                          # runtime/autogen/io_uring.py:1100
                          IOSQE_IO_HARDLINK_BIT = 3                                                                                                                                                      # runtime/autogen/io_uring.py:1101
                          IOSQE_ASYNC_BIT = 4                                                                                                                                                            # runtime/autogen/io_uring.py:1102
                          IOSQE_BUFFER_SELECT_BIT = 5                                                                                                                                                    # runtime/autogen/io_uring.py:1103
                          c__Ea_IOSQE_FIXED_FILE_BIT = ctypes.c_uint32 # enum                                                                                                                            # runtime/autogen/io_uring.py:1104
                          c__Ea_IORING_OP_NOP__enumvalues = {                                                                                                                                            # runtime/autogen/io_uring.py:1107
                              0: 'IORING_OP_NOP',
                              1: 'IORING_OP_READV',
                              2: 'IORING_OP_WRITEV',
                              3: 'IORING_OP_FSYNC',
                              4: 'IORING_OP_READ_FIXED',
                              5: 'IORING_OP_WRITE_FIXED',
                              6: 'IORING_OP_POLL_ADD',
                              7: 'IORING_OP_POLL_REMOVE',
                              8: 'IORING_OP_SYNC_FILE_RANGE',
                              9: 'IORING_OP_SENDMSG',
                              10: 'IORING_OP_RECVMSG',
                              11: 'IORING_OP_TIMEOUT',
                              12: 'IORING_OP_TIMEOUT_REMOVE',
                              13: 'IORING_OP_ACCEPT',
                              14: 'IORING_OP_ASYNC_CANCEL',
                              15: 'IORING_OP_LINK_TIMEOUT',
                              16: 'IORING_OP_CONNECT',
                              17: 'IORING_OP_FALLOCATE',
                              18: 'IORING_OP_OPENAT',
                              19: 'IORING_OP_CLOSE',
                              20: 'IORING_OP_FILES_UPDATE',
                              21: 'IORING_OP_STATX',
                              22: 'IORING_OP_READ',
                              23: 'IORING_OP_WRITE',
                              24: 'IORING_OP_FADVISE',
                              25: 'IORING_OP_MADVISE',
                              26: 'IORING_OP_SEND',
                              27: 'IORING_OP_RECV',
                              28: 'IORING_OP_OPENAT2',
                              29: 'IORING_OP_EPOLL_CTL',
                              30: 'IORING_OP_SPLICE',
                              31: 'IORING_OP_PROVIDE_BUFFERS',
                              32: 'IORING_OP_REMOVE_BUFFERS',
                              33: 'IORING_OP_TEE',
                              34: 'IORING_OP_SHUTDOWN',
                              35: 'IORING_OP_RENAMEAT',
                              36: 'IORING_OP_UNLINKAT',
                              37: 'IORING_OP_MKDIRAT',
                              38: 'IORING_OP_SYMLINKAT',
                              39: 'IORING_OP_LINKAT',
                              40: 'IORING_OP_LAST',
                          }
                          IORING_OP_NOP = 0                                                                                                                                                              # runtime/autogen/io_uring.py:1150
                          IORING_OP_READV = 1                                                                                                                                                            # runtime/autogen/io_uring.py:1151
                          IORING_OP_WRITEV = 2                                                                                                                                                           # runtime/autogen/io_uring.py:1152
                          IORING_OP_FSYNC = 3                                                                                                                                                            # runtime/autogen/io_uring.py:1153
                          IORING_OP_READ_FIXED = 4                                                                                                                                                       # runtime/autogen/io_uring.py:1154
                          IORING_OP_WRITE_FIXED = 5                                                                                                                                                      # runtime/autogen/io_uring.py:1155
                          IORING_OP_POLL_ADD = 6                                                                                                                                                         # runtime/autogen/io_uring.py:1156
                          IORING_OP_POLL_REMOVE = 7                                                                                                                                                      # runtime/autogen/io_uring.py:1157
                          IORING_OP_SYNC_FILE_RANGE = 8                                                                                                                                                  # runtime/autogen/io_uring.py:1158
                          IORING_OP_SENDMSG = 9                                                                                                                                                          # runtime/autogen/io_uring.py:1159
                          IORING_OP_RECVMSG = 10                                                                                                                                                         # runtime/autogen/io_uring.py:1160
                          IORING_OP_TIMEOUT = 11                                                                                                                                                         # runtime/autogen/io_uring.py:1161
                          IORING_OP_TIMEOUT_REMOVE = 12                                                                                                                                                  # runtime/autogen/io_uring.py:1162
                          IORING_OP_ACCEPT = 13                                                                                                                                                          # runtime/autogen/io_uring.py:1163
                          IORING_OP_ASYNC_CANCEL = 14                                                                                                                                                    # runtime/autogen/io_uring.py:1164
                          IORING_OP_LINK_TIMEOUT = 15                                                                                                                                                    # runtime/autogen/io_uring.py:1165
                          IORING_OP_CONNECT = 16                                                                                                                                                         # runtime/autogen/io_uring.py:1166
                          IORING_OP_FALLOCATE = 17                                                                                                                                                       # runtime/autogen/io_uring.py:1167
                          IORING_OP_OPENAT = 18                                                                                                                                                          # runtime/autogen/io_uring.py:1168
                          IORING_OP_CLOSE = 19                                                                                                                                                           # runtime/autogen/io_uring.py:1169
                          IORING_OP_FILES_UPDATE = 20                                                                                                                                                    # runtime/autogen/io_uring.py:1170
                          IORING_OP_STATX = 21                                                                                                                                                           # runtime/autogen/io_uring.py:1171
                          IORING_OP_READ = 22                                                                                                                                                            # runtime/autogen/io_uring.py:1172
                          IORING_OP_WRITE = 23                                                                                                                                                           # runtime/autogen/io_uring.py:1173
                          IORING_OP_FADVISE = 24                                                                                                                                                         # runtime/autogen/io_uring.py:1174
                          IORING_OP_MADVISE = 25                                                                                                                                                         # runtime/autogen/io_uring.py:1175
                          IORING_OP_SEND = 26                                                                                                                                                            # runtime/autogen/io_uring.py:1176
                          IORING_OP_RECV = 27                                                                                                                                                            # runtime/autogen/io_uring.py:1177
                          IORING_OP_OPENAT2 = 28                                                                                                                                                         # runtime/autogen/io_uring.py:1178
                          IORING_OP_EPOLL_CTL = 29                                                                                                                                                       # runtime/autogen/io_uring.py:1179
                          IORING_OP_SPLICE = 30                                                                                                                                                          # runtime/autogen/io_uring.py:1180
                          IORING_OP_PROVIDE_BUFFERS = 31                                                                                                                                                 # runtime/autogen/io_uring.py:1181
                          IORING_OP_REMOVE_BUFFERS = 32                                                                                                                                                  # runtime/autogen/io_uring.py:1182
                          IORING_OP_TEE = 33                                                                                                                                                             # runtime/autogen/io_uring.py:1183
                          IORING_OP_SHUTDOWN = 34                                                                                                                                                        # runtime/autogen/io_uring.py:1184
                          IORING_OP_RENAMEAT = 35                                                                                                                                                        # runtime/autogen/io_uring.py:1185
                          IORING_OP_UNLINKAT = 36                                                                                                                                                        # runtime/autogen/io_uring.py:1186
                          IORING_OP_MKDIRAT = 37                                                                                                                                                         # runtime/autogen/io_uring.py:1187
                          IORING_OP_SYMLINKAT = 38                                                                                                                                                       # runtime/autogen/io_uring.py:1188
                          IORING_OP_LINKAT = 39                                                                                                                                                          # runtime/autogen/io_uring.py:1189
                          IORING_OP_LAST = 40                                                                                                                                                            # runtime/autogen/io_uring.py:1190
                          c__Ea_IORING_OP_NOP = ctypes.c_uint32 # enum                                                                                                                                   # runtime/autogen/io_uring.py:1191
                          c__Ea_IORING_CQE_BUFFER_SHIFT__enumvalues = {                                                                                                                                  # runtime/autogen/io_uring.py:1194
                              16: 'IORING_CQE_BUFFER_SHIFT',
                          }
                          IORING_CQE_BUFFER_SHIFT = 16                                                                                                                                                   # runtime/autogen/io_uring.py:1197
                          c__Ea_IORING_CQE_BUFFER_SHIFT = ctypes.c_uint32 # enum                                                                                                                         # runtime/autogen/io_uring.py:1198
                          c__Ea_IORING_REGISTER_BUFFERS__enumvalues = {                                                                                                                                  # runtime/autogen/io_uring.py:1201
                              0: 'IORING_REGISTER_BUFFERS',
                              1: 'IORING_UNREGISTER_BUFFERS',
                              2: 'IORING_REGISTER_FILES',
                              3: 'IORING_UNREGISTER_FILES',
                              4: 'IORING_REGISTER_EVENTFD',
                              5: 'IORING_UNREGISTER_EVENTFD',
                              6: 'IORING_REGISTER_FILES_UPDATE',
                              7: 'IORING_REGISTER_EVENTFD_ASYNC',
                              8: 'IORING_REGISTER_PROBE',
                              9: 'IORING_REGISTER_PERSONALITY',
                              10: 'IORING_UNREGISTER_PERSONALITY',
                              11: 'IORING_REGISTER_RESTRICTIONS',
                              12: 'IORING_REGISTER_ENABLE_RINGS',
                              13: 'IORING_REGISTER_FILES2',
                              14: 'IORING_REGISTER_FILES_UPDATE2',
                              15: 'IORING_REGISTER_BUFFERS2',
                              16: 'IORING_REGISTER_BUFFERS_UPDATE',
                              17: 'IORING_REGISTER_IOWQ_AFF',
                              18: 'IORING_UNREGISTER_IOWQ_AFF',
                              19: 'IORING_REGISTER_IOWQ_MAX_WORKERS',
                              20: 'IORING_REGISTER_LAST',
                          }
                          IORING_REGISTER_BUFFERS = 0                                                                                                                                                    # runtime/autogen/io_uring.py:1224
                          IORING_UNREGISTER_BUFFERS = 1                                                                                                                                                  # runtime/autogen/io_uring.py:1225
                          IORING_REGISTER_FILES = 2                                                                                                                                                      # runtime/autogen/io_uring.py:1226
                          IORING_UNREGISTER_FILES = 3                                                                                                                                                    # runtime/autogen/io_uring.py:1227
                          IORING_REGISTER_EVENTFD = 4                                                                                                                                                    # runtime/autogen/io_uring.py:1228
                          IORING_UNREGISTER_EVENTFD = 5                                                                                                                                                  # runtime/autogen/io_uring.py:1229
                          IORING_REGISTER_FILES_UPDATE = 6                                                                                                                                               # runtime/autogen/io_uring.py:1230
                          IORING_REGISTER_EVENTFD_ASYNC = 7                                                                                                                                              # runtime/autogen/io_uring.py:1231
                          IORING_REGISTER_PROBE = 8                                                                                                                                                      # runtime/autogen/io_uring.py:1232
                          IORING_REGISTER_PERSONALITY = 9                                                                                                                                                # runtime/autogen/io_uring.py:1233
                          IORING_UNREGISTER_PERSONALITY = 10                                                                                                                                             # runtime/autogen/io_uring.py:1234
                          IORING_REGISTER_RESTRICTIONS = 11                                                                                                                                              # runtime/autogen/io_uring.py:1235
                          IORING_REGISTER_ENABLE_RINGS = 12                                                                                                                                              # runtime/autogen/io_uring.py:1236
                          IORING_REGISTER_FILES2 = 13                                                                                                                                                    # runtime/autogen/io_uring.py:1237
                          IORING_REGISTER_FILES_UPDATE2 = 14                                                                                                                                             # runtime/autogen/io_uring.py:1238
                          IORING_REGISTER_BUFFERS2 = 15                                                                                                                                                  # runtime/autogen/io_uring.py:1239
                          IORING_REGISTER_BUFFERS_UPDATE = 16                                                                                                                                            # runtime/autogen/io_uring.py:1240
                          IORING_REGISTER_IOWQ_AFF = 17                                                                                                                                                  # runtime/autogen/io_uring.py:1241
                          IORING_UNREGISTER_IOWQ_AFF = 18                                                                                                                                                # runtime/autogen/io_uring.py:1242
                          IORING_REGISTER_IOWQ_MAX_WORKERS = 19                                                                                                                                          # runtime/autogen/io_uring.py:1243
                          IORING_REGISTER_LAST = 20                                                                                                                                                      # runtime/autogen/io_uring.py:1244
                          c__Ea_IORING_REGISTER_BUFFERS = ctypes.c_uint32 # enum                                                                                                                         # runtime/autogen/io_uring.py:1245
                          c__Ea_IO_WQ_BOUND__enumvalues = {                                                                                                                                              # runtime/autogen/io_uring.py:1248
                              0: 'IO_WQ_BOUND',
                              1: 'IO_WQ_UNBOUND',
                          }
                          IO_WQ_BOUND = 0                                                                                                                                                                # runtime/autogen/io_uring.py:1252
                          IO_WQ_UNBOUND = 1                                                                                                                                                              # runtime/autogen/io_uring.py:1253
                          c__Ea_IO_WQ_BOUND = ctypes.c_uint32 # enum                                                                                                                                     # runtime/autogen/io_uring.py:1254

                          class struct_io_uring_files_update(Structure):                                                                                                                                 # runtime/autogen/io_uring.py:1255
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:1256

                          struct_io_uring_files_update._pack_ = 1 # source:False                                                                                                                         # runtime/autogen/io_uring.py:1258
                          struct_io_uring_files_update._fields_ = [                                                                                                                                      # runtime/autogen/io_uring.py:1259
                              ('offset', ctypes.c_uint32),
                              ('resv', ctypes.c_uint32),
                              ('fds', ctypes.c_uint64),
                          ]

                          class struct_io_uring_rsrc_register(Structure):                                                                                                                                # runtime/autogen/io_uring.py:1265
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:1266

                          struct_io_uring_rsrc_register._pack_ = 1 # source:False                                                                                                                        # runtime/autogen/io_uring.py:1268
                          struct_io_uring_rsrc_register._fields_ = [                                                                                                                                     # runtime/autogen/io_uring.py:1269
                              ('nr', ctypes.c_uint32),
                              ('resv', ctypes.c_uint32),
                              ('resv2', ctypes.c_uint64),
                              ('data', ctypes.c_uint64),
                              ('tags', ctypes.c_uint64),
                          ]

                          class struct_io_uring_rsrc_update(Structure):                                                                                                                                  # runtime/autogen/io_uring.py:1277
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:1278

                          struct_io_uring_rsrc_update._pack_ = 1 # source:False                                                                                                                          # runtime/autogen/io_uring.py:1280
                          struct_io_uring_rsrc_update._fields_ = [                                                                                                                                       # runtime/autogen/io_uring.py:1281
                              ('offset', ctypes.c_uint32),
                              ('resv', ctypes.c_uint32),
                              ('data', ctypes.c_uint64),
                          ]

                          class struct_io_uring_rsrc_update2(Structure):                                                                                                                                 # runtime/autogen/io_uring.py:1287
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:1288

                          struct_io_uring_rsrc_update2._pack_ = 1 # source:False                                                                                                                         # runtime/autogen/io_uring.py:1290
                          struct_io_uring_rsrc_update2._fields_ = [                                                                                                                                      # runtime/autogen/io_uring.py:1291
                              ('offset', ctypes.c_uint32),
                              ('resv', ctypes.c_uint32),
                              ('data', ctypes.c_uint64),
                              ('tags', ctypes.c_uint64),
                              ('nr', ctypes.c_uint32),
                              ('resv2', ctypes.c_uint32),
                          ]
                          c__Ea_IORING_RESTRICTION_REGISTER_OP__enumvalues = {                                                                                                                           # runtime/autogen/io_uring.py:1302
                              0: 'IORING_RESTRICTION_REGISTER_OP',
                              1: 'IORING_RESTRICTION_SQE_OP',
                              2: 'IORING_RESTRICTION_SQE_FLAGS_ALLOWED',
                              3: 'IORING_RESTRICTION_SQE_FLAGS_REQUIRED',
                              4: 'IORING_RESTRICTION_LAST',
                          }
                          IORING_RESTRICTION_REGISTER_OP = 0                                                                                                                                             # runtime/autogen/io_uring.py:1309
                          IORING_RESTRICTION_SQE_OP = 1                                                                                                                                                  # runtime/autogen/io_uring.py:1310
                          IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2                                                                                                                                       # runtime/autogen/io_uring.py:1311
                          IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3                                                                                                                                      # runtime/autogen/io_uring.py:1312
                          IORING_RESTRICTION_LAST = 4                                                                                                                                                    # runtime/autogen/io_uring.py:1313
                          c__Ea_IORING_RESTRICTION_REGISTER_OP = ctypes.c_uint32 # enum                                                                                                                  # runtime/autogen/io_uring.py:1314

                          class struct_io_uring_getevents_arg(Structure):                                                                                                                                # runtime/autogen/io_uring.py:1315
                              pass                                                                                                                                                                       # runtime/autogen/io_uring.py:1316

                          struct_io_uring_getevents_arg._pack_ = 1 # source:False                                                                                                                        # runtime/autogen/io_uring.py:1318
                          struct_io_uring_getevents_arg._fields_ = [                                                                                                                                     # runtime/autogen/io_uring.py:1319
                              ('sigmask', ctypes.c_uint64),
                              ('sigmask_sz', ctypes.c_uint32),
                              ('pad', ctypes.c_uint32),
                              ('ts', ctypes.c_uint64),
                          ]
                          __all__ = \                                                                                                                                                                    # runtime/autogen/io_uring.py:1326
                              ['IORING_CQE_BUFFER_SHIFT', 'IORING_OP_ACCEPT',
                              'IORING_OP_ASYNC_CANCEL', 'IORING_OP_CLOSE', 'IORING_OP_CONNECT',
                              'IORING_OP_EPOLL_CTL', 'IORING_OP_FADVISE', 'IORING_OP_FALLOCATE',
                              'IORING_OP_FILES_UPDATE', 'IORING_OP_FSYNC', 'IORING_OP_LAST',
                              'IORING_OP_LINKAT', 'IORING_OP_LINK_TIMEOUT', 'IORING_OP_MADVISE',
                              'IORING_OP_MKDIRAT', 'IORING_OP_NOP', 'IORING_OP_OPENAT',
                              'IORING_OP_OPENAT2', 'IORING_OP_POLL_ADD',
                              'IORING_OP_POLL_REMOVE', 'IORING_OP_PROVIDE_BUFFERS',
                              'IORING_OP_READ', 'IORING_OP_READV', 'IORING_OP_READ_FIXED',
                              'IORING_OP_RECV', 'IORING_OP_RECVMSG', 'IORING_OP_REMOVE_BUFFERS',
                              'IORING_OP_RENAMEAT', 'IORING_OP_SEND', 'IORING_OP_SENDMSG',
                              'IORING_OP_SHUTDOWN', 'IORING_OP_SPLICE', 'IORING_OP_STATX',
                              'IORING_OP_SYMLINKAT', 'IORING_OP_SYNC_FILE_RANGE',
                              'IORING_OP_TEE', 'IORING_OP_TIMEOUT', 'IORING_OP_TIMEOUT_REMOVE',
                              'IORING_OP_UNLINKAT', 'IORING_OP_WRITE', 'IORING_OP_WRITEV',
                              'IORING_OP_WRITE_FIXED', 'IORING_REGISTER_BUFFERS',
                              'IORING_REGISTER_BUFFERS2', 'IORING_REGISTER_BUFFERS_UPDATE',
                              'IORING_REGISTER_ENABLE_RINGS', 'IORING_REGISTER_EVENTFD',
                              'IORING_REGISTER_EVENTFD_ASYNC', 'IORING_REGISTER_FILES',
                              'IORING_REGISTER_FILES2', 'IORING_REGISTER_FILES_UPDATE',
                              'IORING_REGISTER_FILES_UPDATE2', 'IORING_REGISTER_IOWQ_AFF',
                              'IORING_REGISTER_IOWQ_MAX_WORKERS', 'IORING_REGISTER_LAST',
                              'IORING_REGISTER_PERSONALITY', 'IORING_REGISTER_PROBE',
                              'IORING_REGISTER_RESTRICTIONS', 'IORING_RESTRICTION_LAST',
                              'IORING_RESTRICTION_REGISTER_OP',
                              'IORING_RESTRICTION_SQE_FLAGS_ALLOWED',
                              'IORING_RESTRICTION_SQE_FLAGS_REQUIRED',
                              'IORING_RESTRICTION_SQE_OP', 'IORING_UNREGISTER_BUFFERS',
                              'IORING_UNREGISTER_EVENTFD', 'IORING_UNREGISTER_FILES',
                              'IORING_UNREGISTER_IOWQ_AFF', 'IORING_UNREGISTER_PERSONALITY',
                              'IOSQE_ASYNC_BIT', 'IOSQE_BUFFER_SELECT_BIT',
                              'IOSQE_FIXED_FILE_BIT', 'IOSQE_IO_DRAIN_BIT',
                              'IOSQE_IO_HARDLINK_BIT', 'IOSQE_IO_LINK_BIT', 'IO_WQ_BOUND',
                              'IO_WQ_UNBOUND', '__io_uring_get_cqe',
                              '__io_uring_prep_poll_mask', '__io_uring_set_target_fixed_file',
                              '__io_uring_sqring_wait', '__u64',
                              'c__Ea_IORING_CQE_BUFFER_SHIFT', 'c__Ea_IORING_OP_NOP',
                              'c__Ea_IORING_REGISTER_BUFFERS',
                              'c__Ea_IORING_RESTRICTION_REGISTER_OP',
                              'c__Ea_IOSQE_FIXED_FILE_BIT', 'c__Ea_IO_WQ_BOUND', 'int64_t',
                              'io_uring_cq_advance', 'io_uring_cq_eventfd_enabled',
                              'io_uring_cq_eventfd_toggle', 'io_uring_cq_ready',
                              'io_uring_cqe_get_data', 'io_uring_cqe_seen',
                              'io_uring_enable_rings', 'io_uring_free_probe',
                              'io_uring_get_probe', 'io_uring_get_probe_ring',
                              'io_uring_get_sqe', 'io_uring_mlock_size',
                              'io_uring_mlock_size_params', 'io_uring_opcode_supported',
                              'io_uring_peek_batch_cqe', 'io_uring_peek_cqe',
                              'io_uring_prep_accept', 'io_uring_prep_accept_direct',
                              'io_uring_prep_cancel', 'io_uring_prep_close',
                              'io_uring_prep_connect', 'io_uring_prep_epoll_ctl',
                              'io_uring_prep_fadvise', 'io_uring_prep_fallocate',
                              'io_uring_prep_files_update', 'io_uring_prep_fsync',
                              'io_uring_prep_link_timeout', 'io_uring_prep_linkat',
                              'io_uring_prep_madvise', 'io_uring_prep_mkdirat',
                              'io_uring_prep_nop', 'io_uring_prep_openat',
                              'io_uring_prep_openat2', 'io_uring_prep_openat2_direct',
                              'io_uring_prep_openat_direct', 'io_uring_prep_poll_add',
                              'io_uring_prep_poll_multishot', 'io_uring_prep_poll_remove',
                              'io_uring_prep_poll_update', 'io_uring_prep_provide_buffers',
                              'io_uring_prep_read', 'io_uring_prep_read_fixed',
                              'io_uring_prep_readv', 'io_uring_prep_recv',
                              'io_uring_prep_recvmsg', 'io_uring_prep_remove_buffers',
                              'io_uring_prep_renameat', 'io_uring_prep_rw',
                              'io_uring_prep_send', 'io_uring_prep_sendmsg',
                              'io_uring_prep_shutdown', 'io_uring_prep_splice',
                              'io_uring_prep_statx', 'io_uring_prep_symlinkat',
                              'io_uring_prep_sync_file_range', 'io_uring_prep_tee',
                              'io_uring_prep_timeout', 'io_uring_prep_timeout_remove',
                              'io_uring_prep_timeout_update', 'io_uring_prep_unlinkat',
                              'io_uring_prep_write', 'io_uring_prep_write_fixed',
                              'io_uring_prep_writev', 'io_uring_queue_exit',
                              'io_uring_queue_init', 'io_uring_queue_init_params',
                              'io_uring_queue_mmap', 'io_uring_register_buffers',
                              'io_uring_register_buffers_tags',
                              'io_uring_register_buffers_update_tag',
                              'io_uring_register_eventfd', 'io_uring_register_eventfd_async',
                              'io_uring_register_files', 'io_uring_register_files_tags',
                              'io_uring_register_files_update',
                              'io_uring_register_files_update_tag',
                              'io_uring_register_iowq_aff',
                              'io_uring_register_iowq_max_workers',
                              'io_uring_register_personality', 'io_uring_register_probe',
                              'io_uring_register_restrictions', 'io_uring_ring_dontfork',
                              'io_uring_sq_ready', 'io_uring_sq_space_left',
                              'io_uring_sqe_set_data', 'io_uring_sqe_set_flags',
                              'io_uring_sqring_wait', 'io_uring_submit',
                              'io_uring_submit_and_wait', 'io_uring_unregister_buffers',
                              'io_uring_unregister_eventfd', 'io_uring_unregister_files',
                              'io_uring_unregister_iowq_aff', 'io_uring_unregister_personality',
                              'io_uring_wait_cqe', 'io_uring_wait_cqe_nr',
                              'io_uring_wait_cqe_timeout', 'io_uring_wait_cqes', 'mode_t',
                              'off_t', 'size_t', 'socklen_t', 'ssize_t',
                              'struct___kernel_timespec', 'struct_c__SA___sigset_t',
                              'struct_c__SA_cpu_set_t', 'struct_epoll_event',
                              'struct_io_cqring_offsets', 'struct_io_sqring_offsets',
                              'struct_io_uring', 'struct_io_uring_cq', 'struct_io_uring_cqe',
                              'struct_io_uring_files_update', 'struct_io_uring_getevents_arg',
                              'struct_io_uring_params', 'struct_io_uring_probe',
                              'struct_io_uring_probe_op', 'struct_io_uring_restriction',
                              'struct_io_uring_rsrc_register', 'struct_io_uring_rsrc_update',
                              'struct_io_uring_rsrc_update2', 'struct_io_uring_sq',
                              'struct_io_uring_sqe', 'struct_iovec', 'struct_msghdr',
                              'struct_open_how', 'struct_sockaddr', 'struct_statx',
                              'union_io_uring_restriction_0', 'union_io_uring_sqe_0',
                              'union_io_uring_sqe_1', 'union_io_uring_sqe_2',
                              'union_io_uring_sqe_3', 'union_io_uring_sqe_4']
                          NR_io_uring_setup = 425                                                                                                                                                        # runtime/autogen/io_uring.py:1434
                          NR_io_uring_enter = 426                                                                                                                                                        # runtime/autogen/io_uring.py:1435
                          NR_io_uring_register = 427                                                                                                                                                     # runtime/autogen/io_uring.py:1436
                          IOSQE_FIXED_FILE = (1 << IOSQE_FIXED_FILE_BIT)                                                                                                                                 # runtime/autogen/io_uring.py:1437
                          IOSQE_IO_DRAIN = (1 << IOSQE_IO_DRAIN_BIT)                                                                                                                                     # runtime/autogen/io_uring.py:1438
                          IOSQE_IO_LINK = (1 << IOSQE_IO_LINK_BIT)                                                                                                                                       # runtime/autogen/io_uring.py:1439
                          IOSQE_IO_HARDLINK = (1 << IOSQE_IO_HARDLINK_BIT)                                                                                                                               # runtime/autogen/io_uring.py:1440
                          IOSQE_ASYNC = (1 << IOSQE_ASYNC_BIT)                                                                                                                                           # runtime/autogen/io_uring.py:1441
                          IOSQE_BUFFER_SELECT = (1 << IOSQE_BUFFER_SELECT_BIT)                                                                                                                           # runtime/autogen/io_uring.py:1442
                          IORING_SETUP_IOPOLL = (1 << 0)                                                                                                                                                 # runtime/autogen/io_uring.py:1443
                          IORING_SETUP_SQPOLL = (1 << 1)                                                                                                                                                 # runtime/autogen/io_uring.py:1444
                          IORING_SETUP_SQ_AFF = (1 << 2)                                                                                                                                                 # runtime/autogen/io_uring.py:1445
                          IORING_SETUP_CQSIZE = (1 << 3)                                                                                                                                                 # runtime/autogen/io_uring.py:1446
                          IORING_SETUP_CLAMP = (1 << 4)                                                                                                                                                  # runtime/autogen/io_uring.py:1447
                          IORING_SETUP_ATTACH_WQ = (1 << 5)                                                                                                                                              # runtime/autogen/io_uring.py:1448
                          IORING_SETUP_R_DISABLED = (1 << 6)                                                                                                                                             # runtime/autogen/io_uring.py:1449
                          IORING_FSYNC_DATASYNC = (1 << 0)                                                                                                                                               # runtime/autogen/io_uring.py:1450
                          IORING_TIMEOUT_ABS = (1 << 0)                                                                                                                                                  # runtime/autogen/io_uring.py:1451
                          IORING_TIMEOUT_UPDATE = (1 << 1)                                                                                                                                               # runtime/autogen/io_uring.py:1452
                          IORING_TIMEOUT_BOOTTIME = (1 << 2)                                                                                                                                             # runtime/autogen/io_uring.py:1453
                          IORING_TIMEOUT_REALTIME = (1 << 3)                                                                                                                                             # runtime/autogen/io_uring.py:1454
                          IORING_LINK_TIMEOUT_UPDATE = (1 << 4)                                                                                                                                          # runtime/autogen/io_uring.py:1455
                          IORING_TIMEOUT_CLOCK_MASK = (IORING_TIMEOUT_BOOTTIME | IORING_TIMEOUT_REALTIME)                                                                                                # runtime/autogen/io_uring.py:1456
                          IORING_TIMEOUT_UPDATE_MASK = (IORING_TIMEOUT_UPDATE | IORING_LINK_TIMEOUT_UPDATE)                                                                                              # runtime/autogen/io_uring.py:1457
                          SPLICE_F_FD_IN_FIXED = (1 << 31)                                                                                                                                               # runtime/autogen/io_uring.py:1458
                          IORING_POLL_ADD_MULTI = (1 << 0)                                                                                                                                               # runtime/autogen/io_uring.py:1459
                          IORING_POLL_UPDATE_EVENTS = (1 << 1)                                                                                                                                           # runtime/autogen/io_uring.py:1460
                          IORING_POLL_UPDATE_USER_DATA = (1 << 2)                                                                                                                                        # runtime/autogen/io_uring.py:1461
                          IORING_CQE_F_BUFFER = (1 << 0)                                                                                                                                                 # runtime/autogen/io_uring.py:1462
                          IORING_CQE_F_MORE = (1 << 1)                                                                                                                                                   # runtime/autogen/io_uring.py:1463
                          IORING_OFF_SQ_RING = 0                                                                                                                                                         # runtime/autogen/io_uring.py:1464
                          IORING_OFF_CQ_RING = 0x8000000                                                                                                                                                 # runtime/autogen/io_uring.py:1465
                          IORING_OFF_SQES = 0x10000000                                                                                                                                                   # runtime/autogen/io_uring.py:1466
                          IORING_SQ_NEED_WAKEUP = (1 << 0)                                                                                                                                               # runtime/autogen/io_uring.py:1467
                          IORING_SQ_CQ_OVERFLOW = (1 << 1)                                                                                                                                               # runtime/autogen/io_uring.py:1468
                          IORING_CQ_EVENTFD_DISABLED = (1 << 0)                                                                                                                                          # runtime/autogen/io_uring.py:1469
                          IORING_ENTER_GETEVENTS = (1 << 0)                                                                                                                                              # runtime/autogen/io_uring.py:1470
                          IORING_ENTER_SQ_WAKEUP = (1 << 1)                                                                                                                                              # runtime/autogen/io_uring.py:1471
                          IORING_ENTER_SQ_WAIT = (1 << 2)                                                                                                                                                # runtime/autogen/io_uring.py:1472
                          IORING_ENTER_EXT_ARG = (1 << 3)                                                                                                                                                # runtime/autogen/io_uring.py:1473
                          IORING_FEAT_SINGLE_MMAP = (1 << 0)                                                                                                                                             # runtime/autogen/io_uring.py:1474
                          IORING_FEAT_NODROP = (1 << 1)                                                                                                                                                  # runtime/autogen/io_uring.py:1475
                          IORING_FEAT_SUBMIT_STABLE = (1 << 2)                                                                                                                                           # runtime/autogen/io_uring.py:1476
                          IORING_FEAT_RW_CUR_POS = (1 << 3)                                                                                                                                              # runtime/autogen/io_uring.py:1477
                          IORING_FEAT_CUR_PERSONALITY = (1 << 4)                                                                                                                                         # runtime/autogen/io_uring.py:1478
                          IORING_FEAT_FAST_POLL = (1 << 5)                                                                                                                                               # runtime/autogen/io_uring.py:1479
                          IORING_FEAT_POLL_32BITS = (1 << 6)                                                                                                                                             # runtime/autogen/io_uring.py:1480
                          IORING_FEAT_SQPOLL_NONFIXED = (1 << 7)                                                                                                                                         # runtime/autogen/io_uring.py:1481
                          IORING_FEAT_EXT_ARG = (1 << 8)                                                                                                                                                 # runtime/autogen/io_uring.py:1482
                          IORING_FEAT_NATIVE_WORKERS = (1 << 9)                                                                                                                                          # runtime/autogen/io_uring.py:1483
                          IORING_FEAT_RSRC_TAGS = (1 << 10)                                                                                                                                              # runtime/autogen/io_uring.py:1484
                          IORING_REGISTER_FILES_SKIP = (-2)                                                                                                                                              # runtime/autogen/io_uring.py:1485
                          IO_URING_OP_SUPPORTED = (1 << 0)                                                                                                                                               # runtime/autogen/io_uring.py:1486
                          import ctypes, ctypes.util, os                                                                                                                                                 # runtime/autogen/libc.py:9
                          c_int128 = ctypes.c_ubyte*16                                                                                                                                                   # runtime/autogen/libc.py:12
                          c_uint128 = c_int128                                                                                                                                                           # runtime/autogen/libc.py:13
                          void = None                                                                                                                                                                    # runtime/autogen/libc.py:14
                          if ctypes.sizeof(ctypes.c_longdouble) == 16:                                                                                                                                   # runtime/autogen/libc.py:15
                              c_long_double_t = ctypes.c_longdouble                                                                                                                                      # runtime/autogen/libc.py:16

                          _libraries = {}                                                                                                                                                                # runtime/autogen/libc.py:29
                          _libraries['libc'] = ctypes.CDLL(ctypes.util.find_library('c')) #  ctypes.CDLL('libc')                                                                                         # runtime/autogen/libc.py:30

                          class Union(ctypes.Union, AsDictMixin):                                                                                                                                        # runtime/autogen/libc.py:153
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:154

                          off_t = ctypes.c_int64                                                                                                                                                         # runtime/autogen/libc.py:160
                          mode_t = ctypes.c_uint32                                                                                                                                                       # runtime/autogen/libc.py:161
                          size_t = ctypes.c_uint64                                                                                                                                                       # runtime/autogen/libc.py:162
                          __off_t = ctypes.c_int64                                                                                                                                                       # runtime/autogen/libc.py:163
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:164
                              mmap = _libraries['libc'].mmap                                                                                                                                             # runtime/autogen/libc.py:165
                              mmap.restype = ctypes.POINTER(None)                                                                                                                                        # runtime/autogen/libc.py:166
                              mmap.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_int32, ctypes.c_int32, ctypes.c_int32, __off_t]                                                                    # runtime/autogen/libc.py:167
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:170
                              munmap = _libraries['libc'].munmap                                                                                                                                         # runtime/autogen/libc.py:171
                              munmap.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:172
                              munmap.argtypes = [ctypes.POINTER(None), size_t]                                                                                                                           # runtime/autogen/libc.py:173
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:176
                              mprotect = _libraries['libc'].mprotect                                                                                                                                     # runtime/autogen/libc.py:177
                              mprotect.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:178
                              mprotect.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_int32]                                                                                                         # runtime/autogen/libc.py:179
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:182
                              msync = _libraries['libc'].msync                                                                                                                                           # runtime/autogen/libc.py:183
                              msync.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:184
                              msync.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_int32]                                                                                                            # runtime/autogen/libc.py:185
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:188
                              madvise = _libraries['libc'].madvise                                                                                                                                       # runtime/autogen/libc.py:189
                              madvise.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:190
                              madvise.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_int32]                                                                                                          # runtime/autogen/libc.py:191
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:194
                              posix_madvise = _libraries['libc'].posix_madvise                                                                                                                           # runtime/autogen/libc.py:195
                              posix_madvise.restype = ctypes.c_int32                                                                                                                                     # runtime/autogen/libc.py:196
                              posix_madvise.argtypes = [ctypes.POINTER(None), size_t, ctypes.c_int32]                                                                                                    # runtime/autogen/libc.py:197
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:200
                              mlock = _libraries['libc'].mlock                                                                                                                                           # runtime/autogen/libc.py:201
                              mlock.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:202
                              mlock.argtypes = [ctypes.POINTER(None), size_t]                                                                                                                            # runtime/autogen/libc.py:203
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:206
                              munlock = _libraries['libc'].munlock                                                                                                                                       # runtime/autogen/libc.py:207
                              munlock.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:208
                              munlock.argtypes = [ctypes.POINTER(None), size_t]                                                                                                                          # runtime/autogen/libc.py:209
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:212
                              mlockall = _libraries['libc'].mlockall                                                                                                                                     # runtime/autogen/libc.py:213
                              mlockall.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:214
                              mlockall.argtypes = [ctypes.c_int32]                                                                                                                                       # runtime/autogen/libc.py:215
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:218
                              munlockall = _libraries['libc'].munlockall                                                                                                                                 # runtime/autogen/libc.py:219
                              munlockall.restype = ctypes.c_int32                                                                                                                                        # runtime/autogen/libc.py:220
                              munlockall.argtypes = []                                                                                                                                                   # runtime/autogen/libc.py:221
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:224
                              mincore = _libraries['libc'].mincore                                                                                                                                       # runtime/autogen/libc.py:225
                              mincore.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:226
                              mincore.argtypes = [ctypes.POINTER(None), size_t, ctypes.POINTER(ctypes.c_ubyte)]                                                                                          # runtime/autogen/libc.py:227
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:230
                              shm_open = _libraries['libc'].shm_open                                                                                                                                     # runtime/autogen/libc.py:231
                              shm_open.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:232
                              shm_open.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_int32, mode_t]                                                                                                # runtime/autogen/libc.py:233
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:236
                              shm_unlink = _libraries['libc'].shm_unlink                                                                                                                                 # runtime/autogen/libc.py:237
                              shm_unlink.restype = ctypes.c_int32                                                                                                                                        # runtime/autogen/libc.py:238
                              shm_unlink.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                      # runtime/autogen/libc.py:239
                          Elf32_Half = ctypes.c_uint16                                                                                                                                                   # runtime/autogen/libc.py:242
                          Elf64_Half = ctypes.c_uint16                                                                                                                                                   # runtime/autogen/libc.py:243
                          Elf32_Word = ctypes.c_uint32                                                                                                                                                   # runtime/autogen/libc.py:244
                          Elf32_Sword = ctypes.c_int32                                                                                                                                                   # runtime/autogen/libc.py:245
                          Elf64_Word = ctypes.c_uint32                                                                                                                                                   # runtime/autogen/libc.py:246
                          Elf64_Sword = ctypes.c_int32                                                                                                                                                   # runtime/autogen/libc.py:247
                          Elf32_Xword = ctypes.c_uint64                                                                                                                                                  # runtime/autogen/libc.py:248
                          Elf32_Sxword = ctypes.c_int64                                                                                                                                                  # runtime/autogen/libc.py:249
                          Elf64_Xword = ctypes.c_uint64                                                                                                                                                  # runtime/autogen/libc.py:250
                          Elf64_Sxword = ctypes.c_int64                                                                                                                                                  # runtime/autogen/libc.py:251
                          Elf32_Addr = ctypes.c_uint32                                                                                                                                                   # runtime/autogen/libc.py:252
                          Elf64_Addr = ctypes.c_uint64                                                                                                                                                   # runtime/autogen/libc.py:253
                          Elf32_Off = ctypes.c_uint32                                                                                                                                                    # runtime/autogen/libc.py:254
                          Elf64_Off = ctypes.c_uint64                                                                                                                                                    # runtime/autogen/libc.py:255
                          Elf32_Section = ctypes.c_uint16                                                                                                                                                # runtime/autogen/libc.py:256
                          Elf64_Section = ctypes.c_uint16                                                                                                                                                # runtime/autogen/libc.py:257
                          Elf32_Versym = ctypes.c_uint16                                                                                                                                                 # runtime/autogen/libc.py:258
                          Elf64_Versym = ctypes.c_uint16                                                                                                                                                 # runtime/autogen/libc.py:259

                          class struct_c__SA_Elf32_Ehdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:260
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:261

                          struct_c__SA_Elf32_Ehdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:263
                          struct_c__SA_Elf32_Ehdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:264
                              ('e_ident', ctypes.c_ubyte * 16),
                              ('e_type', ctypes.c_uint16),
                              ('e_machine', ctypes.c_uint16),
                              ('e_version', ctypes.c_uint32),
                              ('e_entry', ctypes.c_uint32),
                              ('e_phoff', ctypes.c_uint32),
                              ('e_shoff', ctypes.c_uint32),
                              ('e_flags', ctypes.c_uint32),
                              ('e_ehsize', ctypes.c_uint16),
                              ('e_phentsize', ctypes.c_uint16),
                              ('e_phnum', ctypes.c_uint16),
                              ('e_shentsize', ctypes.c_uint16),
                              ('e_shnum', ctypes.c_uint16),
                              ('e_shstrndx', ctypes.c_uint16),
                          ]
                          Elf32_Ehdr = struct_c__SA_Elf32_Ehdr                                                                                                                                           # runtime/autogen/libc.py:281

                          class struct_c__SA_Elf64_Ehdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:282
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:283

                          struct_c__SA_Elf64_Ehdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:285
                          struct_c__SA_Elf64_Ehdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:286
                              ('e_ident', ctypes.c_ubyte * 16),
                              ('e_type', ctypes.c_uint16),
                              ('e_machine', ctypes.c_uint16),
                              ('e_version', ctypes.c_uint32),
                              ('e_entry', ctypes.c_uint64),
                              ('e_phoff', ctypes.c_uint64),
                              ('e_shoff', ctypes.c_uint64),
                              ('e_flags', ctypes.c_uint32),
                              ('e_ehsize', ctypes.c_uint16),
                              ('e_phentsize', ctypes.c_uint16),
                              ('e_phnum', ctypes.c_uint16),
                              ('e_shentsize', ctypes.c_uint16),
                              ('e_shnum', ctypes.c_uint16),
                              ('e_shstrndx', ctypes.c_uint16),
                          ]
                          Elf64_Ehdr = struct_c__SA_Elf64_Ehdr                                                                                                                                           # runtime/autogen/libc.py:303

                          class struct_c__SA_Elf32_Shdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:304
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:305

                          struct_c__SA_Elf32_Shdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:307
                          struct_c__SA_Elf32_Shdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:308
                              ('sh_name', ctypes.c_uint32),
                              ('sh_type', ctypes.c_uint32),
                              ('sh_flags', ctypes.c_uint32),
                              ('sh_addr', ctypes.c_uint32),
                              ('sh_offset', ctypes.c_uint32),
                              ('sh_size', ctypes.c_uint32),
                              ('sh_link', ctypes.c_uint32),
                              ('sh_info', ctypes.c_uint32),
                              ('sh_addralign', ctypes.c_uint32),
                              ('sh_entsize', ctypes.c_uint32),
                          ]
                          Elf32_Shdr = struct_c__SA_Elf32_Shdr                                                                                                                                           # runtime/autogen/libc.py:321

                          class struct_c__SA_Elf64_Shdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:322
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:323

                          struct_c__SA_Elf64_Shdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:325
                          struct_c__SA_Elf64_Shdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:326
                              ('sh_name', ctypes.c_uint32),
                              ('sh_type', ctypes.c_uint32),
                              ('sh_flags', ctypes.c_uint64),
                              ('sh_addr', ctypes.c_uint64),
                              ('sh_offset', ctypes.c_uint64),
                              ('sh_size', ctypes.c_uint64),
                              ('sh_link', ctypes.c_uint32),
                              ('sh_info', ctypes.c_uint32),
                              ('sh_addralign', ctypes.c_uint64),
                              ('sh_entsize', ctypes.c_uint64),
                          ]
                          Elf64_Shdr = struct_c__SA_Elf64_Shdr                                                                                                                                           # runtime/autogen/libc.py:339

                          class struct_c__SA_Elf32_Chdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:340
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:341

                          struct_c__SA_Elf32_Chdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:343
                          struct_c__SA_Elf32_Chdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:344
                              ('ch_type', ctypes.c_uint32),
                              ('ch_size', ctypes.c_uint32),
                              ('ch_addralign', ctypes.c_uint32),
                          ]
                          Elf32_Chdr = struct_c__SA_Elf32_Chdr                                                                                                                                           # runtime/autogen/libc.py:350

                          class struct_c__SA_Elf64_Chdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:351
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:352

                          struct_c__SA_Elf64_Chdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:354
                          struct_c__SA_Elf64_Chdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:355
                              ('ch_type', ctypes.c_uint32),
                              ('ch_reserved', ctypes.c_uint32),
                              ('ch_size', ctypes.c_uint64),
                              ('ch_addralign', ctypes.c_uint64),
                          ]
                          Elf64_Chdr = struct_c__SA_Elf64_Chdr                                                                                                                                           # runtime/autogen/libc.py:362

                          class struct_c__SA_Elf32_Sym(Structure):                                                                                                                                       # runtime/autogen/libc.py:363
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:364

                          struct_c__SA_Elf32_Sym._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:366
                          struct_c__SA_Elf32_Sym._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:367
                              ('st_name', ctypes.c_uint32),
                              ('st_value', ctypes.c_uint32),
                              ('st_size', ctypes.c_uint32),
                              ('st_info', ctypes.c_ubyte),
                              ('st_other', ctypes.c_ubyte),
                              ('st_shndx', ctypes.c_uint16),
                          ]
                          Elf32_Sym = struct_c__SA_Elf32_Sym                                                                                                                                             # runtime/autogen/libc.py:376

                          class struct_c__SA_Elf64_Sym(Structure):                                                                                                                                       # runtime/autogen/libc.py:377
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:378

                          struct_c__SA_Elf64_Sym._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:380
                          struct_c__SA_Elf64_Sym._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:381
                              ('st_name', ctypes.c_uint32),
                              ('st_info', ctypes.c_ubyte),
                              ('st_other', ctypes.c_ubyte),
                              ('st_shndx', ctypes.c_uint16),
                              ('st_value', ctypes.c_uint64),
                              ('st_size', ctypes.c_uint64),
                          ]
                          Elf64_Sym = struct_c__SA_Elf64_Sym                                                                                                                                             # runtime/autogen/libc.py:390

                          class struct_c__SA_Elf32_Syminfo(Structure):                                                                                                                                   # runtime/autogen/libc.py:391
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:392

                          struct_c__SA_Elf32_Syminfo._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:394
                          struct_c__SA_Elf32_Syminfo._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:395
                              ('si_boundto', ctypes.c_uint16),
                              ('si_flags', ctypes.c_uint16),
                          ]
                          Elf32_Syminfo = struct_c__SA_Elf32_Syminfo                                                                                                                                     # runtime/autogen/libc.py:400

                          class struct_c__SA_Elf64_Syminfo(Structure):                                                                                                                                   # runtime/autogen/libc.py:401
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:402

                          struct_c__SA_Elf64_Syminfo._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:404
                          struct_c__SA_Elf64_Syminfo._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:405
                              ('si_boundto', ctypes.c_uint16),
                              ('si_flags', ctypes.c_uint16),
                          ]
                          Elf64_Syminfo = struct_c__SA_Elf64_Syminfo                                                                                                                                     # runtime/autogen/libc.py:410

                          class struct_c__SA_Elf32_Rel(Structure):                                                                                                                                       # runtime/autogen/libc.py:411
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:412

                          struct_c__SA_Elf32_Rel._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:414
                          struct_c__SA_Elf32_Rel._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:415
                              ('r_offset', ctypes.c_uint32),
                              ('r_info', ctypes.c_uint32),
                          ]
                          Elf32_Rel = struct_c__SA_Elf32_Rel                                                                                                                                             # runtime/autogen/libc.py:420

                          class struct_c__SA_Elf64_Rel(Structure):                                                                                                                                       # runtime/autogen/libc.py:421
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:422

                          struct_c__SA_Elf64_Rel._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:424
                          struct_c__SA_Elf64_Rel._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:425
                              ('r_offset', ctypes.c_uint64),
                              ('r_info', ctypes.c_uint64),
                          ]
                          Elf64_Rel = struct_c__SA_Elf64_Rel                                                                                                                                             # runtime/autogen/libc.py:430

                          class struct_c__SA_Elf32_Rela(Structure):                                                                                                                                      # runtime/autogen/libc.py:431
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:432

                          struct_c__SA_Elf32_Rela._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:434
                          struct_c__SA_Elf32_Rela._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:435
                              ('r_offset', ctypes.c_uint32),
                              ('r_info', ctypes.c_uint32),
                              ('r_addend', ctypes.c_int32),
                          ]
                          Elf32_Rela = struct_c__SA_Elf32_Rela                                                                                                                                           # runtime/autogen/libc.py:441

                          class struct_c__SA_Elf64_Rela(Structure):                                                                                                                                      # runtime/autogen/libc.py:442
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:443

                          struct_c__SA_Elf64_Rela._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:445
                          struct_c__SA_Elf64_Rela._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:446
                              ('r_offset', ctypes.c_uint64),
                              ('r_info', ctypes.c_uint64),
                              ('r_addend', ctypes.c_int64),
                          ]
                          Elf64_Rela = struct_c__SA_Elf64_Rela                                                                                                                                           # runtime/autogen/libc.py:452

                          class struct_c__SA_Elf32_Phdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:453
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:454

                          struct_c__SA_Elf32_Phdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:456
                          struct_c__SA_Elf32_Phdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:457
                              ('p_type', ctypes.c_uint32),
                              ('p_offset', ctypes.c_uint32),
                              ('p_vaddr', ctypes.c_uint32),
                              ('p_paddr', ctypes.c_uint32),
                              ('p_filesz', ctypes.c_uint32),
                              ('p_memsz', ctypes.c_uint32),
                              ('p_flags', ctypes.c_uint32),
                              ('p_align', ctypes.c_uint32),
                          ]
                          Elf32_Phdr = struct_c__SA_Elf32_Phdr                                                                                                                                           # runtime/autogen/libc.py:468

                          class struct_c__SA_Elf64_Phdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:469
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:470

                          struct_c__SA_Elf64_Phdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:472
                          struct_c__SA_Elf64_Phdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:473
                              ('p_type', ctypes.c_uint32),
                              ('p_flags', ctypes.c_uint32),
                              ('p_offset', ctypes.c_uint64),
                              ('p_vaddr', ctypes.c_uint64),
                              ('p_paddr', ctypes.c_uint64),
                              ('p_filesz', ctypes.c_uint64),
                              ('p_memsz', ctypes.c_uint64),
                              ('p_align', ctypes.c_uint64),
                          ]
                          Elf64_Phdr = struct_c__SA_Elf64_Phdr                                                                                                                                           # runtime/autogen/libc.py:484

                          class struct_c__SA_Elf32_Dyn(Structure):                                                                                                                                       # runtime/autogen/libc.py:485
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:486

                          class union_c__SA_Elf32_Dyn_d_un(Union):                                                                                                                                       # runtime/autogen/libc.py:488
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:489

                          union_c__SA_Elf32_Dyn_d_un._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:491
                          union_c__SA_Elf32_Dyn_d_un._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:492
                              ('d_val', ctypes.c_uint32),
                              ('d_ptr', ctypes.c_uint32),
                          ]
                          struct_c__SA_Elf32_Dyn._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:497
                          struct_c__SA_Elf32_Dyn._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:498
                              ('d_tag', ctypes.c_int32),
                              ('d_un', union_c__SA_Elf32_Dyn_d_un),
                          ]
                          Elf32_Dyn = struct_c__SA_Elf32_Dyn                                                                                                                                             # runtime/autogen/libc.py:503

                          class struct_c__SA_Elf64_Dyn(Structure):                                                                                                                                       # runtime/autogen/libc.py:504
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:505

                          class union_c__SA_Elf64_Dyn_d_un(Union):                                                                                                                                       # runtime/autogen/libc.py:507
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:508

                          union_c__SA_Elf64_Dyn_d_un._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:510
                          union_c__SA_Elf64_Dyn_d_un._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:511
                              ('d_val', ctypes.c_uint64),
                              ('d_ptr', ctypes.c_uint64),
                          ]
                          struct_c__SA_Elf64_Dyn._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:516
                          struct_c__SA_Elf64_Dyn._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:517
                              ('d_tag', ctypes.c_int64),
                              ('d_un', union_c__SA_Elf64_Dyn_d_un),
                          ]
                          Elf64_Dyn = struct_c__SA_Elf64_Dyn                                                                                                                                             # runtime/autogen/libc.py:522

                          class struct_c__SA_Elf32_Verdef(Structure):                                                                                                                                    # runtime/autogen/libc.py:523
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:524

                          struct_c__SA_Elf32_Verdef._pack_ = 1 # source:False                                                                                                                            # runtime/autogen/libc.py:526
                          struct_c__SA_Elf32_Verdef._fields_ = [                                                                                                                                         # runtime/autogen/libc.py:527
                              ('vd_version', ctypes.c_uint16),
                              ('vd_flags', ctypes.c_uint16),
                              ('vd_ndx', ctypes.c_uint16),
                              ('vd_cnt', ctypes.c_uint16),
                              ('vd_hash', ctypes.c_uint32),
                              ('vd_aux', ctypes.c_uint32),
                              ('vd_next', ctypes.c_uint32),
                          ]
                          Elf32_Verdef = struct_c__SA_Elf32_Verdef                                                                                                                                       # runtime/autogen/libc.py:537

                          class struct_c__SA_Elf64_Verdef(Structure):                                                                                                                                    # runtime/autogen/libc.py:538
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:539

                          struct_c__SA_Elf64_Verdef._pack_ = 1 # source:False                                                                                                                            # runtime/autogen/libc.py:541
                          struct_c__SA_Elf64_Verdef._fields_ = [                                                                                                                                         # runtime/autogen/libc.py:542
                              ('vd_version', ctypes.c_uint16),
                              ('vd_flags', ctypes.c_uint16),
                              ('vd_ndx', ctypes.c_uint16),
                              ('vd_cnt', ctypes.c_uint16),
                              ('vd_hash', ctypes.c_uint32),
                              ('vd_aux', ctypes.c_uint32),
                              ('vd_next', ctypes.c_uint32),
                          ]
                          Elf64_Verdef = struct_c__SA_Elf64_Verdef                                                                                                                                       # runtime/autogen/libc.py:552

                          class struct_c__SA_Elf32_Verdaux(Structure):                                                                                                                                   # runtime/autogen/libc.py:553
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:554

                          struct_c__SA_Elf32_Verdaux._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:556
                          struct_c__SA_Elf32_Verdaux._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:557
                              ('vda_name', ctypes.c_uint32),
                              ('vda_next', ctypes.c_uint32),
                          ]
                          Elf32_Verdaux = struct_c__SA_Elf32_Verdaux                                                                                                                                     # runtime/autogen/libc.py:562

                          class struct_c__SA_Elf64_Verdaux(Structure):                                                                                                                                   # runtime/autogen/libc.py:563
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:564

                          struct_c__SA_Elf64_Verdaux._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:566
                          struct_c__SA_Elf64_Verdaux._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:567
                              ('vda_name', ctypes.c_uint32),
                              ('vda_next', ctypes.c_uint32),
                          ]
                          Elf64_Verdaux = struct_c__SA_Elf64_Verdaux                                                                                                                                     # runtime/autogen/libc.py:572

                          class struct_c__SA_Elf32_Verneed(Structure):                                                                                                                                   # runtime/autogen/libc.py:573
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:574

                          struct_c__SA_Elf32_Verneed._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:576
                          struct_c__SA_Elf32_Verneed._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:577
                              ('vn_version', ctypes.c_uint16),
                              ('vn_cnt', ctypes.c_uint16),
                              ('vn_file', ctypes.c_uint32),
                              ('vn_aux', ctypes.c_uint32),
                              ('vn_next', ctypes.c_uint32),
                          ]
                          Elf32_Verneed = struct_c__SA_Elf32_Verneed                                                                                                                                     # runtime/autogen/libc.py:585

                          class struct_c__SA_Elf64_Verneed(Structure):                                                                                                                                   # runtime/autogen/libc.py:586
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:587

                          struct_c__SA_Elf64_Verneed._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:589
                          struct_c__SA_Elf64_Verneed._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:590
                              ('vn_version', ctypes.c_uint16),
                              ('vn_cnt', ctypes.c_uint16),
                              ('vn_file', ctypes.c_uint32),
                              ('vn_aux', ctypes.c_uint32),
                              ('vn_next', ctypes.c_uint32),
                          ]
                          Elf64_Verneed = struct_c__SA_Elf64_Verneed                                                                                                                                     # runtime/autogen/libc.py:598

                          class struct_c__SA_Elf32_Vernaux(Structure):                                                                                                                                   # runtime/autogen/libc.py:599
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:600

                          struct_c__SA_Elf32_Vernaux._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:602
                          struct_c__SA_Elf32_Vernaux._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:603
                              ('vna_hash', ctypes.c_uint32),
                              ('vna_flags', ctypes.c_uint16),
                              ('vna_other', ctypes.c_uint16),
                              ('vna_name', ctypes.c_uint32),
                              ('vna_next', ctypes.c_uint32),
                          ]
                          Elf32_Vernaux = struct_c__SA_Elf32_Vernaux                                                                                                                                     # runtime/autogen/libc.py:611

                          class struct_c__SA_Elf64_Vernaux(Structure):                                                                                                                                   # runtime/autogen/libc.py:612
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:613

                          struct_c__SA_Elf64_Vernaux._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:615
                          struct_c__SA_Elf64_Vernaux._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:616
                              ('vna_hash', ctypes.c_uint32),
                              ('vna_flags', ctypes.c_uint16),
                              ('vna_other', ctypes.c_uint16),
                              ('vna_name', ctypes.c_uint32),
                              ('vna_next', ctypes.c_uint32),
                          ]
                          Elf64_Vernaux = struct_c__SA_Elf64_Vernaux                                                                                                                                     # runtime/autogen/libc.py:624

                          class struct_c__SA_Elf32_auxv_t(Structure):                                                                                                                                    # runtime/autogen/libc.py:625
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:626

                          class union_c__SA_Elf32_auxv_t_a_un(Union):                                                                                                                                    # runtime/autogen/libc.py:628
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:629

                          union_c__SA_Elf32_auxv_t_a_un._pack_ = 1 # source:False                                                                                                                        # runtime/autogen/libc.py:631
                          union_c__SA_Elf32_auxv_t_a_un._fields_ = [                                                                                                                                     # runtime/autogen/libc.py:632
                              ('a_val', ctypes.c_uint32),
                          ]
                          struct_c__SA_Elf32_auxv_t._pack_ = 1 # source:False                                                                                                                            # runtime/autogen/libc.py:636
                          struct_c__SA_Elf32_auxv_t._fields_ = [                                                                                                                                         # runtime/autogen/libc.py:637
                              ('a_type', ctypes.c_uint32),
                              ('a_un', union_c__SA_Elf32_auxv_t_a_un),
                          ]
                          Elf32_auxv_t = struct_c__SA_Elf32_auxv_t                                                                                                                                       # runtime/autogen/libc.py:642

                          class struct_c__SA_Elf64_auxv_t(Structure):                                                                                                                                    # runtime/autogen/libc.py:643
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:644

                          class union_c__SA_Elf64_auxv_t_a_un(Union):                                                                                                                                    # runtime/autogen/libc.py:646
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:647

                          union_c__SA_Elf64_auxv_t_a_un._pack_ = 1 # source:False                                                                                                                        # runtime/autogen/libc.py:649
                          union_c__SA_Elf64_auxv_t_a_un._fields_ = [                                                                                                                                     # runtime/autogen/libc.py:650
                              ('a_val', ctypes.c_uint64),
                          ]
                          struct_c__SA_Elf64_auxv_t._pack_ = 1 # source:False                                                                                                                            # runtime/autogen/libc.py:654
                          struct_c__SA_Elf64_auxv_t._fields_ = [                                                                                                                                         # runtime/autogen/libc.py:655
                              ('a_type', ctypes.c_uint64),
                              ('a_un', union_c__SA_Elf64_auxv_t_a_un),
                          ]
                          Elf64_auxv_t = struct_c__SA_Elf64_auxv_t                                                                                                                                       # runtime/autogen/libc.py:660

                          class struct_c__SA_Elf32_Nhdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:661
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:662

                          struct_c__SA_Elf32_Nhdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:664
                          struct_c__SA_Elf32_Nhdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:665
                              ('n_namesz', ctypes.c_uint32),
                              ('n_descsz', ctypes.c_uint32),
                              ('n_type', ctypes.c_uint32),
                          ]
                          Elf32_Nhdr = struct_c__SA_Elf32_Nhdr                                                                                                                                           # runtime/autogen/libc.py:671

                          class struct_c__SA_Elf64_Nhdr(Structure):                                                                                                                                      # runtime/autogen/libc.py:672
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:673

                          struct_c__SA_Elf64_Nhdr._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:675
                          struct_c__SA_Elf64_Nhdr._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:676
                              ('n_namesz', ctypes.c_uint32),
                              ('n_descsz', ctypes.c_uint32),
                              ('n_type', ctypes.c_uint32),
                          ]
                          Elf64_Nhdr = struct_c__SA_Elf64_Nhdr                                                                                                                                           # runtime/autogen/libc.py:682

                          class struct_c__SA_Elf32_Move(Structure):                                                                                                                                      # runtime/autogen/libc.py:683
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:684

                          struct_c__SA_Elf32_Move._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:686
                          struct_c__SA_Elf32_Move._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:687
                              ('m_value', ctypes.c_uint64),
                              ('m_info', ctypes.c_uint32),
                              ('m_poffset', ctypes.c_uint32),
                              ('m_repeat', ctypes.c_uint16),
                              ('m_stride', ctypes.c_uint16),
                              ('PADDING_0', ctypes.c_ubyte * 4),
                          ]
                          Elf32_Move = struct_c__SA_Elf32_Move                                                                                                                                           # runtime/autogen/libc.py:696

                          class struct_c__SA_Elf64_Move(Structure):                                                                                                                                      # runtime/autogen/libc.py:697
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:698

                          struct_c__SA_Elf64_Move._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:700
                          struct_c__SA_Elf64_Move._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:701
                              ('m_value', ctypes.c_uint64),
                              ('m_info', ctypes.c_uint64),
                              ('m_poffset', ctypes.c_uint64),
                              ('m_repeat', ctypes.c_uint16),
                              ('m_stride', ctypes.c_uint16),
                              ('PADDING_0', ctypes.c_ubyte * 4),
                          ]
                          Elf64_Move = struct_c__SA_Elf64_Move                                                                                                                                           # runtime/autogen/libc.py:710

                          class union_c__UA_Elf32_gptab(Union):                                                                                                                                          # runtime/autogen/libc.py:711
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:712

                          class struct_c__UA_Elf32_gptab_gt_header(Structure):                                                                                                                           # runtime/autogen/libc.py:714
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:715

                          struct_c__UA_Elf32_gptab_gt_header._pack_ = 1 # source:False                                                                                                                   # runtime/autogen/libc.py:717
                          struct_c__UA_Elf32_gptab_gt_header._fields_ = [                                                                                                                                # runtime/autogen/libc.py:718
                              ('gt_current_g_value', ctypes.c_uint32),
                              ('gt_unused', ctypes.c_uint32),
                          ]

                          class struct_c__UA_Elf32_gptab_gt_entry(Structure):                                                                                                                            # runtime/autogen/libc.py:723
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:724

                          struct_c__UA_Elf32_gptab_gt_entry._pack_ = 1 # source:False                                                                                                                    # runtime/autogen/libc.py:726
                          struct_c__UA_Elf32_gptab_gt_entry._fields_ = [                                                                                                                                 # runtime/autogen/libc.py:727
                              ('gt_g_value', ctypes.c_uint32),
                              ('gt_bytes', ctypes.c_uint32),
                          ]
                          union_c__UA_Elf32_gptab._pack_ = 1 # source:False                                                                                                                              # runtime/autogen/libc.py:732
                          union_c__UA_Elf32_gptab._fields_ = [                                                                                                                                           # runtime/autogen/libc.py:733
                              ('gt_header', struct_c__UA_Elf32_gptab_gt_header),
                              ('gt_entry', struct_c__UA_Elf32_gptab_gt_entry),
                          ]
                          Elf32_gptab = union_c__UA_Elf32_gptab                                                                                                                                          # runtime/autogen/libc.py:738

                          class struct_c__SA_Elf32_RegInfo(Structure):                                                                                                                                   # runtime/autogen/libc.py:739
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:740

                          struct_c__SA_Elf32_RegInfo._pack_ = 1 # source:False                                                                                                                           # runtime/autogen/libc.py:742
                          struct_c__SA_Elf32_RegInfo._fields_ = [                                                                                                                                        # runtime/autogen/libc.py:743
                              ('ri_gprmask', ctypes.c_uint32),
                              ('ri_cprmask', ctypes.c_uint32 * 4),
                              ('ri_gp_value', ctypes.c_int32),
                          ]
                          Elf32_RegInfo = struct_c__SA_Elf32_RegInfo                                                                                                                                     # runtime/autogen/libc.py:749

                          class struct_c__SA_Elf_Options(Structure):                                                                                                                                     # runtime/autogen/libc.py:750
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:751

                          struct_c__SA_Elf_Options._pack_ = 1 # source:False                                                                                                                             # runtime/autogen/libc.py:753
                          struct_c__SA_Elf_Options._fields_ = [                                                                                                                                          # runtime/autogen/libc.py:754
                              ('kind', ctypes.c_ubyte),
                              ('size', ctypes.c_ubyte),
                              ('section', ctypes.c_uint16),
                              ('info', ctypes.c_uint32),
                          ]
                          Elf_Options = struct_c__SA_Elf_Options                                                                                                                                         # runtime/autogen/libc.py:761

                          class struct_c__SA_Elf_Options_Hw(Structure):                                                                                                                                  # runtime/autogen/libc.py:762
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:763

                          struct_c__SA_Elf_Options_Hw._pack_ = 1 # source:False                                                                                                                          # runtime/autogen/libc.py:765
                          struct_c__SA_Elf_Options_Hw._fields_ = [                                                                                                                                       # runtime/autogen/libc.py:766
                              ('hwp_flags1', ctypes.c_uint32),
                              ('hwp_flags2', ctypes.c_uint32),
                          ]
                          Elf_Options_Hw = struct_c__SA_Elf_Options_Hw                                                                                                                                   # runtime/autogen/libc.py:771

                          class struct_c__SA_Elf32_Lib(Structure):                                                                                                                                       # runtime/autogen/libc.py:772
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:773

                          struct_c__SA_Elf32_Lib._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:775
                          struct_c__SA_Elf32_Lib._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:776
                              ('l_name', ctypes.c_uint32),
                              ('l_time_stamp', ctypes.c_uint32),
                              ('l_checksum', ctypes.c_uint32),
                              ('l_version', ctypes.c_uint32),
                              ('l_flags', ctypes.c_uint32),
                          ]
                          Elf32_Lib = struct_c__SA_Elf32_Lib                                                                                                                                             # runtime/autogen/libc.py:784

                          class struct_c__SA_Elf64_Lib(Structure):                                                                                                                                       # runtime/autogen/libc.py:785
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:786

                          struct_c__SA_Elf64_Lib._pack_ = 1 # source:False                                                                                                                               # runtime/autogen/libc.py:788
                          struct_c__SA_Elf64_Lib._fields_ = [                                                                                                                                            # runtime/autogen/libc.py:789
                              ('l_name', ctypes.c_uint32),
                              ('l_time_stamp', ctypes.c_uint32),
                              ('l_checksum', ctypes.c_uint32),
                              ('l_version', ctypes.c_uint32),
                              ('l_flags', ctypes.c_uint32),
                          ]
                          Elf64_Lib = struct_c__SA_Elf64_Lib                                                                                                                                             # runtime/autogen/libc.py:797
                          Elf32_Conflict = ctypes.c_uint32                                                                                                                                               # runtime/autogen/libc.py:798

                          class struct_c__SA_Elf_MIPS_ABIFlags_v0(Structure):                                                                                                                            # runtime/autogen/libc.py:799
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:800

                          struct_c__SA_Elf_MIPS_ABIFlags_v0._pack_ = 1 # source:False                                                                                                                    # runtime/autogen/libc.py:802
                          struct_c__SA_Elf_MIPS_ABIFlags_v0._fields_ = [                                                                                                                                 # runtime/autogen/libc.py:803
                              ('version', ctypes.c_uint16),
                              ('isa_level', ctypes.c_ubyte),
                              ('isa_rev', ctypes.c_ubyte),
                              ('gpr_size', ctypes.c_ubyte),
                              ('cpr1_size', ctypes.c_ubyte),
                              ('cpr2_size', ctypes.c_ubyte),
                              ('fp_abi', ctypes.c_ubyte),
                              ('isa_ext', ctypes.c_uint32),
                              ('ases', ctypes.c_uint32),
                              ('flags1', ctypes.c_uint32),
                              ('flags2', ctypes.c_uint32),
                          ]
                          Elf_MIPS_ABIFlags_v0 = struct_c__SA_Elf_MIPS_ABIFlags_v0                                                                                                                       # runtime/autogen/libc.py:817
                          c__Ea_Val_GNU_MIPS_ABI_FP_ANY__enumvalues = {                                                                                                                                  # runtime/autogen/libc.py:820
                              0: 'Val_GNU_MIPS_ABI_FP_ANY',
                              1: 'Val_GNU_MIPS_ABI_FP_DOUBLE',
                              2: 'Val_GNU_MIPS_ABI_FP_SINGLE',
                              3: 'Val_GNU_MIPS_ABI_FP_SOFT',
                              4: 'Val_GNU_MIPS_ABI_FP_OLD_64',
                              5: 'Val_GNU_MIPS_ABI_FP_XX',
                              6: 'Val_GNU_MIPS_ABI_FP_64',
                              7: 'Val_GNU_MIPS_ABI_FP_64A',
                              7: 'Val_GNU_MIPS_ABI_FP_MAX',
                          }
                          Val_GNU_MIPS_ABI_FP_ANY = 0                                                                                                                                                    # runtime/autogen/libc.py:831
                          Val_GNU_MIPS_ABI_FP_DOUBLE = 1                                                                                                                                                 # runtime/autogen/libc.py:832
                          Val_GNU_MIPS_ABI_FP_SINGLE = 2                                                                                                                                                 # runtime/autogen/libc.py:833
                          Val_GNU_MIPS_ABI_FP_SOFT = 3                                                                                                                                                   # runtime/autogen/libc.py:834
                          Val_GNU_MIPS_ABI_FP_OLD_64 = 4                                                                                                                                                 # runtime/autogen/libc.py:835
                          Val_GNU_MIPS_ABI_FP_XX = 5                                                                                                                                                     # runtime/autogen/libc.py:836
                          Val_GNU_MIPS_ABI_FP_64 = 6                                                                                                                                                     # runtime/autogen/libc.py:837
                          Val_GNU_MIPS_ABI_FP_64A = 7                                                                                                                                                    # runtime/autogen/libc.py:838
                          Val_GNU_MIPS_ABI_FP_MAX = 7                                                                                                                                                    # runtime/autogen/libc.py:839
                          c__Ea_Val_GNU_MIPS_ABI_FP_ANY = ctypes.c_uint32 # enum                                                                                                                         # runtime/autogen/libc.py:840
                          ssize_t = ctypes.c_int64                                                                                                                                                       # runtime/autogen/libc.py:841
                          gid_t = ctypes.c_uint32                                                                                                                                                        # runtime/autogen/libc.py:842
                          uid_t = ctypes.c_uint32                                                                                                                                                        # runtime/autogen/libc.py:843
                          useconds_t = ctypes.c_uint32                                                                                                                                                   # runtime/autogen/libc.py:844
                          pid_t = ctypes.c_int32                                                                                                                                                         # runtime/autogen/libc.py:845
                          intptr_t = ctypes.c_int64                                                                                                                                                      # runtime/autogen/libc.py:846
                          socklen_t = ctypes.c_uint32                                                                                                                                                    # runtime/autogen/libc.py:847
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:848
                              access = _libraries['libc'].access                                                                                                                                         # runtime/autogen/libc.py:849
                              access.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:850
                              access.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_int32]                                                                                                          # runtime/autogen/libc.py:851
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:854
                              faccessat = _libraries['libc'].faccessat                                                                                                                                   # runtime/autogen/libc.py:855
                              faccessat.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:856
                              faccessat.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.c_int32]                                                                       # runtime/autogen/libc.py:857
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:860
                              lseek = _libraries['libc'].lseek                                                                                                                                           # runtime/autogen/libc.py:861
                              lseek.restype = __off_t                                                                                                                                                    # runtime/autogen/libc.py:862
                              lseek.argtypes = [ctypes.c_int32, __off_t, ctypes.c_int32]                                                                                                                 # runtime/autogen/libc.py:863
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:866
                              close = _libraries['libc'].close                                                                                                                                           # runtime/autogen/libc.py:867
                              close.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:868
                              close.argtypes = [ctypes.c_int32]                                                                                                                                          # runtime/autogen/libc.py:869
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:872
                              closefrom = _libraries['libc'].closefrom                                                                                                                                   # runtime/autogen/libc.py:873
                              closefrom.restype = None                                                                                                                                                   # runtime/autogen/libc.py:874
                              closefrom.argtypes = [ctypes.c_int32]                                                                                                                                      # runtime/autogen/libc.py:875
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:878
                              read = _libraries['libc'].read                                                                                                                                             # runtime/autogen/libc.py:879
                              read.restype = ssize_t                                                                                                                                                     # runtime/autogen/libc.py:880
                              read.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t]                                                                                                             # runtime/autogen/libc.py:881
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:884
                              write = _libraries['libc'].write                                                                                                                                           # runtime/autogen/libc.py:885
                              write.restype = ssize_t                                                                                                                                                    # runtime/autogen/libc.py:886
                              write.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t]                                                                                                            # runtime/autogen/libc.py:887
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:890
                              pread = _libraries['libc'].pread                                                                                                                                           # runtime/autogen/libc.py:891
                              pread.restype = ssize_t                                                                                                                                                    # runtime/autogen/libc.py:892
                              pread.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t, __off_t]                                                                                                   # runtime/autogen/libc.py:893
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:896
                              pwrite = _libraries['libc'].pwrite                                                                                                                                         # runtime/autogen/libc.py:897
                              pwrite.restype = ssize_t                                                                                                                                                   # runtime/autogen/libc.py:898
                              pwrite.argtypes = [ctypes.c_int32, ctypes.POINTER(None), size_t, __off_t]                                                                                                  # runtime/autogen/libc.py:899
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:902
                              pipe = _libraries['libc'].pipe                                                                                                                                             # runtime/autogen/libc.py:903
                              pipe.restype = ctypes.c_int32                                                                                                                                              # runtime/autogen/libc.py:904
                              pipe.argtypes = [ctypes.c_int32 * 2]                                                                                                                                       # runtime/autogen/libc.py:905
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:908
                              alarm = _libraries['libc'].alarm                                                                                                                                           # runtime/autogen/libc.py:909
                              alarm.restype = ctypes.c_uint32                                                                                                                                            # runtime/autogen/libc.py:910
                              alarm.argtypes = [ctypes.c_uint32]                                                                                                                                         # runtime/autogen/libc.py:911
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:914
                              sleep = _libraries['libc'].sleep                                                                                                                                           # runtime/autogen/libc.py:915
                              sleep.restype = ctypes.c_uint32                                                                                                                                            # runtime/autogen/libc.py:916
                              sleep.argtypes = [ctypes.c_uint32]                                                                                                                                         # runtime/autogen/libc.py:917
                          __useconds_t = ctypes.c_uint32                                                                                                                                                 # runtime/autogen/libc.py:920
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:921
                              ualarm = _libraries['libc'].ualarm                                                                                                                                         # runtime/autogen/libc.py:922
                              ualarm.restype = __useconds_t                                                                                                                                              # runtime/autogen/libc.py:923
                              ualarm.argtypes = [__useconds_t, __useconds_t]                                                                                                                             # runtime/autogen/libc.py:924
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:927
                              usleep = _libraries['libc'].usleep                                                                                                                                         # runtime/autogen/libc.py:928
                              usleep.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:929
                              usleep.argtypes = [__useconds_t]                                                                                                                                           # runtime/autogen/libc.py:930
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:933
                              pause = _libraries['libc'].pause                                                                                                                                           # runtime/autogen/libc.py:934
                              pause.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:935
                              pause.argtypes = []                                                                                                                                                        # runtime/autogen/libc.py:936
                          __uid_t = ctypes.c_uint32                                                                                                                                                      # runtime/autogen/libc.py:939
                          __gid_t = ctypes.c_uint32                                                                                                                                                      # runtime/autogen/libc.py:940
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:941
                              chown = _libraries['libc'].chown                                                                                                                                           # runtime/autogen/libc.py:942
                              chown.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:943
                              chown.argtypes = [ctypes.POINTER(ctypes.c_char), __uid_t, __gid_t]                                                                                                         # runtime/autogen/libc.py:944
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:947
                              fchown = _libraries['libc'].fchown                                                                                                                                         # runtime/autogen/libc.py:948
                              fchown.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:949
                              fchown.argtypes = [ctypes.c_int32, __uid_t, __gid_t]                                                                                                                       # runtime/autogen/libc.py:950
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:953
                              lchown = _libraries['libc'].lchown                                                                                                                                         # runtime/autogen/libc.py:954
                              lchown.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:955
                              lchown.argtypes = [ctypes.POINTER(ctypes.c_char), __uid_t, __gid_t]                                                                                                        # runtime/autogen/libc.py:956
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:959
                              fchownat = _libraries['libc'].fchownat                                                                                                                                     # runtime/autogen/libc.py:960
                              fchownat.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:961
                              fchownat.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), __uid_t, __gid_t, ctypes.c_int32]                                                                      # runtime/autogen/libc.py:962
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:965
                              chdir = _libraries['libc'].chdir                                                                                                                                           # runtime/autogen/libc.py:966
                              chdir.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:967
                              chdir.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                           # runtime/autogen/libc.py:968
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:971
                              fchdir = _libraries['libc'].fchdir                                                                                                                                         # runtime/autogen/libc.py:972
                              fchdir.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:973
                              fchdir.argtypes = [ctypes.c_int32]                                                                                                                                         # runtime/autogen/libc.py:974
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:977
                              getcwd = _libraries['libc'].getcwd                                                                                                                                         # runtime/autogen/libc.py:978
                              getcwd.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                             # runtime/autogen/libc.py:979
                              getcwd.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                                  # runtime/autogen/libc.py:980
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:983
                              getwd = _libraries['libc'].getwd                                                                                                                                           # runtime/autogen/libc.py:984
                              getwd.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                              # runtime/autogen/libc.py:985
                              getwd.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                           # runtime/autogen/libc.py:986
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:989
                              dup = _libraries['libc'].dup                                                                                                                                               # runtime/autogen/libc.py:990
                              dup.restype = ctypes.c_int32                                                                                                                                               # runtime/autogen/libc.py:991
                              dup.argtypes = [ctypes.c_int32]                                                                                                                                            # runtime/autogen/libc.py:992
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:995
                              dup2 = _libraries['libc'].dup2                                                                                                                                             # runtime/autogen/libc.py:996
                              dup2.restype = ctypes.c_int32                                                                                                                                              # runtime/autogen/libc.py:997
                              dup2.argtypes = [ctypes.c_int32, ctypes.c_int32]                                                                                                                           # runtime/autogen/libc.py:998
                          __environ = ctypes.POINTER(ctypes.POINTER(ctypes.c_char))() # Variable ctypes.POINTER(ctypes.POINTER(ctypes.c_char))                                                           # runtime/autogen/libc.py:1001
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1002
                              execve = _libraries['libc'].execve                                                                                                                                         # runtime/autogen/libc.py:1003
                              execve.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1004
                              execve.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char) * 0, ctypes.POINTER(ctypes.c_char) * 0]                                                    # runtime/autogen/libc.py:1005
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1008
                              fexecve = _libraries['libc'].fexecve                                                                                                                                       # runtime/autogen/libc.py:1009
                              fexecve.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1010
                              fexecve.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char) * 0, ctypes.POINTER(ctypes.c_char) * 0]                                                                  # runtime/autogen/libc.py:1011
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1014
                              execv = _libraries['libc'].execv                                                                                                                                           # runtime/autogen/libc.py:1015
                              execv.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1016
                              execv.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char) * 0]                                                                                        # runtime/autogen/libc.py:1017
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1020
                              execle = _libraries['libc'].execle                                                                                                                                         # runtime/autogen/libc.py:1021
                              execle.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1022
                              execle.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]                                                                                           # runtime/autogen/libc.py:1023
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1026
                              execl = _libraries['libc'].execl                                                                                                                                           # runtime/autogen/libc.py:1027
                              execl.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1028
                              execl.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]                                                                                            # runtime/autogen/libc.py:1029
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1032
                              execvp = _libraries['libc'].execvp                                                                                                                                         # runtime/autogen/libc.py:1033
                              execvp.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1034
                              execvp.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char) * 0]                                                                                       # runtime/autogen/libc.py:1035
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1038
                              execlp = _libraries['libc'].execlp                                                                                                                                         # runtime/autogen/libc.py:1039
                              execlp.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1040
                              execlp.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]                                                                                           # runtime/autogen/libc.py:1041
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1044
                              nice = _libraries['libc'].nice                                                                                                                                             # runtime/autogen/libc.py:1045
                              nice.restype = ctypes.c_int32                                                                                                                                              # runtime/autogen/libc.py:1046
                              nice.argtypes = [ctypes.c_int32]                                                                                                                                           # runtime/autogen/libc.py:1047
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1050
                              _exit = _libraries['libc']._exit                                                                                                                                           # runtime/autogen/libc.py:1051
                              _exit.restype = None                                                                                                                                                       # runtime/autogen/libc.py:1052
                              _exit.argtypes = [ctypes.c_int32]                                                                                                                                          # runtime/autogen/libc.py:1053
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1056
                              pathconf = _libraries['libc'].pathconf                                                                                                                                     # runtime/autogen/libc.py:1057
                              pathconf.restype = ctypes.c_int64                                                                                                                                          # runtime/autogen/libc.py:1058
                              pathconf.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_int32]                                                                                                        # runtime/autogen/libc.py:1059
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1062
                              fpathconf = _libraries['libc'].fpathconf                                                                                                                                   # runtime/autogen/libc.py:1063
                              fpathconf.restype = ctypes.c_int64                                                                                                                                         # runtime/autogen/libc.py:1064
                              fpathconf.argtypes = [ctypes.c_int32, ctypes.c_int32]                                                                                                                      # runtime/autogen/libc.py:1065
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1068
                              sysconf = _libraries['libc'].sysconf                                                                                                                                       # runtime/autogen/libc.py:1069
                              sysconf.restype = ctypes.c_int64                                                                                                                                           # runtime/autogen/libc.py:1070
                              sysconf.argtypes = [ctypes.c_int32]                                                                                                                                        # runtime/autogen/libc.py:1071
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1074
                              confstr = _libraries['libc'].confstr                                                                                                                                       # runtime/autogen/libc.py:1075
                              confstr.restype = size_t                                                                                                                                                   # runtime/autogen/libc.py:1076
                              confstr.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), size_t]                                                                                                 # runtime/autogen/libc.py:1077
                          __pid_t = ctypes.c_int32                                                                                                                                                       # runtime/autogen/libc.py:1080
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1081
                              getpid = _libraries['libc'].getpid                                                                                                                                         # runtime/autogen/libc.py:1082
                              getpid.restype = __pid_t                                                                                                                                                   # runtime/autogen/libc.py:1083
                              getpid.argtypes = []                                                                                                                                                       # runtime/autogen/libc.py:1084
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1087
                              getppid = _libraries['libc'].getppid                                                                                                                                       # runtime/autogen/libc.py:1088
                              getppid.restype = __pid_t                                                                                                                                                  # runtime/autogen/libc.py:1089
                              getppid.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1090
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1093
                              getpgrp = _libraries['libc'].getpgrp                                                                                                                                       # runtime/autogen/libc.py:1094
                              getpgrp.restype = __pid_t                                                                                                                                                  # runtime/autogen/libc.py:1095
                              getpgrp.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1096
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1099
                              __getpgid = _libraries['libc'].__getpgid                                                                                                                                   # runtime/autogen/libc.py:1100
                              __getpgid.restype = __pid_t                                                                                                                                                # runtime/autogen/libc.py:1101
                              __getpgid.argtypes = [__pid_t]                                                                                                                                             # runtime/autogen/libc.py:1102
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1105
                              getpgid = _libraries['libc'].getpgid                                                                                                                                       # runtime/autogen/libc.py:1106
                              getpgid.restype = __pid_t                                                                                                                                                  # runtime/autogen/libc.py:1107
                              getpgid.argtypes = [__pid_t]                                                                                                                                               # runtime/autogen/libc.py:1108
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1111
                              setpgid = _libraries['libc'].setpgid                                                                                                                                       # runtime/autogen/libc.py:1112
                              setpgid.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1113
                              setpgid.argtypes = [__pid_t, __pid_t]                                                                                                                                      # runtime/autogen/libc.py:1114
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1117
                              setpgrp = _libraries['libc'].setpgrp                                                                                                                                       # runtime/autogen/libc.py:1118
                              setpgrp.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1119
                              setpgrp.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1120
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1123
                              setsid = _libraries['libc'].setsid                                                                                                                                         # runtime/autogen/libc.py:1124
                              setsid.restype = __pid_t                                                                                                                                                   # runtime/autogen/libc.py:1125
                              setsid.argtypes = []                                                                                                                                                       # runtime/autogen/libc.py:1126
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1129
                              getsid = _libraries['libc'].getsid                                                                                                                                         # runtime/autogen/libc.py:1130
                              getsid.restype = __pid_t                                                                                                                                                   # runtime/autogen/libc.py:1131
                              getsid.argtypes = [__pid_t]                                                                                                                                                # runtime/autogen/libc.py:1132
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1135
                              getuid = _libraries['libc'].getuid                                                                                                                                         # runtime/autogen/libc.py:1136
                              getuid.restype = __uid_t                                                                                                                                                   # runtime/autogen/libc.py:1137
                              getuid.argtypes = []                                                                                                                                                       # runtime/autogen/libc.py:1138
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1141
                              geteuid = _libraries['libc'].geteuid                                                                                                                                       # runtime/autogen/libc.py:1142
                              geteuid.restype = __uid_t                                                                                                                                                  # runtime/autogen/libc.py:1143
                              geteuid.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1144
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1147
                              getgid = _libraries['libc'].getgid                                                                                                                                         # runtime/autogen/libc.py:1148
                              getgid.restype = __gid_t                                                                                                                                                   # runtime/autogen/libc.py:1149
                              getgid.argtypes = []                                                                                                                                                       # runtime/autogen/libc.py:1150
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1153
                              getegid = _libraries['libc'].getegid                                                                                                                                       # runtime/autogen/libc.py:1154
                              getegid.restype = __gid_t                                                                                                                                                  # runtime/autogen/libc.py:1155
                              getegid.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1156
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1159
                              getgroups = _libraries['libc'].getgroups                                                                                                                                   # runtime/autogen/libc.py:1160
                              getgroups.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1161
                              getgroups.argtypes = [ctypes.c_int32, ctypes.c_uint32 * 0]                                                                                                                 # runtime/autogen/libc.py:1162
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1165
                              setuid = _libraries['libc'].setuid                                                                                                                                         # runtime/autogen/libc.py:1166
                              setuid.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1167
                              setuid.argtypes = [__uid_t]                                                                                                                                                # runtime/autogen/libc.py:1168
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1171
                              setreuid = _libraries['libc'].setreuid                                                                                                                                     # runtime/autogen/libc.py:1172
                              setreuid.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:1173
                              setreuid.argtypes = [__uid_t, __uid_t]                                                                                                                                     # runtime/autogen/libc.py:1174
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1177
                              seteuid = _libraries['libc'].seteuid                                                                                                                                       # runtime/autogen/libc.py:1178
                              seteuid.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1179
                              seteuid.argtypes = [__uid_t]                                                                                                                                               # runtime/autogen/libc.py:1180
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1183
                              setgid = _libraries['libc'].setgid                                                                                                                                         # runtime/autogen/libc.py:1184
                              setgid.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1185
                              setgid.argtypes = [__gid_t]                                                                                                                                                # runtime/autogen/libc.py:1186
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1189
                              setregid = _libraries['libc'].setregid                                                                                                                                     # runtime/autogen/libc.py:1190
                              setregid.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:1191
                              setregid.argtypes = [__gid_t, __gid_t]                                                                                                                                     # runtime/autogen/libc.py:1192
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1195
                              setegid = _libraries['libc'].setegid                                                                                                                                       # runtime/autogen/libc.py:1196
                              setegid.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1197
                              setegid.argtypes = [__gid_t]                                                                                                                                               # runtime/autogen/libc.py:1198
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1201
                              fork = _libraries['libc'].fork                                                                                                                                             # runtime/autogen/libc.py:1202
                              fork.restype = __pid_t                                                                                                                                                     # runtime/autogen/libc.py:1203
                              fork.argtypes = []                                                                                                                                                         # runtime/autogen/libc.py:1204
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1207
                              vfork = _libraries['libc'].vfork                                                                                                                                           # runtime/autogen/libc.py:1208
                              vfork.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1209
                              vfork.argtypes = []                                                                                                                                                        # runtime/autogen/libc.py:1210
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1213
                              ttyname = _libraries['libc'].ttyname                                                                                                                                       # runtime/autogen/libc.py:1214
                              ttyname.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                            # runtime/autogen/libc.py:1215
                              ttyname.argtypes = [ctypes.c_int32]                                                                                                                                        # runtime/autogen/libc.py:1216
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1219
                              ttyname_r = _libraries['libc'].ttyname_r                                                                                                                                   # runtime/autogen/libc.py:1220
                              ttyname_r.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1221
                              ttyname_r.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), size_t]                                                                                               # runtime/autogen/libc.py:1222
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1225
                              isatty = _libraries['libc'].isatty                                                                                                                                         # runtime/autogen/libc.py:1226
                              isatty.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1227
                              isatty.argtypes = [ctypes.c_int32]                                                                                                                                         # runtime/autogen/libc.py:1228
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1231
                              ttyslot = _libraries['libc'].ttyslot                                                                                                                                       # runtime/autogen/libc.py:1232
                              ttyslot.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1233
                              ttyslot.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1234
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1237
                              link = _libraries['libc'].link                                                                                                                                             # runtime/autogen/libc.py:1238
                              link.restype = ctypes.c_int32                                                                                                                                              # runtime/autogen/libc.py:1239
                              link.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]                                                                                             # runtime/autogen/libc.py:1240
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1243
                              linkat = _libraries['libc'].linkat                                                                                                                                         # runtime/autogen/libc.py:1244
                              linkat.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1245
                              linkat.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32]                                           # runtime/autogen/libc.py:1246
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1249
                              symlink = _libraries['libc'].symlink                                                                                                                                       # runtime/autogen/libc.py:1250
                              symlink.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1251
                              symlink.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char)]                                                                                          # runtime/autogen/libc.py:1252
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1255
                              readlink = _libraries['libc'].readlink                                                                                                                                     # runtime/autogen/libc.py:1256
                              readlink.restype = ssize_t                                                                                                                                                 # runtime/autogen/libc.py:1257
                              readlink.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), size_t]                                                                                 # runtime/autogen/libc.py:1258
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1261
                              symlinkat = _libraries['libc'].symlinkat                                                                                                                                   # runtime/autogen/libc.py:1262
                              symlinkat.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1263
                              symlinkat.argtypes = [ctypes.POINTER(ctypes.c_char), ctypes.c_int32, ctypes.POINTER(ctypes.c_char)]                                                                        # runtime/autogen/libc.py:1264
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1267
                              readlinkat = _libraries['libc'].readlinkat                                                                                                                                 # runtime/autogen/libc.py:1268
                              readlinkat.restype = ssize_t                                                                                                                                               # runtime/autogen/libc.py:1269
                              readlinkat.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), size_t]                                                               # runtime/autogen/libc.py:1270
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1273
                              unlink = _libraries['libc'].unlink                                                                                                                                         # runtime/autogen/libc.py:1274
                              unlink.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1275
                              unlink.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                          # runtime/autogen/libc.py:1276
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1279
                              unlinkat = _libraries['libc'].unlinkat                                                                                                                                     # runtime/autogen/libc.py:1280
                              unlinkat.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:1281
                              unlinkat.argtypes = [ctypes.c_int32, ctypes.POINTER(ctypes.c_char), ctypes.c_int32]                                                                                        # runtime/autogen/libc.py:1282
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1285
                              rmdir = _libraries['libc'].rmdir                                                                                                                                           # runtime/autogen/libc.py:1286
                              rmdir.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1287
                              rmdir.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                           # runtime/autogen/libc.py:1288
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1291
                              tcgetpgrp = _libraries['libc'].tcgetpgrp                                                                                                                                   # runtime/autogen/libc.py:1292
                              tcgetpgrp.restype = __pid_t                                                                                                                                                # runtime/autogen/libc.py:1293
                              tcgetpgrp.argtypes = [ctypes.c_int32]                                                                                                                                      # runtime/autogen/libc.py:1294
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1297
                              tcsetpgrp = _libraries['libc'].tcsetpgrp                                                                                                                                   # runtime/autogen/libc.py:1298
                              tcsetpgrp.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1299
                              tcsetpgrp.argtypes = [ctypes.c_int32, __pid_t]                                                                                                                             # runtime/autogen/libc.py:1300
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1303
                              getlogin = _libraries['libc'].getlogin                                                                                                                                     # runtime/autogen/libc.py:1304
                              getlogin.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                           # runtime/autogen/libc.py:1305
                              getlogin.argtypes = []                                                                                                                                                     # runtime/autogen/libc.py:1306
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1309
                              getlogin_r = _libraries['libc'].getlogin_r                                                                                                                                 # runtime/autogen/libc.py:1310
                              getlogin_r.restype = ctypes.c_int32                                                                                                                                        # runtime/autogen/libc.py:1311
                              getlogin_r.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                              # runtime/autogen/libc.py:1312
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1315
                              setlogin = _libraries['libc'].setlogin                                                                                                                                     # runtime/autogen/libc.py:1316
                              setlogin.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:1317
                              setlogin.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                        # runtime/autogen/libc.py:1318
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1321
                              gethostname = _libraries['libc'].gethostname                                                                                                                               # runtime/autogen/libc.py:1322
                              gethostname.restype = ctypes.c_int32                                                                                                                                       # runtime/autogen/libc.py:1323
                              gethostname.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                             # runtime/autogen/libc.py:1324
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1327
                              sethostname = _libraries['libc'].sethostname                                                                                                                               # runtime/autogen/libc.py:1328
                              sethostname.restype = ctypes.c_int32                                                                                                                                       # runtime/autogen/libc.py:1329
                              sethostname.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                             # runtime/autogen/libc.py:1330
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1333
                              sethostid = _libraries['libc'].sethostid                                                                                                                                   # runtime/autogen/libc.py:1334
                              sethostid.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1335
                              sethostid.argtypes = [ctypes.c_int64]                                                                                                                                      # runtime/autogen/libc.py:1336
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1339
                              getdomainname = _libraries['libc'].getdomainname                                                                                                                           # runtime/autogen/libc.py:1340
                              getdomainname.restype = ctypes.c_int32                                                                                                                                     # runtime/autogen/libc.py:1341
                              getdomainname.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                           # runtime/autogen/libc.py:1342
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1345
                              setdomainname = _libraries['libc'].setdomainname                                                                                                                           # runtime/autogen/libc.py:1346
                              setdomainname.restype = ctypes.c_int32                                                                                                                                     # runtime/autogen/libc.py:1347
                              setdomainname.argtypes = [ctypes.POINTER(ctypes.c_char), size_t]                                                                                                           # runtime/autogen/libc.py:1348
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1351
                              vhangup = _libraries['libc'].vhangup                                                                                                                                       # runtime/autogen/libc.py:1352
                              vhangup.restype = ctypes.c_int32                                                                                                                                           # runtime/autogen/libc.py:1353
                              vhangup.argtypes = []                                                                                                                                                      # runtime/autogen/libc.py:1354
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1357
                              revoke = _libraries['libc'].revoke                                                                                                                                         # runtime/autogen/libc.py:1358
                              revoke.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1359
                              revoke.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                          # runtime/autogen/libc.py:1360
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1363
                              profil = _libraries['libc'].profil                                                                                                                                         # runtime/autogen/libc.py:1364
                              profil.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1365
                              profil.argtypes = [ctypes.POINTER(ctypes.c_uint16), size_t, size_t, ctypes.c_uint32]                                                                                       # runtime/autogen/libc.py:1366
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1369
                              acct = _libraries['libc'].acct                                                                                                                                             # runtime/autogen/libc.py:1370
                              acct.restype = ctypes.c_int32                                                                                                                                              # runtime/autogen/libc.py:1371
                              acct.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                            # runtime/autogen/libc.py:1372
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1375
                              getusershell = _libraries['libc'].getusershell                                                                                                                             # runtime/autogen/libc.py:1376
                              getusershell.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                       # runtime/autogen/libc.py:1377
                              getusershell.argtypes = []                                                                                                                                                 # runtime/autogen/libc.py:1378
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1381
                              endusershell = _libraries['libc'].endusershell                                                                                                                             # runtime/autogen/libc.py:1382
                              endusershell.restype = None                                                                                                                                                # runtime/autogen/libc.py:1383
                              endusershell.argtypes = []                                                                                                                                                 # runtime/autogen/libc.py:1384
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1387
                              setusershell = _libraries['libc'].setusershell                                                                                                                             # runtime/autogen/libc.py:1388
                              setusershell.restype = None                                                                                                                                                # runtime/autogen/libc.py:1389
                              setusershell.argtypes = []                                                                                                                                                 # runtime/autogen/libc.py:1390
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1393
                              daemon = _libraries['libc'].daemon                                                                                                                                         # runtime/autogen/libc.py:1394
                              daemon.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1395
                              daemon.argtypes = [ctypes.c_int32, ctypes.c_int32]                                                                                                                         # runtime/autogen/libc.py:1396
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1399
                              chroot = _libraries['libc'].chroot                                                                                                                                         # runtime/autogen/libc.py:1400
                              chroot.restype = ctypes.c_int32                                                                                                                                            # runtime/autogen/libc.py:1401
                              chroot.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                          # runtime/autogen/libc.py:1402
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1405
                              getpass = _libraries['libc'].getpass                                                                                                                                       # runtime/autogen/libc.py:1406
                              getpass.restype = ctypes.POINTER(ctypes.c_char)                                                                                                                            # runtime/autogen/libc.py:1407
                              getpass.argtypes = [ctypes.POINTER(ctypes.c_char)]                                                                                                                         # runtime/autogen/libc.py:1408
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1411
                              fsync = _libraries['libc'].fsync                                                                                                                                           # runtime/autogen/libc.py:1412
                              fsync.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1413
                              fsync.argtypes = [ctypes.c_int32]                                                                                                                                          # runtime/autogen/libc.py:1414
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1417
                              gethostid = _libraries['libc'].gethostid                                                                                                                                   # runtime/autogen/libc.py:1418
                              gethostid.restype = ctypes.c_int64                                                                                                                                         # runtime/autogen/libc.py:1419
                              gethostid.argtypes = []                                                                                                                                                    # runtime/autogen/libc.py:1420
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1423
                              sync = _libraries['libc'].sync                                                                                                                                             # runtime/autogen/libc.py:1424
                              sync.restype = None                                                                                                                                                        # runtime/autogen/libc.py:1425
                              sync.argtypes = []                                                                                                                                                         # runtime/autogen/libc.py:1426
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1429
                              getpagesize = _libraries['libc'].getpagesize                                                                                                                               # runtime/autogen/libc.py:1430
                              getpagesize.restype = ctypes.c_int32                                                                                                                                       # runtime/autogen/libc.py:1431
                              getpagesize.argtypes = []                                                                                                                                                  # runtime/autogen/libc.py:1432
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1435
                              getdtablesize = _libraries['libc'].getdtablesize                                                                                                                           # runtime/autogen/libc.py:1436
                              getdtablesize.restype = ctypes.c_int32                                                                                                                                     # runtime/autogen/libc.py:1437
                              getdtablesize.argtypes = []                                                                                                                                                # runtime/autogen/libc.py:1438
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1441
                              truncate = _libraries['libc'].truncate                                                                                                                                     # runtime/autogen/libc.py:1442
                              truncate.restype = ctypes.c_int32                                                                                                                                          # runtime/autogen/libc.py:1443
                              truncate.argtypes = [ctypes.POINTER(ctypes.c_char), __off_t]                                                                                                               # runtime/autogen/libc.py:1444
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1447
                              ftruncate = _libraries['libc'].ftruncate                                                                                                                                   # runtime/autogen/libc.py:1448
                              ftruncate.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1449
                              ftruncate.argtypes = [ctypes.c_int32, __off_t]                                                                                                                             # runtime/autogen/libc.py:1450
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1453
                              brk = _libraries['libc'].brk                                                                                                                                               # runtime/autogen/libc.py:1454
                              brk.restype = ctypes.c_int32                                                                                                                                               # runtime/autogen/libc.py:1455
                              brk.argtypes = [ctypes.POINTER(None)]                                                                                                                                      # runtime/autogen/libc.py:1456
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1459
                              sbrk = _libraries['libc'].sbrk                                                                                                                                             # runtime/autogen/libc.py:1460
                              sbrk.restype = ctypes.POINTER(None)                                                                                                                                        # runtime/autogen/libc.py:1461
                              sbrk.argtypes = [intptr_t]                                                                                                                                                 # runtime/autogen/libc.py:1462
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1465
                              syscall = _libraries['libc'].syscall                                                                                                                                       # runtime/autogen/libc.py:1466
                              syscall.restype = ctypes.c_int64                                                                                                                                           # runtime/autogen/libc.py:1467
                              syscall.argtypes = [ctypes.c_int64]                                                                                                                                        # runtime/autogen/libc.py:1468
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1471
                              lockf = _libraries['libc'].lockf                                                                                                                                           # runtime/autogen/libc.py:1472
                              lockf.restype = ctypes.c_int32                                                                                                                                             # runtime/autogen/libc.py:1473
                              lockf.argtypes = [ctypes.c_int32, ctypes.c_int32, __off_t]                                                                                                                 # runtime/autogen/libc.py:1474
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1477
                              fdatasync = _libraries['libc'].fdatasync                                                                                                                                   # runtime/autogen/libc.py:1478
                              fdatasync.restype = ctypes.c_int32                                                                                                                                         # runtime/autogen/libc.py:1479
                              fdatasync.argtypes = [ctypes.c_int32]                                                                                                                                      # runtime/autogen/libc.py:1480
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1483
                              crypt = _libraries['libc'].crypt                                                                                                                                           # runtime/autogen/libc.py:1484
                          except AttributeError:                                                                                                                                                         # runtime/autogen/libc.py:1487
                              pass                                                                                                                                                                       # runtime/autogen/libc.py:1488
                          try:                                                                                                                                                                           # runtime/autogen/libc.py:1489
                              getentropy = _libraries['libc'].getentropy                                                                                                                                 # runtime/autogen/libc.py:1490
                              getentropy.restype = ctypes.c_int32                                                                                                                                        # runtime/autogen/libc.py:1491
                              getentropy.argtypes = [ctypes.POINTER(None), size_t]                                                                                                                       # runtime/autogen/libc.py:1492
                          __all__ = \                                                                                                                                                                    # runtime/autogen/libc.py:1495
                              ['Elf32_Addr', 'Elf32_Chdr', 'Elf32_Conflict', 'Elf32_Dyn',
                              'Elf32_Ehdr', 'Elf32_Half', 'Elf32_Lib', 'Elf32_Move',
                              'Elf32_Nhdr', 'Elf32_Off', 'Elf32_Phdr', 'Elf32_RegInfo',
                              'Elf32_Rel', 'Elf32_Rela', 'Elf32_Section', 'Elf32_Shdr',
                              'Elf32_Sword', 'Elf32_Sxword', 'Elf32_Sym', 'Elf32_Syminfo',
                              'Elf32_Verdaux', 'Elf32_Verdef', 'Elf32_Vernaux', 'Elf32_Verneed',
                              'Elf32_Versym', 'Elf32_Word', 'Elf32_Xword', 'Elf32_auxv_t',
                              'Elf32_gptab', 'Elf64_Addr', 'Elf64_Chdr', 'Elf64_Dyn',
                              'Elf64_Ehdr', 'Elf64_Half', 'Elf64_Lib', 'Elf64_Move',
                              'Elf64_Nhdr', 'Elf64_Off', 'Elf64_Phdr', 'Elf64_Rel',
                              'Elf64_Rela', 'Elf64_Section', 'Elf64_Shdr', 'Elf64_Sword',
                              'Elf64_Sxword', 'Elf64_Sym', 'Elf64_Syminfo', 'Elf64_Verdaux',
                              'Elf64_Verdef', 'Elf64_Vernaux', 'Elf64_Verneed', 'Elf64_Versym',
                              'Elf64_Word', 'Elf64_Xword', 'Elf64_auxv_t',
                              'Elf_MIPS_ABIFlags_v0', 'Elf_Options', 'Elf_Options_Hw',
                              'Val_GNU_MIPS_ABI_FP_64', 'Val_GNU_MIPS_ABI_FP_64A',
                              'Val_GNU_MIPS_ABI_FP_ANY', 'Val_GNU_MIPS_ABI_FP_DOUBLE',
                              'Val_GNU_MIPS_ABI_FP_MAX', 'Val_GNU_MIPS_ABI_FP_OLD_64',
                              'Val_GNU_MIPS_ABI_FP_SINGLE', 'Val_GNU_MIPS_ABI_FP_SOFT',
                              'Val_GNU_MIPS_ABI_FP_XX', '__environ', '__getpgid', '__gid_t',
                              '__off_t', '__pid_t', '__uid_t', '__useconds_t', '_exit',
                              'access', 'acct', 'alarm', 'brk', 'c__Ea_Val_GNU_MIPS_ABI_FP_ANY',
                              'chdir', 'chown', 'chroot', 'close', 'closefrom', 'confstr',
                              'crypt', 'daemon', 'dup', 'dup2', 'endusershell', 'execl',
                              'execle', 'execlp', 'execv', 'execve', 'execvp', 'faccessat',
                              'fchdir', 'fchown', 'fchownat', 'fdatasync', 'fexecve', 'fork',
                              'fpathconf', 'fsync', 'ftruncate', 'getcwd', 'getdomainname',
                              'getdtablesize', 'getegid', 'getentropy', 'geteuid', 'getgid',
                              'getgroups', 'gethostid', 'gethostname', 'getlogin', 'getlogin_r',
                              'getpagesize', 'getpass', 'getpgid', 'getpgrp', 'getpid',
                              'getppid', 'getsid', 'getuid', 'getusershell', 'getwd', 'gid_t',
                              'intptr_t', 'isatty', 'lchown', 'link', 'linkat', 'lockf',
                              'lseek', 'madvise', 'mincore', 'mlock', 'mlockall', 'mmap',
                              'mode_t', 'mprotect', 'msync', 'munlock', 'munlockall', 'munmap',
                              'nice', 'off_t', 'pathconf', 'pause', 'pid_t', 'pipe',
                              'posix_madvise', 'pread', 'profil', 'pwrite', 'read', 'readlink',
                              'readlinkat', 'revoke', 'rmdir', 'sbrk', 'setdomainname',
                              'setegid', 'seteuid', 'setgid', 'sethostid', 'sethostname',
                              'setlogin', 'setpgid', 'setpgrp', 'setregid', 'setreuid',
                              'setsid', 'setuid', 'setusershell', 'shm_open', 'shm_unlink',
                              'size_t', 'sleep', 'socklen_t', 'ssize_t',
                              'struct_c__SA_Elf32_Chdr', 'struct_c__SA_Elf32_Dyn',
                              'struct_c__SA_Elf32_Ehdr', 'struct_c__SA_Elf32_Lib',
                              'struct_c__SA_Elf32_Move', 'struct_c__SA_Elf32_Nhdr',
                              'struct_c__SA_Elf32_Phdr', 'struct_c__SA_Elf32_RegInfo',
                              'struct_c__SA_Elf32_Rel', 'struct_c__SA_Elf32_Rela',
                              'struct_c__SA_Elf32_Shdr', 'struct_c__SA_Elf32_Sym',
                              'struct_c__SA_Elf32_Syminfo', 'struct_c__SA_Elf32_Verdaux',
                              'struct_c__SA_Elf32_Verdef', 'struct_c__SA_Elf32_Vernaux',
                              'struct_c__SA_Elf32_Verneed', 'struct_c__SA_Elf32_auxv_t',
                              'struct_c__SA_Elf64_Chdr', 'struct_c__SA_Elf64_Dyn',
                              'struct_c__SA_Elf64_Ehdr', 'struct_c__SA_Elf64_Lib',
                              'struct_c__SA_Elf64_Move', 'struct_c__SA_Elf64_Nhdr',
                              'struct_c__SA_Elf64_Phdr', 'struct_c__SA_Elf64_Rel',
                              'struct_c__SA_Elf64_Rela', 'struct_c__SA_Elf64_Shdr',
                              'struct_c__SA_Elf64_Sym', 'struct_c__SA_Elf64_Syminfo',
                              'struct_c__SA_Elf64_Verdaux', 'struct_c__SA_Elf64_Verdef',
                              'struct_c__SA_Elf64_Vernaux', 'struct_c__SA_Elf64_Verneed',
                              'struct_c__SA_Elf64_auxv_t', 'struct_c__SA_Elf_MIPS_ABIFlags_v0',
                              'struct_c__SA_Elf_Options', 'struct_c__SA_Elf_Options_Hw',
                              'struct_c__UA_Elf32_gptab_gt_entry',
                              'struct_c__UA_Elf32_gptab_gt_header', 'symlink', 'symlinkat',
                              'sync', 'syscall', 'sysconf', 'tcgetpgrp', 'tcsetpgrp',
                              'truncate', 'ttyname', 'ttyname_r', 'ttyslot', 'ualarm', 'uid_t',
                              'union_c__SA_Elf32_Dyn_d_un', 'union_c__SA_Elf32_auxv_t_a_un',
                              'union_c__SA_Elf64_Dyn_d_un', 'union_c__SA_Elf64_auxv_t_a_un',
                              'union_c__UA_Elf32_gptab', 'unlink', 'unlinkat', 'useconds_t',
                              'usleep', 'vfork', 'vhangup', 'write']
                          _ELF_H = 1                                                                                                                                                                     # runtime/autogen/libc.py:1564
                          EI_NIDENT = (16)                                                                                                                                                               # runtime/autogen/libc.py:1565
                          EI_MAG0 = 0                                                                                                                                                                    # runtime/autogen/libc.py:1566
                          ELFMAG0 = 0x7f                                                                                                                                                                 # runtime/autogen/libc.py:1567
                          EI_MAG1 = 1                                                                                                                                                                    # runtime/autogen/libc.py:1568
                          ELFMAG1 = 'E'                                                                                                                                                                  # runtime/autogen/libc.py:1569
                          EI_MAG2 = 2                                                                                                                                                                    # runtime/autogen/libc.py:1570
                          ELFMAG2 = 'L'                                                                                                                                                                  # runtime/autogen/libc.py:1571
                          EI_MAG3 = 3                                                                                                                                                                    # runtime/autogen/libc.py:1572
                          ELFMAG3 = 'F'                                                                                                                                                                  # runtime/autogen/libc.py:1573
                          ELFMAG = "\177ELF"                                                                                                                                                             # runtime/autogen/libc.py:1574
                          SELFMAG = 4                                                                                                                                                                    # runtime/autogen/libc.py:1575
                          EI_CLASS = 4                                                                                                                                                                   # runtime/autogen/libc.py:1576
                          ELFCLASSNONE = 0                                                                                                                                                               # runtime/autogen/libc.py:1577
                          ELFCLASS32 = 1                                                                                                                                                                 # runtime/autogen/libc.py:1578
                          ELFCLASS64 = 2                                                                                                                                                                 # runtime/autogen/libc.py:1579
                          ELFCLASSNUM = 3                                                                                                                                                                # runtime/autogen/libc.py:1580
                          EI_DATA = 5                                                                                                                                                                    # runtime/autogen/libc.py:1581
                          ELFDATANONE = 0                                                                                                                                                                # runtime/autogen/libc.py:1582
                          ELFDATA2LSB = 1                                                                                                                                                                # runtime/autogen/libc.py:1583
                          ELFDATA2MSB = 2                                                                                                                                                                # runtime/autogen/libc.py:1584
                          ELFDATANUM = 3                                                                                                                                                                 # runtime/autogen/libc.py:1585
                          EI_VERSION = 6                                                                                                                                                                 # runtime/autogen/libc.py:1586
                          EI_OSABI = 7                                                                                                                                                                   # runtime/autogen/libc.py:1587
                          ELFOSABI_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:1588
                          ELFOSABI_SYSV = 0                                                                                                                                                              # runtime/autogen/libc.py:1589
                          ELFOSABI_HPUX = 1                                                                                                                                                              # runtime/autogen/libc.py:1590
                          ELFOSABI_NETBSD = 2                                                                                                                                                            # runtime/autogen/libc.py:1591
                          ELFOSABI_GNU = 3                                                                                                                                                               # runtime/autogen/libc.py:1592
                          ELFOSABI_LINUX = ELFOSABI_GNU                                                                                                                                                  # runtime/autogen/libc.py:1593
                          ELFOSABI_SOLARIS = 6                                                                                                                                                           # runtime/autogen/libc.py:1594
                          ELFOSABI_AIX = 7                                                                                                                                                               # runtime/autogen/libc.py:1595
                          ELFOSABI_IRIX = 8                                                                                                                                                              # runtime/autogen/libc.py:1596
                          ELFOSABI_FREEBSD = 9                                                                                                                                                           # runtime/autogen/libc.py:1597
                          ELFOSABI_TRU64 = 10                                                                                                                                                            # runtime/autogen/libc.py:1598
                          ELFOSABI_MODESTO = 11                                                                                                                                                          # runtime/autogen/libc.py:1599
                          ELFOSABI_OPENBSD = 12                                                                                                                                                          # runtime/autogen/libc.py:1600
                          ELFOSABI_ARM_AEABI = 64                                                                                                                                                        # runtime/autogen/libc.py:1601
                          ELFOSABI_ARM = 97                                                                                                                                                              # runtime/autogen/libc.py:1602
                          ELFOSABI_STANDALONE = 255                                                                                                                                                      # runtime/autogen/libc.py:1603
                          EI_ABIVERSION = 8                                                                                                                                                              # runtime/autogen/libc.py:1604
                          EI_PAD = 9                                                                                                                                                                     # runtime/autogen/libc.py:1605
                          ET_NONE = 0                                                                                                                                                                    # runtime/autogen/libc.py:1606
                          ET_REL = 1                                                                                                                                                                     # runtime/autogen/libc.py:1607
                          ET_EXEC = 2                                                                                                                                                                    # runtime/autogen/libc.py:1608
                          ET_DYN = 3                                                                                                                                                                     # runtime/autogen/libc.py:1609
                          ET_CORE = 4                                                                                                                                                                    # runtime/autogen/libc.py:1610
                          ET_NUM = 5                                                                                                                                                                     # runtime/autogen/libc.py:1611
                          ET_LOOS = 0xfe00                                                                                                                                                               # runtime/autogen/libc.py:1612
                          ET_HIOS = 0xfeff                                                                                                                                                               # runtime/autogen/libc.py:1613
                          ET_LOPROC = 0xff00                                                                                                                                                             # runtime/autogen/libc.py:1614
                          ET_HIPROC = 0xffff                                                                                                                                                             # runtime/autogen/libc.py:1615
                          EM_NONE = 0                                                                                                                                                                    # runtime/autogen/libc.py:1616
                          EM_M32 = 1                                                                                                                                                                     # runtime/autogen/libc.py:1617
                          EM_SPARC = 2                                                                                                                                                                   # runtime/autogen/libc.py:1618
                          EM_386 = 3                                                                                                                                                                     # runtime/autogen/libc.py:1619
                          EM_68K = 4                                                                                                                                                                     # runtime/autogen/libc.py:1620
                          EM_88K = 5                                                                                                                                                                     # runtime/autogen/libc.py:1621
                          EM_IAMCU = 6                                                                                                                                                                   # runtime/autogen/libc.py:1622
                          EM_860 = 7                                                                                                                                                                     # runtime/autogen/libc.py:1623
                          EM_MIPS = 8                                                                                                                                                                    # runtime/autogen/libc.py:1624
                          EM_S370 = 9                                                                                                                                                                    # runtime/autogen/libc.py:1625
                          EM_MIPS_RS3_LE = 10                                                                                                                                                            # runtime/autogen/libc.py:1626
                          EM_PARISC = 15                                                                                                                                                                 # runtime/autogen/libc.py:1627
                          EM_VPP500 = 17                                                                                                                                                                 # runtime/autogen/libc.py:1628
                          EM_SPARC32PLUS = 18                                                                                                                                                            # runtime/autogen/libc.py:1629
                          EM_960 = 19                                                                                                                                                                    # runtime/autogen/libc.py:1630
                          EM_PPC = 20                                                                                                                                                                    # runtime/autogen/libc.py:1631
                          EM_PPC64 = 21                                                                                                                                                                  # runtime/autogen/libc.py:1632
                          EM_S390 = 22                                                                                                                                                                   # runtime/autogen/libc.py:1633
                          EM_SPU = 23                                                                                                                                                                    # runtime/autogen/libc.py:1634
                          EM_V800 = 36                                                                                                                                                                   # runtime/autogen/libc.py:1635
                          EM_FR20 = 37                                                                                                                                                                   # runtime/autogen/libc.py:1636
                          EM_RH32 = 38                                                                                                                                                                   # runtime/autogen/libc.py:1637
                          EM_RCE = 39                                                                                                                                                                    # runtime/autogen/libc.py:1638
                          EM_ARM = 40                                                                                                                                                                    # runtime/autogen/libc.py:1639
                          EM_FAKE_ALPHA = 41                                                                                                                                                             # runtime/autogen/libc.py:1640
                          EM_SH = 42                                                                                                                                                                     # runtime/autogen/libc.py:1641
                          EM_SPARCV9 = 43                                                                                                                                                                # runtime/autogen/libc.py:1642
                          EM_TRICORE = 44                                                                                                                                                                # runtime/autogen/libc.py:1643
                          EM_ARC = 45                                                                                                                                                                    # runtime/autogen/libc.py:1644
                          EM_H8_300 = 46                                                                                                                                                                 # runtime/autogen/libc.py:1645
                          EM_H8_300H = 47                                                                                                                                                                # runtime/autogen/libc.py:1646
                          EM_H8S = 48                                                                                                                                                                    # runtime/autogen/libc.py:1647
                          EM_H8_500 = 49                                                                                                                                                                 # runtime/autogen/libc.py:1648
                          EM_IA_64 = 50                                                                                                                                                                  # runtime/autogen/libc.py:1649
                          EM_MIPS_X = 51                                                                                                                                                                 # runtime/autogen/libc.py:1650
                          EM_COLDFIRE = 52                                                                                                                                                               # runtime/autogen/libc.py:1651
                          EM_68HC12 = 53                                                                                                                                                                 # runtime/autogen/libc.py:1652
                          EM_MMA = 54                                                                                                                                                                    # runtime/autogen/libc.py:1653
                          EM_PCP = 55                                                                                                                                                                    # runtime/autogen/libc.py:1654
                          EM_NCPU = 56                                                                                                                                                                   # runtime/autogen/libc.py:1655
                          EM_NDR1 = 57                                                                                                                                                                   # runtime/autogen/libc.py:1656
                          EM_STARCORE = 58                                                                                                                                                               # runtime/autogen/libc.py:1657
                          EM_ME16 = 59                                                                                                                                                                   # runtime/autogen/libc.py:1658
                          EM_ST100 = 60                                                                                                                                                                  # runtime/autogen/libc.py:1659
                          EM_TINYJ = 61                                                                                                                                                                  # runtime/autogen/libc.py:1660
                          EM_X86_64 = 62                                                                                                                                                                 # runtime/autogen/libc.py:1661
                          EM_PDSP = 63                                                                                                                                                                   # runtime/autogen/libc.py:1662
                          EM_PDP10 = 64                                                                                                                                                                  # runtime/autogen/libc.py:1663
                          EM_PDP11 = 65                                                                                                                                                                  # runtime/autogen/libc.py:1664
                          EM_FX66 = 66                                                                                                                                                                   # runtime/autogen/libc.py:1665
                          EM_ST9PLUS = 67                                                                                                                                                                # runtime/autogen/libc.py:1666
                          EM_ST7 = 68                                                                                                                                                                    # runtime/autogen/libc.py:1667
                          EM_68HC16 = 69                                                                                                                                                                 # runtime/autogen/libc.py:1668
                          EM_68HC11 = 70                                                                                                                                                                 # runtime/autogen/libc.py:1669
                          EM_68HC08 = 71                                                                                                                                                                 # runtime/autogen/libc.py:1670
                          EM_68HC05 = 72                                                                                                                                                                 # runtime/autogen/libc.py:1671
                          EM_SVX = 73                                                                                                                                                                    # runtime/autogen/libc.py:1672
                          EM_ST19 = 74                                                                                                                                                                   # runtime/autogen/libc.py:1673
                          EM_VAX = 75                                                                                                                                                                    # runtime/autogen/libc.py:1674
                          EM_CRIS = 76                                                                                                                                                                   # runtime/autogen/libc.py:1675
                          EM_JAVELIN = 77                                                                                                                                                                # runtime/autogen/libc.py:1676
                          EM_FIREPATH = 78                                                                                                                                                               # runtime/autogen/libc.py:1677
                          EM_ZSP = 79                                                                                                                                                                    # runtime/autogen/libc.py:1678
                          EM_MMIX = 80                                                                                                                                                                   # runtime/autogen/libc.py:1679
                          EM_HUANY = 81                                                                                                                                                                  # runtime/autogen/libc.py:1680
                          EM_PRISM = 82                                                                                                                                                                  # runtime/autogen/libc.py:1681
                          EM_AVR = 83                                                                                                                                                                    # runtime/autogen/libc.py:1682
                          EM_FR30 = 84                                                                                                                                                                   # runtime/autogen/libc.py:1683
                          EM_D10V = 85                                                                                                                                                                   # runtime/autogen/libc.py:1684
                          EM_D30V = 86                                                                                                                                                                   # runtime/autogen/libc.py:1685
                          EM_V850 = 87                                                                                                                                                                   # runtime/autogen/libc.py:1686
                          EM_M32R = 88                                                                                                                                                                   # runtime/autogen/libc.py:1687
                          EM_MN10300 = 89                                                                                                                                                                # runtime/autogen/libc.py:1688
                          EM_MN10200 = 90                                                                                                                                                                # runtime/autogen/libc.py:1689
                          EM_PJ = 91                                                                                                                                                                     # runtime/autogen/libc.py:1690
                          EM_OPENRISC = 92                                                                                                                                                               # runtime/autogen/libc.py:1691
                          EM_ARC_COMPACT = 93                                                                                                                                                            # runtime/autogen/libc.py:1692
                          EM_XTENSA = 94                                                                                                                                                                 # runtime/autogen/libc.py:1693
                          EM_VIDEOCORE = 95                                                                                                                                                              # runtime/autogen/libc.py:1694
                          EM_TMM_GPP = 96                                                                                                                                                                # runtime/autogen/libc.py:1695
                          EM_NS32K = 97                                                                                                                                                                  # runtime/autogen/libc.py:1696
                          EM_TPC = 98                                                                                                                                                                    # runtime/autogen/libc.py:1697
                          EM_SNP1K = 99                                                                                                                                                                  # runtime/autogen/libc.py:1698
                          EM_ST200 = 100                                                                                                                                                                 # runtime/autogen/libc.py:1699
                          EM_IP2K = 101                                                                                                                                                                  # runtime/autogen/libc.py:1700
                          EM_MAX = 102                                                                                                                                                                   # runtime/autogen/libc.py:1701
                          EM_CR = 103                                                                                                                                                                    # runtime/autogen/libc.py:1702
                          EM_F2MC16 = 104                                                                                                                                                                # runtime/autogen/libc.py:1703
                          EM_MSP430 = 105                                                                                                                                                                # runtime/autogen/libc.py:1704
                          EM_BLACKFIN = 106                                                                                                                                                              # runtime/autogen/libc.py:1705
                          EM_SE_C33 = 107                                                                                                                                                                # runtime/autogen/libc.py:1706
                          EM_SEP = 108                                                                                                                                                                   # runtime/autogen/libc.py:1707
                          EM_ARCA = 109                                                                                                                                                                  # runtime/autogen/libc.py:1708
                          EM_UNICORE = 110                                                                                                                                                               # runtime/autogen/libc.py:1709
                          EM_EXCESS = 111                                                                                                                                                                # runtime/autogen/libc.py:1710
                          EM_DXP = 112                                                                                                                                                                   # runtime/autogen/libc.py:1711
                          EM_ALTERA_NIOS2 = 113                                                                                                                                                          # runtime/autogen/libc.py:1712
                          EM_CRX = 114                                                                                                                                                                   # runtime/autogen/libc.py:1713
                          EM_XGATE = 115                                                                                                                                                                 # runtime/autogen/libc.py:1714
                          EM_C166 = 116                                                                                                                                                                  # runtime/autogen/libc.py:1715
                          EM_M16C = 117                                                                                                                                                                  # runtime/autogen/libc.py:1716
                          EM_DSPIC30F = 118                                                                                                                                                              # runtime/autogen/libc.py:1717
                          EM_CE = 119                                                                                                                                                                    # runtime/autogen/libc.py:1718
                          EM_M32C = 120                                                                                                                                                                  # runtime/autogen/libc.py:1719
                          EM_TSK3000 = 131                                                                                                                                                               # runtime/autogen/libc.py:1720
                          EM_RS08 = 132                                                                                                                                                                  # runtime/autogen/libc.py:1721
                          EM_SHARC = 133                                                                                                                                                                 # runtime/autogen/libc.py:1722
                          EM_ECOG2 = 134                                                                                                                                                                 # runtime/autogen/libc.py:1723
                          EM_SCORE7 = 135                                                                                                                                                                # runtime/autogen/libc.py:1724
                          EM_DSP24 = 136                                                                                                                                                                 # runtime/autogen/libc.py:1725
                          EM_VIDEOCORE3 = 137                                                                                                                                                            # runtime/autogen/libc.py:1726
                          EM_LATTICEMICO32 = 138                                                                                                                                                         # runtime/autogen/libc.py:1727
                          EM_SE_C17 = 139                                                                                                                                                                # runtime/autogen/libc.py:1728
                          EM_TI_C6000 = 140                                                                                                                                                              # runtime/autogen/libc.py:1729
                          EM_TI_C2000 = 141                                                                                                                                                              # runtime/autogen/libc.py:1730
                          EM_TI_C5500 = 142                                                                                                                                                              # runtime/autogen/libc.py:1731
                          EM_TI_ARP32 = 143                                                                                                                                                              # runtime/autogen/libc.py:1732
                          EM_TI_PRU = 144                                                                                                                                                                # runtime/autogen/libc.py:1733
                          EM_MMDSP_PLUS = 160                                                                                                                                                            # runtime/autogen/libc.py:1734
                          EM_CYPRESS_M8C = 161                                                                                                                                                           # runtime/autogen/libc.py:1735
                          EM_R32C = 162                                                                                                                                                                  # runtime/autogen/libc.py:1736
                          EM_TRIMEDIA = 163                                                                                                                                                              # runtime/autogen/libc.py:1737
                          EM_QDSP6 = 164                                                                                                                                                                 # runtime/autogen/libc.py:1738
                          EM_8051 = 165                                                                                                                                                                  # runtime/autogen/libc.py:1739
                          EM_STXP7X = 166                                                                                                                                                                # runtime/autogen/libc.py:1740
                          EM_NDS32 = 167                                                                                                                                                                 # runtime/autogen/libc.py:1741
                          EM_ECOG1X = 168                                                                                                                                                                # runtime/autogen/libc.py:1742
                          EM_MAXQ30 = 169                                                                                                                                                                # runtime/autogen/libc.py:1743
                          EM_XIMO16 = 170                                                                                                                                                                # runtime/autogen/libc.py:1744
                          EM_MANIK = 171                                                                                                                                                                 # runtime/autogen/libc.py:1745
                          EM_CRAYNV2 = 172                                                                                                                                                               # runtime/autogen/libc.py:1746
                          EM_RX = 173                                                                                                                                                                    # runtime/autogen/libc.py:1747
                          EM_METAG = 174                                                                                                                                                                 # runtime/autogen/libc.py:1748
                          EM_MCST_ELBRUS = 175                                                                                                                                                           # runtime/autogen/libc.py:1749
                          EM_ECOG16 = 176                                                                                                                                                                # runtime/autogen/libc.py:1750
                          EM_CR16 = 177                                                                                                                                                                  # runtime/autogen/libc.py:1751
                          EM_ETPU = 178                                                                                                                                                                  # runtime/autogen/libc.py:1752
                          EM_SLE9X = 179                                                                                                                                                                 # runtime/autogen/libc.py:1753
                          EM_L10M = 180                                                                                                                                                                  # runtime/autogen/libc.py:1754
                          EM_K10M = 181                                                                                                                                                                  # runtime/autogen/libc.py:1755
                          EM_AARCH64 = 183                                                                                                                                                               # runtime/autogen/libc.py:1756
                          EM_AVR32 = 185                                                                                                                                                                 # runtime/autogen/libc.py:1757
                          EM_STM8 = 186                                                                                                                                                                  # runtime/autogen/libc.py:1758
                          EM_TILE64 = 187                                                                                                                                                                # runtime/autogen/libc.py:1759
                          EM_TILEPRO = 188                                                                                                                                                               # runtime/autogen/libc.py:1760
                          EM_MICROBLAZE = 189                                                                                                                                                            # runtime/autogen/libc.py:1761
                          EM_CUDA = 190                                                                                                                                                                  # runtime/autogen/libc.py:1762
                          EM_TILEGX = 191                                                                                                                                                                # runtime/autogen/libc.py:1763
                          EM_CLOUDSHIELD = 192                                                                                                                                                           # runtime/autogen/libc.py:1764
                          EM_COREA_1ST = 193                                                                                                                                                             # runtime/autogen/libc.py:1765
                          EM_COREA_2ND = 194                                                                                                                                                             # runtime/autogen/libc.py:1766
                          EM_ARCV2 = 195                                                                                                                                                                 # runtime/autogen/libc.py:1767
                          EM_OPEN8 = 196                                                                                                                                                                 # runtime/autogen/libc.py:1768
                          EM_RL78 = 197                                                                                                                                                                  # runtime/autogen/libc.py:1769
                          EM_VIDEOCORE5 = 198                                                                                                                                                            # runtime/autogen/libc.py:1770
                          EM_78KOR = 199                                                                                                                                                                 # runtime/autogen/libc.py:1771
                          EM_56800EX = 200                                                                                                                                                               # runtime/autogen/libc.py:1772
                          EM_BA1 = 201                                                                                                                                                                   # runtime/autogen/libc.py:1773
                          EM_BA2 = 202                                                                                                                                                                   # runtime/autogen/libc.py:1774
                          EM_XCORE = 203                                                                                                                                                                 # runtime/autogen/libc.py:1775
                          EM_MCHP_PIC = 204                                                                                                                                                              # runtime/autogen/libc.py:1776
                          EM_INTELGT = 205                                                                                                                                                               # runtime/autogen/libc.py:1777
                          EM_KM32 = 210                                                                                                                                                                  # runtime/autogen/libc.py:1778
                          EM_KMX32 = 211                                                                                                                                                                 # runtime/autogen/libc.py:1779
                          EM_EMX16 = 212                                                                                                                                                                 # runtime/autogen/libc.py:1780
                          EM_EMX8 = 213                                                                                                                                                                  # runtime/autogen/libc.py:1781
                          EM_KVARC = 214                                                                                                                                                                 # runtime/autogen/libc.py:1782
                          EM_CDP = 215                                                                                                                                                                   # runtime/autogen/libc.py:1783
                          EM_COGE = 216                                                                                                                                                                  # runtime/autogen/libc.py:1784
                          EM_COOL = 217                                                                                                                                                                  # runtime/autogen/libc.py:1785
                          EM_NORC = 218                                                                                                                                                                  # runtime/autogen/libc.py:1786
                          EM_CSR_KALIMBA = 219                                                                                                                                                           # runtime/autogen/libc.py:1787
                          EM_Z80 = 220                                                                                                                                                                   # runtime/autogen/libc.py:1788
                          EM_VISIUM = 221                                                                                                                                                                # runtime/autogen/libc.py:1789
                          EM_FT32 = 222                                                                                                                                                                  # runtime/autogen/libc.py:1790
                          EM_MOXIE = 223                                                                                                                                                                 # runtime/autogen/libc.py:1791
                          EM_AMDGPU = 224                                                                                                                                                                # runtime/autogen/libc.py:1792
                          EM_RISCV = 243                                                                                                                                                                 # runtime/autogen/libc.py:1793
                          EM_BPF = 247                                                                                                                                                                   # runtime/autogen/libc.py:1794
                          EM_CSKY = 252                                                                                                                                                                  # runtime/autogen/libc.py:1795
                          EM_NUM = 253                                                                                                                                                                   # runtime/autogen/libc.py:1796
                          EM_ARC_A5 = EM_ARC_COMPACT                                                                                                                                                     # runtime/autogen/libc.py:1797
                          EM_ALPHA = 0x9026                                                                                                                                                              # runtime/autogen/libc.py:1798
                          EV_NONE = 0                                                                                                                                                                    # runtime/autogen/libc.py:1799
                          EV_CURRENT = 1                                                                                                                                                                 # runtime/autogen/libc.py:1800
                          EV_NUM = 2                                                                                                                                                                     # runtime/autogen/libc.py:1801
                          SHN_UNDEF = 0                                                                                                                                                                  # runtime/autogen/libc.py:1802
                          SHN_LORESERVE = 0xff00                                                                                                                                                         # runtime/autogen/libc.py:1803
                          SHN_LOPROC = 0xff00                                                                                                                                                            # runtime/autogen/libc.py:1804
                          SHN_HIPROC = 0xff1f                                                                                                                                                            # runtime/autogen/libc.py:1805
                          SHN_LOOS = 0xff20                                                                                                                                                              # runtime/autogen/libc.py:1806
                          SHN_HIOS = 0xff3f                                                                                                                                                              # runtime/autogen/libc.py:1807
                          SHN_ABS = 0xfff1                                                                                                                                                               # runtime/autogen/libc.py:1808
                          SHN_COMMON = 0xfff2                                                                                                                                                            # runtime/autogen/libc.py:1809
                          SHN_XINDEX = 0xffff                                                                                                                                                            # runtime/autogen/libc.py:1810
                          SHN_HIRESERVE = 0xffff                                                                                                                                                         # runtime/autogen/libc.py:1811
                          SHT_NULL = 0                                                                                                                                                                   # runtime/autogen/libc.py:1812
                          SHT_PROGBITS = 1                                                                                                                                                               # runtime/autogen/libc.py:1813
                          SHT_SYMTAB = 2                                                                                                                                                                 # runtime/autogen/libc.py:1814
                          SHT_STRTAB = 3                                                                                                                                                                 # runtime/autogen/libc.py:1815
                          SHT_RELA = 4                                                                                                                                                                   # runtime/autogen/libc.py:1816
                          SHT_HASH = 5                                                                                                                                                                   # runtime/autogen/libc.py:1817
                          SHT_DYNAMIC = 6                                                                                                                                                                # runtime/autogen/libc.py:1818
                          SHT_NOTE = 7                                                                                                                                                                   # runtime/autogen/libc.py:1819
                          SHT_NOBITS = 8                                                                                                                                                                 # runtime/autogen/libc.py:1820
                          SHT_REL = 9                                                                                                                                                                    # runtime/autogen/libc.py:1821
                          SHT_SHLIB = 10                                                                                                                                                                 # runtime/autogen/libc.py:1822
                          SHT_DYNSYM = 11                                                                                                                                                                # runtime/autogen/libc.py:1823
                          SHT_INIT_ARRAY = 14                                                                                                                                                            # runtime/autogen/libc.py:1824
                          SHT_FINI_ARRAY = 15                                                                                                                                                            # runtime/autogen/libc.py:1825
                          SHT_PREINIT_ARRAY = 16                                                                                                                                                         # runtime/autogen/libc.py:1826
                          SHT_GROUP = 17                                                                                                                                                                 # runtime/autogen/libc.py:1827
                          SHT_SYMTAB_SHNDX = 18                                                                                                                                                          # runtime/autogen/libc.py:1828
                          SHT_NUM = 19                                                                                                                                                                   # runtime/autogen/libc.py:1829
                          SHT_LOOS = 0x60000000                                                                                                                                                          # runtime/autogen/libc.py:1830
                          SHT_GNU_ATTRIBUTES = 0x6ffffff5                                                                                                                                                # runtime/autogen/libc.py:1831
                          SHT_GNU_HASH = 0x6ffffff6                                                                                                                                                      # runtime/autogen/libc.py:1832
                          SHT_GNU_LIBLIST = 0x6ffffff7                                                                                                                                                   # runtime/autogen/libc.py:1833
                          SHT_CHECKSUM = 0x6ffffff8                                                                                                                                                      # runtime/autogen/libc.py:1834
                          SHT_LOSUNW = 0x6ffffffa                                                                                                                                                        # runtime/autogen/libc.py:1835
                          SHT_SUNW_move = 0x6ffffffa                                                                                                                                                     # runtime/autogen/libc.py:1836
                          SHT_SUNW_COMDAT = 0x6ffffffb                                                                                                                                                   # runtime/autogen/libc.py:1837
                          SHT_SUNW_syminfo = 0x6ffffffc                                                                                                                                                  # runtime/autogen/libc.py:1838
                          SHT_GNU_verdef = 0x6ffffffd                                                                                                                                                    # runtime/autogen/libc.py:1839
                          SHT_GNU_verneed = 0x6ffffffe                                                                                                                                                   # runtime/autogen/libc.py:1840
                          SHT_GNU_versym = 0x6fffffff                                                                                                                                                    # runtime/autogen/libc.py:1841
                          SHT_HISUNW = 0x6fffffff                                                                                                                                                        # runtime/autogen/libc.py:1842
                          SHT_HIOS = 0x6fffffff                                                                                                                                                          # runtime/autogen/libc.py:1843
                          SHT_LOPROC = 0x70000000                                                                                                                                                        # runtime/autogen/libc.py:1844
                          SHT_HIPROC = 0x7fffffff                                                                                                                                                        # runtime/autogen/libc.py:1845
                          SHT_LOUSER = 0x80000000                                                                                                                                                        # runtime/autogen/libc.py:1846
                          SHT_HIUSER = 0x8fffffff                                                                                                                                                        # runtime/autogen/libc.py:1847
                          SHF_WRITE = (1 << 0)                                                                                                                                                           # runtime/autogen/libc.py:1848
                          SHF_ALLOC = (1 << 1)                                                                                                                                                           # runtime/autogen/libc.py:1849
                          SHF_EXECINSTR = (1 << 2)                                                                                                                                                       # runtime/autogen/libc.py:1850
                          SHF_MERGE = (1 << 4)                                                                                                                                                           # runtime/autogen/libc.py:1851
                          SHF_STRINGS = (1 << 5)                                                                                                                                                         # runtime/autogen/libc.py:1852
                          SHF_INFO_LINK = (1 << 6)                                                                                                                                                       # runtime/autogen/libc.py:1853
                          SHF_LINK_ORDER = (1 << 7)                                                                                                                                                      # runtime/autogen/libc.py:1854
                          SHF_GROUP = (1 << 9)                                                                                                                                                           # runtime/autogen/libc.py:1855
                          SHF_TLS = (1 << 10)                                                                                                                                                            # runtime/autogen/libc.py:1856
                          SHF_COMPRESSED = (1 << 11)                                                                                                                                                     # runtime/autogen/libc.py:1857
                          SHF_MASKOS = 0x0ff00000                                                                                                                                                        # runtime/autogen/libc.py:1858
                          SHF_MASKPROC = 0xf0000000                                                                                                                                                      # runtime/autogen/libc.py:1859
                          SHF_GNU_RETAIN = (1 << 21)                                                                                                                                                     # runtime/autogen/libc.py:1860
                          ELFCOMPRESS_ZLIB = 1                                                                                                                                                           # runtime/autogen/libc.py:1861
                          ELFCOMPRESS_LOOS = 0x60000000                                                                                                                                                  # runtime/autogen/libc.py:1862
                          ELFCOMPRESS_HIOS = 0x6fffffff                                                                                                                                                  # runtime/autogen/libc.py:1863
                          ELFCOMPRESS_LOPROC = 0x70000000                                                                                                                                                # runtime/autogen/libc.py:1864
                          ELFCOMPRESS_HIPROC = 0x7fffffff                                                                                                                                                # runtime/autogen/libc.py:1865
                          GRP_COMDAT = 0x1                                                                                                                                                               # runtime/autogen/libc.py:1866
                          SYMINFO_BT_SELF = 0xffff                                                                                                                                                       # runtime/autogen/libc.py:1867
                          SYMINFO_BT_PARENT = 0xfffe                                                                                                                                                     # runtime/autogen/libc.py:1868
                          SYMINFO_BT_LOWRESERVE = 0xff00                                                                                                                                                 # runtime/autogen/libc.py:1869
                          SYMINFO_FLG_DIRECT = 0x0001                                                                                                                                                    # runtime/autogen/libc.py:1870
                          SYMINFO_FLG_PASSTHRU = 0x0002                                                                                                                                                  # runtime/autogen/libc.py:1871
                          SYMINFO_FLG_COPY = 0x0004                                                                                                                                                      # runtime/autogen/libc.py:1872
                          SYMINFO_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:1873
                          SYMINFO_CURRENT = 1                                                                                                                                                            # runtime/autogen/libc.py:1874
                          SYMINFO_NUM = 2                                                                                                                                                                # runtime/autogen/libc.py:1875
                          STB_LOCAL = 0                                                                                                                                                                  # runtime/autogen/libc.py:1882
                          STB_GLOBAL = 1                                                                                                                                                                 # runtime/autogen/libc.py:1883
                          STB_WEAK = 2                                                                                                                                                                   # runtime/autogen/libc.py:1884
                          STB_NUM = 3                                                                                                                                                                    # runtime/autogen/libc.py:1885
                          STB_LOOS = 10                                                                                                                                                                  # runtime/autogen/libc.py:1886
                          STB_GNU_UNIQUE = 10                                                                                                                                                            # runtime/autogen/libc.py:1887
                          STB_HIOS = 12                                                                                                                                                                  # runtime/autogen/libc.py:1888
                          STB_LOPROC = 13                                                                                                                                                                # runtime/autogen/libc.py:1889
                          STB_HIPROC = 15                                                                                                                                                                # runtime/autogen/libc.py:1890
                          STT_NOTYPE = 0                                                                                                                                                                 # runtime/autogen/libc.py:1891
                          STT_OBJECT = 1                                                                                                                                                                 # runtime/autogen/libc.py:1892
                          STT_FUNC = 2                                                                                                                                                                   # runtime/autogen/libc.py:1893
                          STT_SECTION = 3                                                                                                                                                                # runtime/autogen/libc.py:1894
                          STT_FILE = 4                                                                                                                                                                   # runtime/autogen/libc.py:1895
                          STT_COMMON = 5                                                                                                                                                                 # runtime/autogen/libc.py:1896
                          STT_TLS = 6                                                                                                                                                                    # runtime/autogen/libc.py:1897
                          STT_NUM = 7                                                                                                                                                                    # runtime/autogen/libc.py:1898
                          STT_LOOS = 10                                                                                                                                                                  # runtime/autogen/libc.py:1899
                          STT_GNU_IFUNC = 10                                                                                                                                                             # runtime/autogen/libc.py:1900
                          STT_HIOS = 12                                                                                                                                                                  # runtime/autogen/libc.py:1901
                          STT_LOPROC = 13                                                                                                                                                                # runtime/autogen/libc.py:1902
                          STT_HIPROC = 15                                                                                                                                                                # runtime/autogen/libc.py:1903
                          STN_UNDEF = 0                                                                                                                                                                  # runtime/autogen/libc.py:1904
                          STV_DEFAULT = 0                                                                                                                                                                # runtime/autogen/libc.py:1907
                          STV_INTERNAL = 1                                                                                                                                                               # runtime/autogen/libc.py:1908
                          STV_HIDDEN = 2                                                                                                                                                                 # runtime/autogen/libc.py:1909
                          STV_PROTECTED = 3                                                                                                                                                              # runtime/autogen/libc.py:1910
                          PN_XNUM = 0xffff                                                                                                                                                               # runtime/autogen/libc.py:1917
                          PT_NULL = 0                                                                                                                                                                    # runtime/autogen/libc.py:1918
                          PT_LOAD = 1                                                                                                                                                                    # runtime/autogen/libc.py:1919
                          PT_DYNAMIC = 2                                                                                                                                                                 # runtime/autogen/libc.py:1920
                          PT_INTERP = 3                                                                                                                                                                  # runtime/autogen/libc.py:1921
                          PT_NOTE = 4                                                                                                                                                                    # runtime/autogen/libc.py:1922
                          PT_SHLIB = 5                                                                                                                                                                   # runtime/autogen/libc.py:1923
                          PT_PHDR = 6                                                                                                                                                                    # runtime/autogen/libc.py:1924
                          PT_TLS = 7                                                                                                                                                                     # runtime/autogen/libc.py:1925
                          PT_NUM = 8                                                                                                                                                                     # runtime/autogen/libc.py:1926
                          PT_LOOS = 0x60000000                                                                                                                                                           # runtime/autogen/libc.py:1927
                          PT_GNU_EH_FRAME = 0x6474e550                                                                                                                                                   # runtime/autogen/libc.py:1928
                          PT_GNU_STACK = 0x6474e551                                                                                                                                                      # runtime/autogen/libc.py:1929
                          PT_GNU_RELRO = 0x6474e552                                                                                                                                                      # runtime/autogen/libc.py:1930
                          PT_GNU_PROPERTY = 0x6474e553                                                                                                                                                   # runtime/autogen/libc.py:1931
                          PT_LOSUNW = 0x6ffffffa                                                                                                                                                         # runtime/autogen/libc.py:1932
                          PT_SUNWBSS = 0x6ffffffa                                                                                                                                                        # runtime/autogen/libc.py:1933
                          PT_SUNWSTACK = 0x6ffffffb                                                                                                                                                      # runtime/autogen/libc.py:1934
                          PT_HISUNW = 0x6fffffff                                                                                                                                                         # runtime/autogen/libc.py:1935
                          PT_HIOS = 0x6fffffff                                                                                                                                                           # runtime/autogen/libc.py:1936
                          PT_LOPROC = 0x70000000                                                                                                                                                         # runtime/autogen/libc.py:1937
                          PT_HIPROC = 0x7fffffff                                                                                                                                                         # runtime/autogen/libc.py:1938
                          PF_X = (1 << 0)                                                                                                                                                                # runtime/autogen/libc.py:1939
                          PF_W = (1 << 1)                                                                                                                                                                # runtime/autogen/libc.py:1940
                          PF_R = (1 << 2)                                                                                                                                                                # runtime/autogen/libc.py:1941
                          PF_MASKOS = 0x0ff00000                                                                                                                                                         # runtime/autogen/libc.py:1942
                          PF_MASKPROC = 0xf0000000                                                                                                                                                       # runtime/autogen/libc.py:1943
                          NT_PRSTATUS = 1                                                                                                                                                                # runtime/autogen/libc.py:1944
                          NT_FPREGSET = 2                                                                                                                                                                # runtime/autogen/libc.py:1945
                          NT_PRPSINFO = 3                                                                                                                                                                # runtime/autogen/libc.py:1946
                          NT_PRXREG = 4                                                                                                                                                                  # runtime/autogen/libc.py:1947
                          NT_TASKSTRUCT = 4                                                                                                                                                              # runtime/autogen/libc.py:1948
                          NT_PLATFORM = 5                                                                                                                                                                # runtime/autogen/libc.py:1949
                          NT_AUXV = 6                                                                                                                                                                    # runtime/autogen/libc.py:1950
                          NT_GWINDOWS = 7                                                                                                                                                                # runtime/autogen/libc.py:1951
                          NT_ASRS = 8                                                                                                                                                                    # runtime/autogen/libc.py:1952
                          NT_PSTATUS = 10                                                                                                                                                                # runtime/autogen/libc.py:1953
                          NT_PSINFO = 13                                                                                                                                                                 # runtime/autogen/libc.py:1954
                          NT_PRCRED = 14                                                                                                                                                                 # runtime/autogen/libc.py:1955
                          NT_UTSNAME = 15                                                                                                                                                                # runtime/autogen/libc.py:1956
                          NT_LWPSTATUS = 16                                                                                                                                                              # runtime/autogen/libc.py:1957
                          NT_LWPSINFO = 17                                                                                                                                                               # runtime/autogen/libc.py:1958
                          NT_PRFPXREG = 20                                                                                                                                                               # runtime/autogen/libc.py:1959
                          NT_PRXFPREG = 0x46e62b7f                                                                                                                                                       # runtime/autogen/libc.py:1960
                          NT_PPC_VMX = 0x100                                                                                                                                                             # runtime/autogen/libc.py:1961
                          NT_PPC_SPE = 0x101                                                                                                                                                             # runtime/autogen/libc.py:1962
                          NT_PPC_VSX = 0x102                                                                                                                                                             # runtime/autogen/libc.py:1963
                          NT_PPC_TAR = 0x103                                                                                                                                                             # runtime/autogen/libc.py:1964
                          NT_PPC_PPR = 0x104                                                                                                                                                             # runtime/autogen/libc.py:1965
                          NT_PPC_DSCR = 0x105                                                                                                                                                            # runtime/autogen/libc.py:1966
                          NT_PPC_EBB = 0x106                                                                                                                                                             # runtime/autogen/libc.py:1967
                          NT_PPC_PMU = 0x107                                                                                                                                                             # runtime/autogen/libc.py:1968
                          NT_PPC_TM_CGPR = 0x108                                                                                                                                                         # runtime/autogen/libc.py:1969
                          NT_PPC_TM_CFPR = 0x109                                                                                                                                                         # runtime/autogen/libc.py:1970
                          NT_PPC_TM_CVMX = 0x10a                                                                                                                                                         # runtime/autogen/libc.py:1971
                          NT_PPC_TM_CVSX = 0x10b                                                                                                                                                         # runtime/autogen/libc.py:1972
                          NT_PPC_TM_SPR = 0x10c                                                                                                                                                          # runtime/autogen/libc.py:1973
                          NT_386_TLS = 0x200                                                                                                                                                             # runtime/autogen/libc.py:1974
                          NT_386_IOPERM = 0x201                                                                                                                                                          # runtime/autogen/libc.py:1975
                          NT_X86_XSTATE = 0x202                                                                                                                                                          # runtime/autogen/libc.py:1976
                          NT_S390_HIGH_GPRS = 0x300                                                                                                                                                      # runtime/autogen/libc.py:1977
                          NT_S390_TIMER = 0x301                                                                                                                                                          # runtime/autogen/libc.py:1978
                          NT_S390_TODCMP = 0x302                                                                                                                                                         # runtime/autogen/libc.py:1979
                          NT_S390_TODPREG = 0x303                                                                                                                                                        # runtime/autogen/libc.py:1980
                          NT_S390_CTRS = 0x304                                                                                                                                                           # runtime/autogen/libc.py:1981
                          NT_S390_PREFIX = 0x305                                                                                                                                                         # runtime/autogen/libc.py:1982
                          NT_S390_LAST_BREAK = 0x306                                                                                                                                                     # runtime/autogen/libc.py:1983
                          NT_S390_SYSTEM_CALL = 0x307                                                                                                                                                    # runtime/autogen/libc.py:1984
                          NT_S390_TDB = 0x308                                                                                                                                                            # runtime/autogen/libc.py:1985
                          NT_S390_VXRS_HIGH = 0x30a                                                                                                                                                      # runtime/autogen/libc.py:1986
                          NT_S390_GS_CB = 0x30b                                                                                                                                                          # runtime/autogen/libc.py:1987
                          NT_S390_RI_CB = 0x30d                                                                                                                                                          # runtime/autogen/libc.py:1988
                          NT_ARM_VFP = 0x400                                                                                                                                                             # runtime/autogen/libc.py:1989
                          NT_ARM_TLS = 0x401                                                                                                                                                             # runtime/autogen/libc.py:1990
                          NT_ARM_HW_BREAK = 0x402                                                                                                                                                        # runtime/autogen/libc.py:1991
                          NT_ARM_HW_WATCH = 0x403                                                                                                                                                        # runtime/autogen/libc.py:1992
                          NT_ARM_SYSTEM_CALL = 0x404                                                                                                                                                     # runtime/autogen/libc.py:1993
                          NT_VMCOREDD = 0x700                                                                                                                                                            # runtime/autogen/libc.py:1994
                          NT_MIPS_DSP = 0x800                                                                                                                                                            # runtime/autogen/libc.py:1995
                          NT_MIPS_FP_MODE = 0x801                                                                                                                                                        # runtime/autogen/libc.py:1996
                          NT_MIPS_MSA = 0x802                                                                                                                                                            # runtime/autogen/libc.py:1997
                          NT_VERSION = 1                                                                                                                                                                 # runtime/autogen/libc.py:1998
                          DT_NULL = 0                                                                                                                                                                    # runtime/autogen/libc.py:1999
                          DT_NEEDED = 1                                                                                                                                                                  # runtime/autogen/libc.py:2000
                          DT_PLTRELSZ = 2                                                                                                                                                                # runtime/autogen/libc.py:2001
                          DT_PLTGOT = 3                                                                                                                                                                  # runtime/autogen/libc.py:2002
                          DT_HASH = 4                                                                                                                                                                    # runtime/autogen/libc.py:2003
                          DT_STRTAB = 5                                                                                                                                                                  # runtime/autogen/libc.py:2004
                          DT_SYMTAB = 6                                                                                                                                                                  # runtime/autogen/libc.py:2005
                          DT_RELA = 7                                                                                                                                                                    # runtime/autogen/libc.py:2006
                          DT_RELASZ = 8                                                                                                                                                                  # runtime/autogen/libc.py:2007
                          DT_RELAENT = 9                                                                                                                                                                 # runtime/autogen/libc.py:2008
                          DT_STRSZ = 10                                                                                                                                                                  # runtime/autogen/libc.py:2009
                          DT_SYMENT = 11                                                                                                                                                                 # runtime/autogen/libc.py:2010
                          DT_INIT = 12                                                                                                                                                                   # runtime/autogen/libc.py:2011
                          DT_FINI = 13                                                                                                                                                                   # runtime/autogen/libc.py:2012
                          DT_SONAME = 14                                                                                                                                                                 # runtime/autogen/libc.py:2013
                          DT_RPATH = 15                                                                                                                                                                  # runtime/autogen/libc.py:2014
                          DT_SYMBOLIC = 16                                                                                                                                                               # runtime/autogen/libc.py:2015
                          DT_REL = 17                                                                                                                                                                    # runtime/autogen/libc.py:2016
                          DT_RELSZ = 18                                                                                                                                                                  # runtime/autogen/libc.py:2017
                          DT_RELENT = 19                                                                                                                                                                 # runtime/autogen/libc.py:2018
                          DT_PLTREL = 20                                                                                                                                                                 # runtime/autogen/libc.py:2019
                          DT_DEBUG = 21                                                                                                                                                                  # runtime/autogen/libc.py:2020
                          DT_TEXTREL = 22                                                                                                                                                                # runtime/autogen/libc.py:2021
                          DT_JMPREL = 23                                                                                                                                                                 # runtime/autogen/libc.py:2022
                          DT_BIND_NOW = 24                                                                                                                                                               # runtime/autogen/libc.py:2023
                          DT_INIT_ARRAY = 25                                                                                                                                                             # runtime/autogen/libc.py:2024
                          DT_FINI_ARRAY = 26                                                                                                                                                             # runtime/autogen/libc.py:2025
                          DT_INIT_ARRAYSZ = 27                                                                                                                                                           # runtime/autogen/libc.py:2026
                          DT_FINI_ARRAYSZ = 28                                                                                                                                                           # runtime/autogen/libc.py:2027
                          DT_RUNPATH = 29                                                                                                                                                                # runtime/autogen/libc.py:2028
                          DT_FLAGS = 30                                                                                                                                                                  # runtime/autogen/libc.py:2029
                          DT_ENCODING = 32                                                                                                                                                               # runtime/autogen/libc.py:2030
                          DT_PREINIT_ARRAY = 32                                                                                                                                                          # runtime/autogen/libc.py:2031
                          DT_PREINIT_ARRAYSZ = 33                                                                                                                                                        # runtime/autogen/libc.py:2032
                          DT_SYMTAB_SHNDX = 34                                                                                                                                                           # runtime/autogen/libc.py:2033
                          DT_NUM = 35                                                                                                                                                                    # runtime/autogen/libc.py:2034
                          DT_LOOS = 0x6000000d                                                                                                                                                           # runtime/autogen/libc.py:2035
                          DT_HIOS = 0x6ffff000                                                                                                                                                           # runtime/autogen/libc.py:2036
                          DT_LOPROC = 0x70000000                                                                                                                                                         # runtime/autogen/libc.py:2037
                          DT_HIPROC = 0x7fffffff                                                                                                                                                         # runtime/autogen/libc.py:2038
                          DT_VALRNGLO = 0x6ffffd00                                                                                                                                                       # runtime/autogen/libc.py:2039
                          DT_GNU_PRELINKED = 0x6ffffdf5                                                                                                                                                  # runtime/autogen/libc.py:2040
                          DT_GNU_CONFLICTSZ = 0x6ffffdf6                                                                                                                                                 # runtime/autogen/libc.py:2041
                          DT_GNU_LIBLISTSZ = 0x6ffffdf7                                                                                                                                                  # runtime/autogen/libc.py:2042
                          DT_CHECKSUM = 0x6ffffdf8                                                                                                                                                       # runtime/autogen/libc.py:2043
                          DT_PLTPADSZ = 0x6ffffdf9                                                                                                                                                       # runtime/autogen/libc.py:2044
                          DT_MOVEENT = 0x6ffffdfa                                                                                                                                                        # runtime/autogen/libc.py:2045
                          DT_MOVESZ = 0x6ffffdfb                                                                                                                                                         # runtime/autogen/libc.py:2046
                          DT_FEATURE_1 = 0x6ffffdfc                                                                                                                                                      # runtime/autogen/libc.py:2047
                          DT_SYMINSZ = 0x6ffffdfe                                                                                                                                                        # runtime/autogen/libc.py:2048
                          DT_SYMINENT = 0x6ffffdff                                                                                                                                                       # runtime/autogen/libc.py:2049
                          DT_VALRNGHI = 0x6ffffdff                                                                                                                                                       # runtime/autogen/libc.py:2050
                          DT_VALNUM = 12                                                                                                                                                                 # runtime/autogen/libc.py:2052
                          DT_ADDRRNGLO = 0x6ffffe00                                                                                                                                                      # runtime/autogen/libc.py:2053
                          DT_GNU_HASH = 0x6ffffef5                                                                                                                                                       # runtime/autogen/libc.py:2054
                          DT_TLSDESC_PLT = 0x6ffffef6                                                                                                                                                    # runtime/autogen/libc.py:2055
                          DT_TLSDESC_GOT = 0x6ffffef7                                                                                                                                                    # runtime/autogen/libc.py:2056
                          DT_GNU_CONFLICT = 0x6ffffef8                                                                                                                                                   # runtime/autogen/libc.py:2057
                          DT_GNU_LIBLIST = 0x6ffffef9                                                                                                                                                    # runtime/autogen/libc.py:2058
                          DT_CONFIG = 0x6ffffefa                                                                                                                                                         # runtime/autogen/libc.py:2059
                          DT_DEPAUDIT = 0x6ffffefb                                                                                                                                                       # runtime/autogen/libc.py:2060
                          DT_AUDIT = 0x6ffffefc                                                                                                                                                          # runtime/autogen/libc.py:2061
                          DT_PLTPAD = 0x6ffffefd                                                                                                                                                         # runtime/autogen/libc.py:2062
                          DT_MOVETAB = 0x6ffffefe                                                                                                                                                        # runtime/autogen/libc.py:2063
                          DT_SYMINFO = 0x6ffffeff                                                                                                                                                        # runtime/autogen/libc.py:2064
                          DT_ADDRRNGHI = 0x6ffffeff                                                                                                                                                      # runtime/autogen/libc.py:2065
                          DT_ADDRNUM = 11                                                                                                                                                                # runtime/autogen/libc.py:2067
                          DT_VERSYM = 0x6ffffff0                                                                                                                                                         # runtime/autogen/libc.py:2068
                          DT_RELACOUNT = 0x6ffffff9                                                                                                                                                      # runtime/autogen/libc.py:2069
                          DT_RELCOUNT = 0x6ffffffa                                                                                                                                                       # runtime/autogen/libc.py:2070
                          DT_FLAGS_1 = 0x6ffffffb                                                                                                                                                        # runtime/autogen/libc.py:2071
                          DT_VERDEFNUM = 0x6ffffffd                                                                                                                                                      # runtime/autogen/libc.py:2072
                          DT_VERNEEDNUM = 0x6fffffff                                                                                                                                                     # runtime/autogen/libc.py:2073
                          DT_VERSIONTAGNUM = 16                                                                                                                                                          # runtime/autogen/libc.py:2075
                          DT_AUXILIARY = 0x7ffffffd                                                                                                                                                      # runtime/autogen/libc.py:2076
                          DT_FILTER = 0x7fffffff                                                                                                                                                         # runtime/autogen/libc.py:2077
                          DT_EXTRANUM = 3                                                                                                                                                                # runtime/autogen/libc.py:2079
                          DF_ORIGIN = 0x00000001                                                                                                                                                         # runtime/autogen/libc.py:2080
                          DF_SYMBOLIC = 0x00000002                                                                                                                                                       # runtime/autogen/libc.py:2081
                          DF_TEXTREL = 0x00000004                                                                                                                                                        # runtime/autogen/libc.py:2082
                          DF_BIND_NOW = 0x00000008                                                                                                                                                       # runtime/autogen/libc.py:2083
                          DF_STATIC_TLS = 0x00000010                                                                                                                                                     # runtime/autogen/libc.py:2084
                          DF_1_NOW = 0x00000001                                                                                                                                                          # runtime/autogen/libc.py:2085
                          DF_1_GLOBAL = 0x00000002                                                                                                                                                       # runtime/autogen/libc.py:2086
                          DF_1_GROUP = 0x00000004                                                                                                                                                        # runtime/autogen/libc.py:2087
                          DF_1_NODELETE = 0x00000008                                                                                                                                                     # runtime/autogen/libc.py:2088
                          DF_1_LOADFLTR = 0x00000010                                                                                                                                                     # runtime/autogen/libc.py:2089
                          DF_1_INITFIRST = 0x00000020                                                                                                                                                    # runtime/autogen/libc.py:2090
                          DF_1_NOOPEN = 0x00000040                                                                                                                                                       # runtime/autogen/libc.py:2091
                          DF_1_ORIGIN = 0x00000080                                                                                                                                                       # runtime/autogen/libc.py:2092
                          DF_1_DIRECT = 0x00000100                                                                                                                                                       # runtime/autogen/libc.py:2093
                          DF_1_TRANS = 0x00000200                                                                                                                                                        # runtime/autogen/libc.py:2094
                          DF_1_INTERPOSE = 0x00000400                                                                                                                                                    # runtime/autogen/libc.py:2095
                          DF_1_NODEFLIB = 0x00000800                                                                                                                                                     # runtime/autogen/libc.py:2096
                          DF_1_NODUMP = 0x00001000                                                                                                                                                       # runtime/autogen/libc.py:2097
                          DF_1_CONFALT = 0x00002000                                                                                                                                                      # runtime/autogen/libc.py:2098
                          DF_1_ENDFILTEE = 0x00004000                                                                                                                                                    # runtime/autogen/libc.py:2099
                          DF_1_DISPRELDNE = 0x00008000                                                                                                                                                   # runtime/autogen/libc.py:2100
                          DF_1_DISPRELPND = 0x00010000                                                                                                                                                   # runtime/autogen/libc.py:2101
                          DF_1_NODIRECT = 0x00020000                                                                                                                                                     # runtime/autogen/libc.py:2102
                          DF_1_IGNMULDEF = 0x00040000                                                                                                                                                    # runtime/autogen/libc.py:2103
                          DF_1_NOKSYMS = 0x00080000                                                                                                                                                      # runtime/autogen/libc.py:2104
                          DF_1_NOHDR = 0x00100000                                                                                                                                                        # runtime/autogen/libc.py:2105
                          DF_1_EDITED = 0x00200000                                                                                                                                                       # runtime/autogen/libc.py:2106
                          DF_1_NORELOC = 0x00400000                                                                                                                                                      # runtime/autogen/libc.py:2107
                          DF_1_SYMINTPOSE = 0x00800000                                                                                                                                                   # runtime/autogen/libc.py:2108
                          DF_1_GLOBAUDIT = 0x01000000                                                                                                                                                    # runtime/autogen/libc.py:2109
                          DF_1_SINGLETON = 0x02000000                                                                                                                                                    # runtime/autogen/libc.py:2110
                          DF_1_STUB = 0x04000000                                                                                                                                                         # runtime/autogen/libc.py:2111
                          DF_1_PIE = 0x08000000                                                                                                                                                          # runtime/autogen/libc.py:2112
                          DF_1_KMOD = 0x10000000                                                                                                                                                         # runtime/autogen/libc.py:2113
                          DF_1_WEAKFILTER = 0x20000000                                                                                                                                                   # runtime/autogen/libc.py:2114
                          DF_1_NOCOMMON = 0x40000000                                                                                                                                                     # runtime/autogen/libc.py:2115
                          DTF_1_PARINIT = 0x00000001                                                                                                                                                     # runtime/autogen/libc.py:2116
                          DTF_1_CONFEXP = 0x00000002                                                                                                                                                     # runtime/autogen/libc.py:2117
                          DF_P1_LAZYLOAD = 0x00000001                                                                                                                                                    # runtime/autogen/libc.py:2118
                          VER_DEF_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:2119
                          VER_DEF_CURRENT = 1                                                                                                                                                            # runtime/autogen/libc.py:2120
                          VER_DEF_NUM = 2                                                                                                                                                                # runtime/autogen/libc.py:2121
                          VER_FLG_BASE = 0x1                                                                                                                                                             # runtime/autogen/libc.py:2122
                          VER_FLG_WEAK = 0x2                                                                                                                                                             # runtime/autogen/libc.py:2123
                          VER_NDX_LOCAL = 0                                                                                                                                                              # runtime/autogen/libc.py:2124
                          VER_NDX_GLOBAL = 1                                                                                                                                                             # runtime/autogen/libc.py:2125
                          VER_NDX_LORESERVE = 0xff00                                                                                                                                                     # runtime/autogen/libc.py:2126
                          VER_NDX_ELIMINATE = 0xff01                                                                                                                                                     # runtime/autogen/libc.py:2127
                          VER_NEED_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:2128
                          VER_NEED_CURRENT = 1                                                                                                                                                           # runtime/autogen/libc.py:2129
                          VER_NEED_NUM = 2                                                                                                                                                               # runtime/autogen/libc.py:2130
                          VER_FLG_WEAK = 0x2                                                                                                                                                             # runtime/autogen/libc.py:2131
                          AT_NULL = 0                                                                                                                                                                    # runtime/autogen/libc.py:2132
                          AT_IGNORE = 1                                                                                                                                                                  # runtime/autogen/libc.py:2133
                          AT_EXECFD = 2                                                                                                                                                                  # runtime/autogen/libc.py:2134
                          AT_PHDR = 3                                                                                                                                                                    # runtime/autogen/libc.py:2135
                          AT_PHENT = 4                                                                                                                                                                   # runtime/autogen/libc.py:2136
                          AT_PHNUM = 5                                                                                                                                                                   # runtime/autogen/libc.py:2137
                          AT_PAGESZ = 6                                                                                                                                                                  # runtime/autogen/libc.py:2138
                          AT_BASE = 7                                                                                                                                                                    # runtime/autogen/libc.py:2139
                          AT_FLAGS = 8                                                                                                                                                                   # runtime/autogen/libc.py:2140
                          AT_ENTRY = 9                                                                                                                                                                   # runtime/autogen/libc.py:2141
                          AT_NOTELF = 10                                                                                                                                                                 # runtime/autogen/libc.py:2142
                          AT_UID = 11                                                                                                                                                                    # runtime/autogen/libc.py:2143
                          AT_EUID = 12                                                                                                                                                                   # runtime/autogen/libc.py:2144
                          AT_GID = 13                                                                                                                                                                    # runtime/autogen/libc.py:2145
                          AT_EGID = 14                                                                                                                                                                   # runtime/autogen/libc.py:2146
                          AT_CLKTCK = 17                                                                                                                                                                 # runtime/autogen/libc.py:2147
                          AT_PLATFORM = 15                                                                                                                                                               # runtime/autogen/libc.py:2148
                          AT_FPUCW = 18                                                                                                                                                                  # runtime/autogen/libc.py:2149
                          AT_DCACHEBSIZE = 19                                                                                                                                                            # runtime/autogen/libc.py:2150
                          AT_ICACHEBSIZE = 20                                                                                                                                                            # runtime/autogen/libc.py:2151
                          AT_UCACHEBSIZE = 21                                                                                                                                                            # runtime/autogen/libc.py:2152
                          AT_IGNOREPPC = 22                                                                                                                                                              # runtime/autogen/libc.py:2153
                          AT_SECURE = 23                                                                                                                                                                 # runtime/autogen/libc.py:2154
                          AT_BASE_PLATFORM = 24                                                                                                                                                          # runtime/autogen/libc.py:2155
                          AT_RANDOM = 25                                                                                                                                                                 # runtime/autogen/libc.py:2156
                          AT_EXECFN = 31                                                                                                                                                                 # runtime/autogen/libc.py:2157
                          AT_SYSINFO = 32                                                                                                                                                                # runtime/autogen/libc.py:2158
                          AT_SYSINFO_EHDR = 33                                                                                                                                                           # runtime/autogen/libc.py:2159
                          AT_L1I_CACHESHAPE = 34                                                                                                                                                         # runtime/autogen/libc.py:2160
                          AT_L1D_CACHESHAPE = 35                                                                                                                                                         # runtime/autogen/libc.py:2161
                          AT_L2_CACHESHAPE = 36                                                                                                                                                          # runtime/autogen/libc.py:2162
                          AT_L3_CACHESHAPE = 37                                                                                                                                                          # runtime/autogen/libc.py:2163
                          AT_L1I_CACHESIZE = 40                                                                                                                                                          # runtime/autogen/libc.py:2164
                          AT_L1I_CACHEGEOMETRY = 41                                                                                                                                                      # runtime/autogen/libc.py:2165
                          AT_L1D_CACHESIZE = 42                                                                                                                                                          # runtime/autogen/libc.py:2166
                          AT_L1D_CACHEGEOMETRY = 43                                                                                                                                                      # runtime/autogen/libc.py:2167
                          AT_L2_CACHESIZE = 44                                                                                                                                                           # runtime/autogen/libc.py:2168
                          AT_L2_CACHEGEOMETRY = 45                                                                                                                                                       # runtime/autogen/libc.py:2169
                          AT_L3_CACHESIZE = 46                                                                                                                                                           # runtime/autogen/libc.py:2170
                          AT_L3_CACHEGEOMETRY = 47                                                                                                                                                       # runtime/autogen/libc.py:2171
                          AT_MINSIGSTKSZ = 51                                                                                                                                                            # runtime/autogen/libc.py:2172
                          ELF_NOTE_SOLARIS = "SUNW Solaris"                                                                                                                                              # runtime/autogen/libc.py:2173
                          ELF_NOTE_GNU = "GNU"                                                                                                                                                           # runtime/autogen/libc.py:2174
                          ELF_NOTE_FDO = "FDO"                                                                                                                                                           # runtime/autogen/libc.py:2175
                          ELF_NOTE_PAGESIZE_HINT = 1                                                                                                                                                     # runtime/autogen/libc.py:2176
                          NT_GNU_ABI_TAG = 1                                                                                                                                                             # runtime/autogen/libc.py:2177
                          ELF_NOTE_ABI = NT_GNU_ABI_TAG                                                                                                                                                  # runtime/autogen/libc.py:2178
                          ELF_NOTE_OS_LINUX = 0                                                                                                                                                          # runtime/autogen/libc.py:2179
                          ELF_NOTE_OS_GNU = 1                                                                                                                                                            # runtime/autogen/libc.py:2180
                          ELF_NOTE_OS_SOLARIS2 = 2                                                                                                                                                       # runtime/autogen/libc.py:2181
                          ELF_NOTE_OS_FREEBSD = 3                                                                                                                                                        # runtime/autogen/libc.py:2182
                          NT_GNU_HWCAP = 2                                                                                                                                                               # runtime/autogen/libc.py:2183
                          NT_GNU_BUILD_ID = 3                                                                                                                                                            # runtime/autogen/libc.py:2184
                          NT_GNU_GOLD_VERSION = 4                                                                                                                                                        # runtime/autogen/libc.py:2185
                          NT_GNU_PROPERTY_TYPE_0 = 5                                                                                                                                                     # runtime/autogen/libc.py:2186
                          NT_FDO_PACKAGING_METADATA = 0xcafe1a7e                                                                                                                                         # runtime/autogen/libc.py:2187
                          NOTE_GNU_PROPERTY_SECTION_NAME = ".note.gnu.property"                                                                                                                          # runtime/autogen/libc.py:2188
                          GNU_PROPERTY_STACK_SIZE = 1                                                                                                                                                    # runtime/autogen/libc.py:2189
                          GNU_PROPERTY_NO_COPY_ON_PROTECTED = 2                                                                                                                                          # runtime/autogen/libc.py:2190
                          GNU_PROPERTY_UINT32_AND_LO = 0xb0000000                                                                                                                                        # runtime/autogen/libc.py:2191
                          GNU_PROPERTY_UINT32_AND_HI = 0xb0007fff                                                                                                                                        # runtime/autogen/libc.py:2192
                          GNU_PROPERTY_UINT32_OR_LO = 0xb0008000                                                                                                                                         # runtime/autogen/libc.py:2193
                          GNU_PROPERTY_UINT32_OR_HI = 0xb000ffff                                                                                                                                         # runtime/autogen/libc.py:2194
                          GNU_PROPERTY_1_NEEDED = GNU_PROPERTY_UINT32_OR_LO                                                                                                                              # runtime/autogen/libc.py:2195
                          GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS = (1 << 0)                                                                                                                        # runtime/autogen/libc.py:2196
                          GNU_PROPERTY_LOPROC = 0xc0000000                                                                                                                                               # runtime/autogen/libc.py:2197
                          GNU_PROPERTY_HIPROC = 0xdfffffff                                                                                                                                               # runtime/autogen/libc.py:2198
                          GNU_PROPERTY_LOUSER = 0xe0000000                                                                                                                                               # runtime/autogen/libc.py:2199
                          GNU_PROPERTY_HIUSER = 0xffffffff                                                                                                                                               # runtime/autogen/libc.py:2200
                          GNU_PROPERTY_AARCH64_FEATURE_1_AND = 0xc0000000                                                                                                                                # runtime/autogen/libc.py:2201
                          GNU_PROPERTY_AARCH64_FEATURE_1_BTI = (1 << 0)                                                                                                                                  # runtime/autogen/libc.py:2202
                          GNU_PROPERTY_AARCH64_FEATURE_1_PAC = (1 << 1)                                                                                                                                  # runtime/autogen/libc.py:2203
                          GNU_PROPERTY_X86_ISA_1_USED = 0xc0010002                                                                                                                                       # runtime/autogen/libc.py:2204
                          GNU_PROPERTY_X86_ISA_1_NEEDED = 0xc0008002                                                                                                                                     # runtime/autogen/libc.py:2205
                          GNU_PROPERTY_X86_FEATURE_1_AND = 0xc0000002                                                                                                                                    # runtime/autogen/libc.py:2206
                          GNU_PROPERTY_X86_ISA_1_BASELINE = (1 << 0)                                                                                                                                     # runtime/autogen/libc.py:2207
                          GNU_PROPERTY_X86_ISA_1_V2 = (1 << 1)                                                                                                                                           # runtime/autogen/libc.py:2208
                          GNU_PROPERTY_X86_ISA_1_V3 = (1 << 2)                                                                                                                                           # runtime/autogen/libc.py:2209
                          GNU_PROPERTY_X86_ISA_1_V4 = (1 << 3)                                                                                                                                           # runtime/autogen/libc.py:2210
                          GNU_PROPERTY_X86_FEATURE_1_IBT = (1 << 0)                                                                                                                                      # runtime/autogen/libc.py:2211
                          GNU_PROPERTY_X86_FEATURE_1_SHSTK = (1 << 1)                                                                                                                                    # runtime/autogen/libc.py:2212
                          EF_CPU32 = 0x00810000                                                                                                                                                          # runtime/autogen/libc.py:2219
                          R_68K_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:2220
                          R_68K_32 = 1                                                                                                                                                                   # runtime/autogen/libc.py:2221
                          R_68K_16 = 2                                                                                                                                                                   # runtime/autogen/libc.py:2222
                          R_68K_8 = 3                                                                                                                                                                    # runtime/autogen/libc.py:2223
                          R_68K_PC32 = 4                                                                                                                                                                 # runtime/autogen/libc.py:2224
                          R_68K_PC16 = 5                                                                                                                                                                 # runtime/autogen/libc.py:2225
                          R_68K_PC8 = 6                                                                                                                                                                  # runtime/autogen/libc.py:2226
                          R_68K_GOT32 = 7                                                                                                                                                                # runtime/autogen/libc.py:2227
                          R_68K_GOT16 = 8                                                                                                                                                                # runtime/autogen/libc.py:2228
                          R_68K_GOT8 = 9                                                                                                                                                                 # runtime/autogen/libc.py:2229
                          R_68K_GOT32O = 10                                                                                                                                                              # runtime/autogen/libc.py:2230
                          R_68K_GOT16O = 11                                                                                                                                                              # runtime/autogen/libc.py:2231
                          R_68K_GOT8O = 12                                                                                                                                                               # runtime/autogen/libc.py:2232
                          R_68K_PLT32 = 13                                                                                                                                                               # runtime/autogen/libc.py:2233
                          R_68K_PLT16 = 14                                                                                                                                                               # runtime/autogen/libc.py:2234
                          R_68K_PLT8 = 15                                                                                                                                                                # runtime/autogen/libc.py:2235
                          R_68K_PLT32O = 16                                                                                                                                                              # runtime/autogen/libc.py:2236
                          R_68K_PLT16O = 17                                                                                                                                                              # runtime/autogen/libc.py:2237
                          R_68K_PLT8O = 18                                                                                                                                                               # runtime/autogen/libc.py:2238
                          R_68K_COPY = 19                                                                                                                                                                # runtime/autogen/libc.py:2239
                          R_68K_GLOB_DAT = 20                                                                                                                                                            # runtime/autogen/libc.py:2240
                          R_68K_JMP_SLOT = 21                                                                                                                                                            # runtime/autogen/libc.py:2241
                          R_68K_RELATIVE = 22                                                                                                                                                            # runtime/autogen/libc.py:2242
                          R_68K_TLS_GD32 = 25                                                                                                                                                            # runtime/autogen/libc.py:2243
                          R_68K_TLS_GD16 = 26                                                                                                                                                            # runtime/autogen/libc.py:2244
                          R_68K_TLS_GD8 = 27                                                                                                                                                             # runtime/autogen/libc.py:2245
                          R_68K_TLS_LDM32 = 28                                                                                                                                                           # runtime/autogen/libc.py:2246
                          R_68K_TLS_LDM16 = 29                                                                                                                                                           # runtime/autogen/libc.py:2247
                          R_68K_TLS_LDM8 = 30                                                                                                                                                            # runtime/autogen/libc.py:2248
                          R_68K_TLS_LDO32 = 31                                                                                                                                                           # runtime/autogen/libc.py:2249
                          R_68K_TLS_LDO16 = 32                                                                                                                                                           # runtime/autogen/libc.py:2250
                          R_68K_TLS_LDO8 = 33                                                                                                                                                            # runtime/autogen/libc.py:2251
                          R_68K_TLS_IE32 = 34                                                                                                                                                            # runtime/autogen/libc.py:2252
                          R_68K_TLS_IE16 = 35                                                                                                                                                            # runtime/autogen/libc.py:2253
                          R_68K_TLS_IE8 = 36                                                                                                                                                             # runtime/autogen/libc.py:2254
                          R_68K_TLS_DTPMOD32 = 40                                                                                                                                                        # runtime/autogen/libc.py:2255
                          R_68K_TLS_DTPREL32 = 41                                                                                                                                                        # runtime/autogen/libc.py:2256
                          R_68K_TLS_TPREL32 = 42                                                                                                                                                         # runtime/autogen/libc.py:2257
                          R_68K_NUM = 43                                                                                                                                                                 # runtime/autogen/libc.py:2258
                          R_386_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:2259
                          R_386_32 = 1                                                                                                                                                                   # runtime/autogen/libc.py:2260
                          R_386_PC32 = 2                                                                                                                                                                 # runtime/autogen/libc.py:2261
                          R_386_GOT32 = 3                                                                                                                                                                # runtime/autogen/libc.py:2262
                          R_386_PLT32 = 4                                                                                                                                                                # runtime/autogen/libc.py:2263
                          R_386_COPY = 5                                                                                                                                                                 # runtime/autogen/libc.py:2264
                          R_386_GLOB_DAT = 6                                                                                                                                                             # runtime/autogen/libc.py:2265
                          R_386_JMP_SLOT = 7                                                                                                                                                             # runtime/autogen/libc.py:2266
                          R_386_RELATIVE = 8                                                                                                                                                             # runtime/autogen/libc.py:2267
                          R_386_GOTOFF = 9                                                                                                                                                               # runtime/autogen/libc.py:2268
                          R_386_GOTPC = 10                                                                                                                                                               # runtime/autogen/libc.py:2269
                          R_386_32PLT = 11                                                                                                                                                               # runtime/autogen/libc.py:2270
                          R_386_TLS_TPOFF = 14                                                                                                                                                           # runtime/autogen/libc.py:2271
                          R_386_16 = 20                                                                                                                                                                  # runtime/autogen/libc.py:2272
                          R_386_PC16 = 21                                                                                                                                                                # runtime/autogen/libc.py:2273
                          R_386_8 = 22                                                                                                                                                                   # runtime/autogen/libc.py:2274
                          R_386_PC8 = 23                                                                                                                                                                 # runtime/autogen/libc.py:2275
                          R_386_TLS_GD_PUSH = 25                                                                                                                                                         # runtime/autogen/libc.py:2276
                          R_386_TLS_GD_POP = 27                                                                                                                                                          # runtime/autogen/libc.py:2277
                          R_386_TLS_LDM_PUSH = 29                                                                                                                                                        # runtime/autogen/libc.py:2278
                          R_386_TLS_LDM_POP = 31                                                                                                                                                         # runtime/autogen/libc.py:2279
                          R_386_TLS_LDO_32 = 32                                                                                                                                                          # runtime/autogen/libc.py:2280
                          R_386_TLS_DTPMOD32 = 35                                                                                                                                                        # runtime/autogen/libc.py:2281
                          R_386_TLS_DTPOFF32 = 36                                                                                                                                                        # runtime/autogen/libc.py:2282
                          R_386_TLS_TPOFF32 = 37                                                                                                                                                         # runtime/autogen/libc.py:2283
                          R_386_SIZE32 = 38                                                                                                                                                              # runtime/autogen/libc.py:2284
                          R_386_TLS_GOTDESC = 39                                                                                                                                                         # runtime/autogen/libc.py:2285
                          R_386_IRELATIVE = 42                                                                                                                                                           # runtime/autogen/libc.py:2286
                          R_386_NUM = 44                                                                                                                                                                 # runtime/autogen/libc.py:2287
                          STT_SPARC_REGISTER = 13                                                                                                                                                        # runtime/autogen/libc.py:2288
                          EF_SPARCV9_MM = 3                                                                                                                                                              # runtime/autogen/libc.py:2289
                          EF_SPARCV9_TSO = 0                                                                                                                                                             # runtime/autogen/libc.py:2290
                          EF_SPARCV9_PSO = 1                                                                                                                                                             # runtime/autogen/libc.py:2291
                          EF_SPARCV9_RMO = 2                                                                                                                                                             # runtime/autogen/libc.py:2292
                          EF_SPARC_LEDATA = 0x800000                                                                                                                                                     # runtime/autogen/libc.py:2293
                          EF_SPARC_EXT_MASK = 0xFFFF00                                                                                                                                                   # runtime/autogen/libc.py:2294
                          EF_SPARC_32PLUS = 0x000100                                                                                                                                                     # runtime/autogen/libc.py:2295
                          EF_SPARC_SUN_US1 = 0x000200                                                                                                                                                    # runtime/autogen/libc.py:2296
                          EF_SPARC_HAL_R1 = 0x000400                                                                                                                                                     # runtime/autogen/libc.py:2297
                          EF_SPARC_SUN_US3 = 0x000800                                                                                                                                                    # runtime/autogen/libc.py:2298
                          R_SPARC_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:2299
                          R_SPARC_8 = 1                                                                                                                                                                  # runtime/autogen/libc.py:2300
                          R_SPARC_16 = 2                                                                                                                                                                 # runtime/autogen/libc.py:2301
                          R_SPARC_32 = 3                                                                                                                                                                 # runtime/autogen/libc.py:2302
                          R_SPARC_DISP8 = 4                                                                                                                                                              # runtime/autogen/libc.py:2303
                          R_SPARC_DISP16 = 5                                                                                                                                                             # runtime/autogen/libc.py:2304
                          R_SPARC_DISP32 = 6                                                                                                                                                             # runtime/autogen/libc.py:2305
                          R_SPARC_WDISP30 = 7                                                                                                                                                            # runtime/autogen/libc.py:2306
                          R_SPARC_WDISP22 = 8                                                                                                                                                            # runtime/autogen/libc.py:2307
                          R_SPARC_HI22 = 9                                                                                                                                                               # runtime/autogen/libc.py:2308
                          R_SPARC_22 = 10                                                                                                                                                                # runtime/autogen/libc.py:2309
                          R_SPARC_13 = 11                                                                                                                                                                # runtime/autogen/libc.py:2310
                          R_SPARC_LO10 = 12                                                                                                                                                              # runtime/autogen/libc.py:2311
                          R_SPARC_GOT10 = 13                                                                                                                                                             # runtime/autogen/libc.py:2312
                          R_SPARC_GOT13 = 14                                                                                                                                                             # runtime/autogen/libc.py:2313
                          R_SPARC_GOT22 = 15                                                                                                                                                             # runtime/autogen/libc.py:2314
                          R_SPARC_PC10 = 16                                                                                                                                                              # runtime/autogen/libc.py:2315
                          R_SPARC_PC22 = 17                                                                                                                                                              # runtime/autogen/libc.py:2316
                          R_SPARC_WPLT30 = 18                                                                                                                                                            # runtime/autogen/libc.py:2317
                          R_SPARC_COPY = 19                                                                                                                                                              # runtime/autogen/libc.py:2318
                          R_SPARC_GLOB_DAT = 20                                                                                                                                                          # runtime/autogen/libc.py:2319
                          R_SPARC_JMP_SLOT = 21                                                                                                                                                          # runtime/autogen/libc.py:2320
                          R_SPARC_RELATIVE = 22                                                                                                                                                          # runtime/autogen/libc.py:2321
                          R_SPARC_UA32 = 23                                                                                                                                                              # runtime/autogen/libc.py:2322
                          R_SPARC_PLT32 = 24                                                                                                                                                             # runtime/autogen/libc.py:2323
                          R_SPARC_HIPLT22 = 25                                                                                                                                                           # runtime/autogen/libc.py:2324
                          R_SPARC_LOPLT10 = 26                                                                                                                                                           # runtime/autogen/libc.py:2325
                          R_SPARC_PCPLT32 = 27                                                                                                                                                           # runtime/autogen/libc.py:2326
                          R_SPARC_PCPLT22 = 28                                                                                                                                                           # runtime/autogen/libc.py:2327
                          R_SPARC_PCPLT10 = 29                                                                                                                                                           # runtime/autogen/libc.py:2328
                          R_SPARC_10 = 30                                                                                                                                                                # runtime/autogen/libc.py:2329
                          R_SPARC_11 = 31                                                                                                                                                                # runtime/autogen/libc.py:2330
                          R_SPARC_64 = 32                                                                                                                                                                # runtime/autogen/libc.py:2331
                          R_SPARC_OLO10 = 33                                                                                                                                                             # runtime/autogen/libc.py:2332
                          R_SPARC_HH22 = 34                                                                                                                                                              # runtime/autogen/libc.py:2333
                          R_SPARC_HM10 = 35                                                                                                                                                              # runtime/autogen/libc.py:2334
                          R_SPARC_LM22 = 36                                                                                                                                                              # runtime/autogen/libc.py:2335
                          R_SPARC_PC_HH22 = 37                                                                                                                                                           # runtime/autogen/libc.py:2336
                          R_SPARC_PC_HM10 = 38                                                                                                                                                           # runtime/autogen/libc.py:2337
                          R_SPARC_PC_LM22 = 39                                                                                                                                                           # runtime/autogen/libc.py:2338
                          R_SPARC_WDISP16 = 40                                                                                                                                                           # runtime/autogen/libc.py:2339
                          R_SPARC_WDISP19 = 41                                                                                                                                                           # runtime/autogen/libc.py:2340
                          R_SPARC_GLOB_JMP = 42                                                                                                                                                          # runtime/autogen/libc.py:2341
                          R_SPARC_7 = 43                                                                                                                                                                 # runtime/autogen/libc.py:2342
                          R_SPARC_5 = 44                                                                                                                                                                 # runtime/autogen/libc.py:2343
                          R_SPARC_6 = 45                                                                                                                                                                 # runtime/autogen/libc.py:2344
                          R_SPARC_DISP64 = 46                                                                                                                                                            # runtime/autogen/libc.py:2345
                          R_SPARC_PLT64 = 47                                                                                                                                                             # runtime/autogen/libc.py:2346
                          R_SPARC_HIX22 = 48                                                                                                                                                             # runtime/autogen/libc.py:2347
                          R_SPARC_LOX10 = 49                                                                                                                                                             # runtime/autogen/libc.py:2348
                          R_SPARC_H44 = 50                                                                                                                                                               # runtime/autogen/libc.py:2349
                          R_SPARC_M44 = 51                                                                                                                                                               # runtime/autogen/libc.py:2350
                          R_SPARC_L44 = 52                                                                                                                                                               # runtime/autogen/libc.py:2351
                          R_SPARC_REGISTER = 53                                                                                                                                                          # runtime/autogen/libc.py:2352
                          R_SPARC_UA64 = 54                                                                                                                                                              # runtime/autogen/libc.py:2353
                          R_SPARC_UA16 = 55                                                                                                                                                              # runtime/autogen/libc.py:2354
                          R_SPARC_TLS_GD_HI22 = 56                                                                                                                                                       # runtime/autogen/libc.py:2355
                          R_SPARC_TLS_GD_LO10 = 57                                                                                                                                                       # runtime/autogen/libc.py:2356
                          R_SPARC_TLS_GD_ADD = 58                                                                                                                                                        # runtime/autogen/libc.py:2357
                          R_SPARC_TLS_GD_CALL = 59                                                                                                                                                       # runtime/autogen/libc.py:2358
                          R_SPARC_TLS_LDM_HI22 = 60                                                                                                                                                      # runtime/autogen/libc.py:2359
                          R_SPARC_TLS_LDM_LO10 = 61                                                                                                                                                      # runtime/autogen/libc.py:2360
                          R_SPARC_TLS_LDM_ADD = 62                                                                                                                                                       # runtime/autogen/libc.py:2361
                          R_SPARC_TLS_LDM_CALL = 63                                                                                                                                                      # runtime/autogen/libc.py:2362
                          R_SPARC_TLS_LDO_HIX22 = 64                                                                                                                                                     # runtime/autogen/libc.py:2363
                          R_SPARC_TLS_LDO_LOX10 = 65                                                                                                                                                     # runtime/autogen/libc.py:2364
                          R_SPARC_TLS_LDO_ADD = 66                                                                                                                                                       # runtime/autogen/libc.py:2365
                          R_SPARC_TLS_IE_HI22 = 67                                                                                                                                                       # runtime/autogen/libc.py:2366
                          R_SPARC_TLS_IE_LO10 = 68                                                                                                                                                       # runtime/autogen/libc.py:2367
                          R_SPARC_TLS_IE_LD = 69                                                                                                                                                         # runtime/autogen/libc.py:2368
                          R_SPARC_TLS_IE_LDX = 70                                                                                                                                                        # runtime/autogen/libc.py:2369
                          R_SPARC_TLS_IE_ADD = 71                                                                                                                                                        # runtime/autogen/libc.py:2370
                          R_SPARC_TLS_LE_HIX22 = 72                                                                                                                                                      # runtime/autogen/libc.py:2371
                          R_SPARC_TLS_LE_LOX10 = 73                                                                                                                                                      # runtime/autogen/libc.py:2372
                          R_SPARC_TLS_DTPMOD32 = 74                                                                                                                                                      # runtime/autogen/libc.py:2373
                          R_SPARC_TLS_DTPMOD64 = 75                                                                                                                                                      # runtime/autogen/libc.py:2374
                          R_SPARC_TLS_DTPOFF32 = 76                                                                                                                                                      # runtime/autogen/libc.py:2375
                          R_SPARC_TLS_DTPOFF64 = 77                                                                                                                                                      # runtime/autogen/libc.py:2376
                          R_SPARC_TLS_TPOFF32 = 78                                                                                                                                                       # runtime/autogen/libc.py:2377
                          R_SPARC_TLS_TPOFF64 = 79                                                                                                                                                       # runtime/autogen/libc.py:2378
                          R_SPARC_GOTDATA_HIX22 = 80                                                                                                                                                     # runtime/autogen/libc.py:2379
                          R_SPARC_GOTDATA_LOX10 = 81                                                                                                                                                     # runtime/autogen/libc.py:2380
                          R_SPARC_GOTDATA_OP_HIX22 = 82                                                                                                                                                  # runtime/autogen/libc.py:2381
                          R_SPARC_GOTDATA_OP_LOX10 = 83                                                                                                                                                  # runtime/autogen/libc.py:2382
                          R_SPARC_GOTDATA_OP = 84                                                                                                                                                        # runtime/autogen/libc.py:2383
                          R_SPARC_H34 = 85                                                                                                                                                               # runtime/autogen/libc.py:2384
                          R_SPARC_SIZE32 = 86                                                                                                                                                            # runtime/autogen/libc.py:2385
                          R_SPARC_SIZE64 = 87                                                                                                                                                            # runtime/autogen/libc.py:2386
                          R_SPARC_WDISP10 = 88                                                                                                                                                           # runtime/autogen/libc.py:2387
                          R_SPARC_JMP_IREL = 248                                                                                                                                                         # runtime/autogen/libc.py:2388
                          R_SPARC_IRELATIVE = 249                                                                                                                                                        # runtime/autogen/libc.py:2389
                          R_SPARC_GNU_VTINHERIT = 250                                                                                                                                                    # runtime/autogen/libc.py:2390
                          R_SPARC_GNU_VTENTRY = 251                                                                                                                                                      # runtime/autogen/libc.py:2391
                          R_SPARC_REV32 = 252                                                                                                                                                            # runtime/autogen/libc.py:2392
                          R_SPARC_NUM = 253                                                                                                                                                              # runtime/autogen/libc.py:2393
                          DT_SPARC_REGISTER = 0x70000001                                                                                                                                                 # runtime/autogen/libc.py:2394
                          DT_SPARC_NUM = 2                                                                                                                                                               # runtime/autogen/libc.py:2395
                          EF_MIPS_NOREORDER = 1                                                                                                                                                          # runtime/autogen/libc.py:2396
                          EF_MIPS_PIC = 2                                                                                                                                                                # runtime/autogen/libc.py:2397
                          EF_MIPS_CPIC = 4                                                                                                                                                               # runtime/autogen/libc.py:2398
                          EF_MIPS_XGOT = 8                                                                                                                                                               # runtime/autogen/libc.py:2399
                          EF_MIPS_64BIT_WHIRL = 16                                                                                                                                                       # runtime/autogen/libc.py:2400
                          EF_MIPS_ABI2 = 32                                                                                                                                                              # runtime/autogen/libc.py:2401
                          EF_MIPS_ABI_ON32 = 64                                                                                                                                                          # runtime/autogen/libc.py:2402
                          EF_MIPS_FP64 = 512                                                                                                                                                             # runtime/autogen/libc.py:2403
                          EF_MIPS_NAN2008 = 1024                                                                                                                                                         # runtime/autogen/libc.py:2404
                          EF_MIPS_ARCH = 0xf0000000                                                                                                                                                      # runtime/autogen/libc.py:2405
                          EF_MIPS_ARCH_1 = 0x00000000                                                                                                                                                    # runtime/autogen/libc.py:2406
                          EF_MIPS_ARCH_2 = 0x10000000                                                                                                                                                    # runtime/autogen/libc.py:2407
                          EF_MIPS_ARCH_3 = 0x20000000                                                                                                                                                    # runtime/autogen/libc.py:2408
                          EF_MIPS_ARCH_4 = 0x30000000                                                                                                                                                    # runtime/autogen/libc.py:2409
                          EF_MIPS_ARCH_5 = 0x40000000                                                                                                                                                    # runtime/autogen/libc.py:2410
                          EF_MIPS_ARCH_32 = 0x50000000                                                                                                                                                   # runtime/autogen/libc.py:2411
                          EF_MIPS_ARCH_64 = 0x60000000                                                                                                                                                   # runtime/autogen/libc.py:2412
                          EF_MIPS_ARCH_32R2 = 0x70000000                                                                                                                                                 # runtime/autogen/libc.py:2413
                          EF_MIPS_ARCH_64R2 = 0x80000000                                                                                                                                                 # runtime/autogen/libc.py:2414
                          E_MIPS_ARCH_1 = EF_MIPS_ARCH_1                                                                                                                                                 # runtime/autogen/libc.py:2415
                          E_MIPS_ARCH_2 = EF_MIPS_ARCH_2                                                                                                                                                 # runtime/autogen/libc.py:2416
                          E_MIPS_ARCH_3 = EF_MIPS_ARCH_3                                                                                                                                                 # runtime/autogen/libc.py:2417
                          E_MIPS_ARCH_4 = EF_MIPS_ARCH_4                                                                                                                                                 # runtime/autogen/libc.py:2418
                          E_MIPS_ARCH_5 = EF_MIPS_ARCH_5                                                                                                                                                 # runtime/autogen/libc.py:2419
                          E_MIPS_ARCH_32 = EF_MIPS_ARCH_32                                                                                                                                               # runtime/autogen/libc.py:2420
                          E_MIPS_ARCH_64 = EF_MIPS_ARCH_64                                                                                                                                               # runtime/autogen/libc.py:2421
                          SHN_MIPS_ACOMMON = 0xff00                                                                                                                                                      # runtime/autogen/libc.py:2422
                          SHN_MIPS_TEXT = 0xff01                                                                                                                                                         # runtime/autogen/libc.py:2423
                          SHN_MIPS_DATA = 0xff02                                                                                                                                                         # runtime/autogen/libc.py:2424
                          SHN_MIPS_SCOMMON = 0xff03                                                                                                                                                      # runtime/autogen/libc.py:2425
                          SHN_MIPS_SUNDEFINED = 0xff04                                                                                                                                                   # runtime/autogen/libc.py:2426
                          SHT_MIPS_LIBLIST = 0x70000000                                                                                                                                                  # runtime/autogen/libc.py:2427
                          SHT_MIPS_MSYM = 0x70000001                                                                                                                                                     # runtime/autogen/libc.py:2428
                          SHT_MIPS_CONFLICT = 0x70000002                                                                                                                                                 # runtime/autogen/libc.py:2429
                          SHT_MIPS_GPTAB = 0x70000003                                                                                                                                                    # runtime/autogen/libc.py:2430
                          SHT_MIPS_UCODE = 0x70000004                                                                                                                                                    # runtime/autogen/libc.py:2431
                          SHT_MIPS_DEBUG = 0x70000005                                                                                                                                                    # runtime/autogen/libc.py:2432
                          SHT_MIPS_REGINFO = 0x70000006                                                                                                                                                  # runtime/autogen/libc.py:2433
                          SHT_MIPS_PACKAGE = 0x70000007                                                                                                                                                  # runtime/autogen/libc.py:2434
                          SHT_MIPS_PACKSYM = 0x70000008                                                                                                                                                  # runtime/autogen/libc.py:2435
                          SHT_MIPS_RELD = 0x70000009                                                                                                                                                     # runtime/autogen/libc.py:2436
                          SHT_MIPS_IFACE = 0x7000000b                                                                                                                                                    # runtime/autogen/libc.py:2437
                          SHT_MIPS_CONTENT = 0x7000000c                                                                                                                                                  # runtime/autogen/libc.py:2438
                          SHT_MIPS_OPTIONS = 0x7000000d                                                                                                                                                  # runtime/autogen/libc.py:2439
                          SHT_MIPS_SHDR = 0x70000010                                                                                                                                                     # runtime/autogen/libc.py:2440
                          SHT_MIPS_FDESC = 0x70000011                                                                                                                                                    # runtime/autogen/libc.py:2441
                          SHT_MIPS_EXTSYM = 0x70000012                                                                                                                                                   # runtime/autogen/libc.py:2442
                          SHT_MIPS_DENSE = 0x70000013                                                                                                                                                    # runtime/autogen/libc.py:2443
                          SHT_MIPS_PDESC = 0x70000014                                                                                                                                                    # runtime/autogen/libc.py:2444
                          SHT_MIPS_LOCSYM = 0x70000015                                                                                                                                                   # runtime/autogen/libc.py:2445
                          SHT_MIPS_AUXSYM = 0x70000016                                                                                                                                                   # runtime/autogen/libc.py:2446
                          SHT_MIPS_OPTSYM = 0x70000017                                                                                                                                                   # runtime/autogen/libc.py:2447
                          SHT_MIPS_LOCSTR = 0x70000018                                                                                                                                                   # runtime/autogen/libc.py:2448
                          SHT_MIPS_LINE = 0x70000019                                                                                                                                                     # runtime/autogen/libc.py:2449
                          SHT_MIPS_RFDESC = 0x7000001a                                                                                                                                                   # runtime/autogen/libc.py:2450
                          SHT_MIPS_DELTASYM = 0x7000001b                                                                                                                                                 # runtime/autogen/libc.py:2451
                          SHT_MIPS_DELTAINST = 0x7000001c                                                                                                                                                # runtime/autogen/libc.py:2452
                          SHT_MIPS_DELTACLASS = 0x7000001d                                                                                                                                               # runtime/autogen/libc.py:2453
                          SHT_MIPS_DWARF = 0x7000001e                                                                                                                                                    # runtime/autogen/libc.py:2454
                          SHT_MIPS_DELTADECL = 0x7000001f                                                                                                                                                # runtime/autogen/libc.py:2455
                          SHT_MIPS_SYMBOL_LIB = 0x70000020                                                                                                                                               # runtime/autogen/libc.py:2456
                          SHT_MIPS_EVENTS = 0x70000021                                                                                                                                                   # runtime/autogen/libc.py:2457
                          SHT_MIPS_TRANSLATE = 0x70000022                                                                                                                                                # runtime/autogen/libc.py:2458
                          SHT_MIPS_PIXIE = 0x70000023                                                                                                                                                    # runtime/autogen/libc.py:2459
                          SHT_MIPS_XLATE = 0x70000024                                                                                                                                                    # runtime/autogen/libc.py:2460
                          SHT_MIPS_XLATE_DEBUG = 0x70000025                                                                                                                                              # runtime/autogen/libc.py:2461
                          SHT_MIPS_WHIRL = 0x70000026                                                                                                                                                    # runtime/autogen/libc.py:2462
                          SHT_MIPS_EH_REGION = 0x70000027                                                                                                                                                # runtime/autogen/libc.py:2463
                          SHT_MIPS_XLATE_OLD = 0x70000028                                                                                                                                                # runtime/autogen/libc.py:2464
                          SHT_MIPS_PDR_EXCEPTION = 0x70000029                                                                                                                                            # runtime/autogen/libc.py:2465
                          SHT_MIPS_XHASH = 0x7000002b                                                                                                                                                    # runtime/autogen/libc.py:2466
                          SHF_MIPS_GPREL = 0x10000000                                                                                                                                                    # runtime/autogen/libc.py:2467
                          SHF_MIPS_MERGE = 0x20000000                                                                                                                                                    # runtime/autogen/libc.py:2468
                          SHF_MIPS_ADDR = 0x40000000                                                                                                                                                     # runtime/autogen/libc.py:2469
                          SHF_MIPS_STRINGS = 0x80000000                                                                                                                                                  # runtime/autogen/libc.py:2470
                          SHF_MIPS_NOSTRIP = 0x08000000                                                                                                                                                  # runtime/autogen/libc.py:2471
                          SHF_MIPS_LOCAL = 0x04000000                                                                                                                                                    # runtime/autogen/libc.py:2472
                          SHF_MIPS_NAMES = 0x02000000                                                                                                                                                    # runtime/autogen/libc.py:2473
                          SHF_MIPS_NODUPE = 0x01000000                                                                                                                                                   # runtime/autogen/libc.py:2474
                          STO_MIPS_DEFAULT = 0x0                                                                                                                                                         # runtime/autogen/libc.py:2475
                          STO_MIPS_INTERNAL = 0x1                                                                                                                                                        # runtime/autogen/libc.py:2476
                          STO_MIPS_HIDDEN = 0x2                                                                                                                                                          # runtime/autogen/libc.py:2477
                          STO_MIPS_PROTECTED = 0x3                                                                                                                                                       # runtime/autogen/libc.py:2478
                          STO_MIPS_PLT = 0x8                                                                                                                                                             # runtime/autogen/libc.py:2479
                          STO_MIPS_SC_ALIGN_UNUSED = 0xff                                                                                                                                                # runtime/autogen/libc.py:2480
                          STB_MIPS_SPLIT_COMMON = 13                                                                                                                                                     # runtime/autogen/libc.py:2481
                          ODK_NULL = 0                                                                                                                                                                   # runtime/autogen/libc.py:2482
                          ODK_REGINFO = 1                                                                                                                                                                # runtime/autogen/libc.py:2483
                          ODK_EXCEPTIONS = 2                                                                                                                                                             # runtime/autogen/libc.py:2484
                          ODK_PAD = 3                                                                                                                                                                    # runtime/autogen/libc.py:2485
                          ODK_HWPATCH = 4                                                                                                                                                                # runtime/autogen/libc.py:2486
                          ODK_FILL = 5                                                                                                                                                                   # runtime/autogen/libc.py:2487
                          ODK_TAGS = 6                                                                                                                                                                   # runtime/autogen/libc.py:2488
                          ODK_HWAND = 7                                                                                                                                                                  # runtime/autogen/libc.py:2489
                          ODK_HWOR = 8                                                                                                                                                                   # runtime/autogen/libc.py:2490
                          OEX_FPU_MIN = 0x1f                                                                                                                                                             # runtime/autogen/libc.py:2491
                          OEX_FPU_MAX = 0x1f00                                                                                                                                                           # runtime/autogen/libc.py:2492
                          OEX_PAGE0 = 0x10000                                                                                                                                                            # runtime/autogen/libc.py:2493
                          OEX_SMM = 0x20000                                                                                                                                                              # runtime/autogen/libc.py:2494
                          OEX_FPDBUG = 0x40000                                                                                                                                                           # runtime/autogen/libc.py:2495
                          OEX_PRECISEFP = OEX_FPDBUG                                                                                                                                                     # runtime/autogen/libc.py:2496
                          OEX_DISMISS = 0x80000                                                                                                                                                          # runtime/autogen/libc.py:2497
                          OEX_FPU_INVAL = 0x10                                                                                                                                                           # runtime/autogen/libc.py:2498
                          OEX_FPU_DIV0 = 0x08                                                                                                                                                            # runtime/autogen/libc.py:2499
                          OEX_FPU_OFLO = 0x04                                                                                                                                                            # runtime/autogen/libc.py:2500
                          OEX_FPU_UFLO = 0x02                                                                                                                                                            # runtime/autogen/libc.py:2501
                          OEX_FPU_INEX = 0x01                                                                                                                                                            # runtime/autogen/libc.py:2502
                          OHW_R4KEOP = 0x1                                                                                                                                                               # runtime/autogen/libc.py:2503
                          OHW_R8KPFETCH = 0x2                                                                                                                                                            # runtime/autogen/libc.py:2504
                          OHW_R5KEOP = 0x4                                                                                                                                                               # runtime/autogen/libc.py:2505
                          OHW_R5KCVTL = 0x8                                                                                                                                                              # runtime/autogen/libc.py:2506
                          OPAD_PREFIX = 0x1                                                                                                                                                              # runtime/autogen/libc.py:2507
                          OPAD_POSTFIX = 0x2                                                                                                                                                             # runtime/autogen/libc.py:2508
                          OPAD_SYMBOL = 0x4                                                                                                                                                              # runtime/autogen/libc.py:2509
                          OHWA0_R4KEOP_CHECKED = 0x00000001                                                                                                                                              # runtime/autogen/libc.py:2510
                          OHWA1_R4KEOP_CLEAN = 0x00000002                                                                                                                                                # runtime/autogen/libc.py:2511
                          R_MIPS_NONE = 0                                                                                                                                                                # runtime/autogen/libc.py:2512
                          R_MIPS_16 = 1                                                                                                                                                                  # runtime/autogen/libc.py:2513
                          R_MIPS_32 = 2                                                                                                                                                                  # runtime/autogen/libc.py:2514
                          R_MIPS_REL32 = 3                                                                                                                                                               # runtime/autogen/libc.py:2515
                          R_MIPS_26 = 4                                                                                                                                                                  # runtime/autogen/libc.py:2516
                          R_MIPS_HI16 = 5                                                                                                                                                                # runtime/autogen/libc.py:2517
                          R_MIPS_LO16 = 6                                                                                                                                                                # runtime/autogen/libc.py:2518
                          R_MIPS_GPREL16 = 7                                                                                                                                                             # runtime/autogen/libc.py:2519
                          R_MIPS_LITERAL = 8                                                                                                                                                             # runtime/autogen/libc.py:2520
                          R_MIPS_GOT16 = 9                                                                                                                                                               # runtime/autogen/libc.py:2521
                          R_MIPS_PC16 = 10                                                                                                                                                               # runtime/autogen/libc.py:2522
                          R_MIPS_CALL16 = 11                                                                                                                                                             # runtime/autogen/libc.py:2523
                          R_MIPS_GPREL32 = 12                                                                                                                                                            # runtime/autogen/libc.py:2524
                          R_MIPS_SHIFT5 = 16                                                                                                                                                             # runtime/autogen/libc.py:2525
                          R_MIPS_SHIFT6 = 17                                                                                                                                                             # runtime/autogen/libc.py:2526
                          R_MIPS_64 = 18                                                                                                                                                                 # runtime/autogen/libc.py:2527
                          R_MIPS_GOT_DISP = 19                                                                                                                                                           # runtime/autogen/libc.py:2528
                          R_MIPS_GOT_PAGE = 20                                                                                                                                                           # runtime/autogen/libc.py:2529
                          R_MIPS_GOT_OFST = 21                                                                                                                                                           # runtime/autogen/libc.py:2530
                          R_MIPS_GOT_HI16 = 22                                                                                                                                                           # runtime/autogen/libc.py:2531
                          R_MIPS_GOT_LO16 = 23                                                                                                                                                           # runtime/autogen/libc.py:2532
                          R_MIPS_SUB = 24                                                                                                                                                                # runtime/autogen/libc.py:2533
                          R_MIPS_INSERT_A = 25                                                                                                                                                           # runtime/autogen/libc.py:2534
                          R_MIPS_INSERT_B = 26                                                                                                                                                           # runtime/autogen/libc.py:2535
                          R_MIPS_DELETE = 27                                                                                                                                                             # runtime/autogen/libc.py:2536
                          R_MIPS_HIGHER = 28                                                                                                                                                             # runtime/autogen/libc.py:2537
                          R_MIPS_HIGHEST = 29                                                                                                                                                            # runtime/autogen/libc.py:2538
                          R_MIPS_CALL_HI16 = 30                                                                                                                                                          # runtime/autogen/libc.py:2539
                          R_MIPS_CALL_LO16 = 31                                                                                                                                                          # runtime/autogen/libc.py:2540
                          R_MIPS_SCN_DISP = 32                                                                                                                                                           # runtime/autogen/libc.py:2541
                          R_MIPS_REL16 = 33                                                                                                                                                              # runtime/autogen/libc.py:2542
                          R_MIPS_ADD_IMMEDIATE = 34                                                                                                                                                      # runtime/autogen/libc.py:2543
                          R_MIPS_PJUMP = 35                                                                                                                                                              # runtime/autogen/libc.py:2544
                          R_MIPS_RELGOT = 36                                                                                                                                                             # runtime/autogen/libc.py:2545
                          R_MIPS_JALR = 37                                                                                                                                                               # runtime/autogen/libc.py:2546
                          R_MIPS_TLS_DTPMOD32 = 38                                                                                                                                                       # runtime/autogen/libc.py:2547
                          R_MIPS_TLS_DTPREL32 = 39                                                                                                                                                       # runtime/autogen/libc.py:2548
                          R_MIPS_TLS_DTPMOD64 = 40                                                                                                                                                       # runtime/autogen/libc.py:2549
                          R_MIPS_TLS_DTPREL64 = 41                                                                                                                                                       # runtime/autogen/libc.py:2550
                          R_MIPS_TLS_GD = 42                                                                                                                                                             # runtime/autogen/libc.py:2551
                          R_MIPS_TLS_LDM = 43                                                                                                                                                            # runtime/autogen/libc.py:2552
                          R_MIPS_TLS_DTPREL_HI16 = 44                                                                                                                                                    # runtime/autogen/libc.py:2553
                          R_MIPS_TLS_DTPREL_LO16 = 45                                                                                                                                                    # runtime/autogen/libc.py:2554
                          R_MIPS_TLS_GOTTPREL = 46                                                                                                                                                       # runtime/autogen/libc.py:2555
                          R_MIPS_TLS_TPREL32 = 47                                                                                                                                                        # runtime/autogen/libc.py:2556
                          R_MIPS_TLS_TPREL64 = 48                                                                                                                                                        # runtime/autogen/libc.py:2557
                          R_MIPS_TLS_TPREL_HI16 = 49                                                                                                                                                     # runtime/autogen/libc.py:2558
                          R_MIPS_TLS_TPREL_LO16 = 50                                                                                                                                                     # runtime/autogen/libc.py:2559
                          R_MIPS_GLOB_DAT = 51                                                                                                                                                           # runtime/autogen/libc.py:2560
                          R_MIPS_COPY = 126                                                                                                                                                              # runtime/autogen/libc.py:2561
                          R_MIPS_JUMP_SLOT = 127                                                                                                                                                         # runtime/autogen/libc.py:2562
                          R_MIPS_NUM = 128                                                                                                                                                               # runtime/autogen/libc.py:2563
                          PT_MIPS_REGINFO = 0x70000000                                                                                                                                                   # runtime/autogen/libc.py:2564
                          PT_MIPS_RTPROC = 0x70000001                                                                                                                                                    # runtime/autogen/libc.py:2565
                          PT_MIPS_OPTIONS = 0x70000002                                                                                                                                                   # runtime/autogen/libc.py:2566
                          PT_MIPS_ABIFLAGS = 0x70000003                                                                                                                                                  # runtime/autogen/libc.py:2567
                          PF_MIPS_LOCAL = 0x10000000                                                                                                                                                     # runtime/autogen/libc.py:2568
                          DT_MIPS_RLD_VERSION = 0x70000001                                                                                                                                               # runtime/autogen/libc.py:2569
                          DT_MIPS_TIME_STAMP = 0x70000002                                                                                                                                                # runtime/autogen/libc.py:2570
                          DT_MIPS_ICHECKSUM = 0x70000003                                                                                                                                                 # runtime/autogen/libc.py:2571
                          DT_MIPS_IVERSION = 0x70000004                                                                                                                                                  # runtime/autogen/libc.py:2572
                          DT_MIPS_FLAGS = 0x70000005                                                                                                                                                     # runtime/autogen/libc.py:2573
                          DT_MIPS_BASE_ADDRESS = 0x70000006                                                                                                                                              # runtime/autogen/libc.py:2574
                          DT_MIPS_MSYM = 0x70000007                                                                                                                                                      # runtime/autogen/libc.py:2575
                          DT_MIPS_CONFLICT = 0x70000008                                                                                                                                                  # runtime/autogen/libc.py:2576
                          DT_MIPS_LIBLIST = 0x70000009                                                                                                                                                   # runtime/autogen/libc.py:2577
                          DT_MIPS_LOCAL_GOTNO = 0x7000000a                                                                                                                                               # runtime/autogen/libc.py:2578
                          DT_MIPS_CONFLICTNO = 0x7000000b                                                                                                                                                # runtime/autogen/libc.py:2579
                          DT_MIPS_LIBLISTNO = 0x70000010                                                                                                                                                 # runtime/autogen/libc.py:2580
                          DT_MIPS_SYMTABNO = 0x70000011                                                                                                                                                  # runtime/autogen/libc.py:2581
                          DT_MIPS_UNREFEXTNO = 0x70000012                                                                                                                                                # runtime/autogen/libc.py:2582
                          DT_MIPS_GOTSYM = 0x70000013                                                                                                                                                    # runtime/autogen/libc.py:2583
                          DT_MIPS_HIPAGENO = 0x70000014                                                                                                                                                  # runtime/autogen/libc.py:2584
                          DT_MIPS_RLD_MAP = 0x70000016                                                                                                                                                   # runtime/autogen/libc.py:2585
                          DT_MIPS_DELTA_CLASS = 0x70000017                                                                                                                                               # runtime/autogen/libc.py:2586
                          DT_MIPS_DELTA_INSTANCE = 0x70000019                                                                                                                                            # runtime/autogen/libc.py:2587
                          DT_MIPS_DELTA_RELOC = 0x7000001b                                                                                                                                               # runtime/autogen/libc.py:2588
                          DT_MIPS_CXX_FLAGS = 0x70000022                                                                                                                                                 # runtime/autogen/libc.py:2589
                          DT_MIPS_PIXIE_INIT = 0x70000023                                                                                                                                                # runtime/autogen/libc.py:2590
                          DT_MIPS_SYMBOL_LIB = 0x70000024                                                                                                                                                # runtime/autogen/libc.py:2591
                          DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025                                                                                                                                          # runtime/autogen/libc.py:2592
                          DT_MIPS_LOCAL_GOTIDX = 0x70000026                                                                                                                                              # runtime/autogen/libc.py:2593
                          DT_MIPS_HIDDEN_GOTIDX = 0x70000027                                                                                                                                             # runtime/autogen/libc.py:2594
                          DT_MIPS_PROTECTED_GOTIDX = 0x70000028                                                                                                                                          # runtime/autogen/libc.py:2595
                          DT_MIPS_OPTIONS = 0x70000029                                                                                                                                                   # runtime/autogen/libc.py:2596
                          DT_MIPS_INTERFACE = 0x7000002a                                                                                                                                                 # runtime/autogen/libc.py:2597
                          DT_MIPS_DYNSTR_ALIGN = 0x7000002b                                                                                                                                              # runtime/autogen/libc.py:2598
                          DT_MIPS_INTERFACE_SIZE = 0x7000002c                                                                                                                                            # runtime/autogen/libc.py:2599
                          DT_MIPS_COMPACT_SIZE = 0x7000002f                                                                                                                                              # runtime/autogen/libc.py:2600
                          DT_MIPS_GP_VALUE = 0x70000030                                                                                                                                                  # runtime/autogen/libc.py:2601
                          DT_MIPS_AUX_DYNAMIC = 0x70000031                                                                                                                                               # runtime/autogen/libc.py:2602
                          DT_MIPS_PLTGOT = 0x70000032                                                                                                                                                    # runtime/autogen/libc.py:2603
                          DT_MIPS_RWPLT = 0x70000034                                                                                                                                                     # runtime/autogen/libc.py:2604
                          DT_MIPS_RLD_MAP_REL = 0x70000035                                                                                                                                               # runtime/autogen/libc.py:2605
                          DT_MIPS_XHASH = 0x70000036                                                                                                                                                     # runtime/autogen/libc.py:2606
                          RHF_NONE = 0                                                                                                                                                                   # runtime/autogen/libc.py:2607
                          RHF_QUICKSTART = (1 << 0)                                                                                                                                                      # runtime/autogen/libc.py:2608
                          RHF_NOTPOT = (1 << 1)                                                                                                                                                          # runtime/autogen/libc.py:2609
                          RHF_NO_LIBRARY_REPLACEMENT = (1 << 2)                                                                                                                                          # runtime/autogen/libc.py:2610
                          RHF_NO_MOVE = (1 << 3)                                                                                                                                                         # runtime/autogen/libc.py:2611
                          RHF_SGI_ONLY = (1 << 4)                                                                                                                                                        # runtime/autogen/libc.py:2612
                          RHF_GUARANTEE_INIT = (1 << 5)                                                                                                                                                  # runtime/autogen/libc.py:2613
                          RHF_DELTA_C_PLUS_PLUS = (1 << 6)                                                                                                                                               # runtime/autogen/libc.py:2614
                          RHF_GUARANTEE_START_INIT = (1 << 7)                                                                                                                                            # runtime/autogen/libc.py:2615
                          RHF_PIXIE = (1 << 8)                                                                                                                                                           # runtime/autogen/libc.py:2616
                          RHF_DEFAULT_DELAY_LOAD = (1 << 9)                                                                                                                                              # runtime/autogen/libc.py:2617
                          RHF_REQUICKSTART = (1 << 10)                                                                                                                                                   # runtime/autogen/libc.py:2618
                          RHF_REQUICKSTARTED = (1 << 11)                                                                                                                                                 # runtime/autogen/libc.py:2619
                          RHF_CORD = (1 << 12)                                                                                                                                                           # runtime/autogen/libc.py:2620
                          RHF_NO_UNRES_UNDEF = (1 << 13)                                                                                                                                                 # runtime/autogen/libc.py:2621
                          RHF_RLD_ORDER_SAFE = (1 << 14)                                                                                                                                                 # runtime/autogen/libc.py:2622
                          LL_NONE = 0                                                                                                                                                                    # runtime/autogen/libc.py:2623
                          LL_EXACT_MATCH = (1 << 0)                                                                                                                                                      # runtime/autogen/libc.py:2624
                          LL_IGNORE_INT_VER = (1 << 1)                                                                                                                                                   # runtime/autogen/libc.py:2625
                          LL_REQUIRE_MINOR = (1 << 2)                                                                                                                                                    # runtime/autogen/libc.py:2626
                          LL_EXPORTS = (1 << 3)                                                                                                                                                          # runtime/autogen/libc.py:2627
                          LL_DELAY_LOAD = (1 << 4)                                                                                                                                                       # runtime/autogen/libc.py:2628
                          LL_DELTA = (1 << 5)                                                                                                                                                            # runtime/autogen/libc.py:2629
                          MIPS_AFL_REG_NONE = 0x00                                                                                                                                                       # runtime/autogen/libc.py:2630
                          MIPS_AFL_REG_32 = 0x01                                                                                                                                                         # runtime/autogen/libc.py:2631
                          MIPS_AFL_REG_64 = 0x02                                                                                                                                                         # runtime/autogen/libc.py:2632
                          MIPS_AFL_REG_128 = 0x03                                                                                                                                                        # runtime/autogen/libc.py:2633
                          MIPS_AFL_ASE_DSP = 0x00000001                                                                                                                                                  # runtime/autogen/libc.py:2634
                          MIPS_AFL_ASE_DSPR2 = 0x00000002                                                                                                                                                # runtime/autogen/libc.py:2635
                          MIPS_AFL_ASE_EVA = 0x00000004                                                                                                                                                  # runtime/autogen/libc.py:2636
                          MIPS_AFL_ASE_MCU = 0x00000008                                                                                                                                                  # runtime/autogen/libc.py:2637
                          MIPS_AFL_ASE_MDMX = 0x00000010                                                                                                                                                 # runtime/autogen/libc.py:2638
                          MIPS_AFL_ASE_MIPS3D = 0x00000020                                                                                                                                               # runtime/autogen/libc.py:2639
                          MIPS_AFL_ASE_MT = 0x00000040                                                                                                                                                   # runtime/autogen/libc.py:2640
                          MIPS_AFL_ASE_SMARTMIPS = 0x00000080                                                                                                                                            # runtime/autogen/libc.py:2641
                          MIPS_AFL_ASE_VIRT = 0x00000100                                                                                                                                                 # runtime/autogen/libc.py:2642
                          MIPS_AFL_ASE_MSA = 0x00000200                                                                                                                                                  # runtime/autogen/libc.py:2643
                          MIPS_AFL_ASE_MIPS16 = 0x00000400                                                                                                                                               # runtime/autogen/libc.py:2644
                          MIPS_AFL_ASE_MICROMIPS = 0x00000800                                                                                                                                            # runtime/autogen/libc.py:2645
                          MIPS_AFL_ASE_XPA = 0x00001000                                                                                                                                                  # runtime/autogen/libc.py:2646
                          MIPS_AFL_ASE_MASK = 0x00001fff                                                                                                                                                 # runtime/autogen/libc.py:2647
                          MIPS_AFL_EXT_XLR = 1                                                                                                                                                           # runtime/autogen/libc.py:2648
                          MIPS_AFL_EXT_OCTEON2 = 2                                                                                                                                                       # runtime/autogen/libc.py:2649
                          MIPS_AFL_EXT_OCTEONP = 3                                                                                                                                                       # runtime/autogen/libc.py:2650
                          MIPS_AFL_EXT_LOONGSON_3A = 4                                                                                                                                                   # runtime/autogen/libc.py:2651
                          MIPS_AFL_EXT_OCTEON = 5                                                                                                                                                        # runtime/autogen/libc.py:2652
                          MIPS_AFL_EXT_5900 = 6                                                                                                                                                          # runtime/autogen/libc.py:2653
                          MIPS_AFL_EXT_4650 = 7                                                                                                                                                          # runtime/autogen/libc.py:2654
                          MIPS_AFL_EXT_4010 = 8                                                                                                                                                          # runtime/autogen/libc.py:2655
                          MIPS_AFL_EXT_4100 = 9                                                                                                                                                          # runtime/autogen/libc.py:2656
                          MIPS_AFL_EXT_3900 = 10                                                                                                                                                         # runtime/autogen/libc.py:2657
                          MIPS_AFL_EXT_10000 = 11                                                                                                                                                        # runtime/autogen/libc.py:2658
                          MIPS_AFL_EXT_SB1 = 12                                                                                                                                                          # runtime/autogen/libc.py:2659
                          MIPS_AFL_EXT_4111 = 13                                                                                                                                                         # runtime/autogen/libc.py:2660
                          MIPS_AFL_EXT_4120 = 14                                                                                                                                                         # runtime/autogen/libc.py:2661
                          MIPS_AFL_EXT_5400 = 15                                                                                                                                                         # runtime/autogen/libc.py:2662
                          MIPS_AFL_EXT_5500 = 16                                                                                                                                                         # runtime/autogen/libc.py:2663
                          MIPS_AFL_EXT_LOONGSON_2E = 17                                                                                                                                                  # runtime/autogen/libc.py:2664
                          MIPS_AFL_EXT_LOONGSON_2F = 18                                                                                                                                                  # runtime/autogen/libc.py:2665
                          MIPS_AFL_FLAGS1_ODDSPREG = 1                                                                                                                                                   # runtime/autogen/libc.py:2666
                          EF_PARISC_TRAPNIL = 0x00010000                                                                                                                                                 # runtime/autogen/libc.py:2667
                          EF_PARISC_EXT = 0x00020000                                                                                                                                                     # runtime/autogen/libc.py:2668
                          EF_PARISC_LSB = 0x00040000                                                                                                                                                     # runtime/autogen/libc.py:2669
                          EF_PARISC_WIDE = 0x00080000                                                                                                                                                    # runtime/autogen/libc.py:2670
                          EF_PARISC_LAZYSWAP = 0x00400000                                                                                                                                                # runtime/autogen/libc.py:2671
                          EF_PARISC_ARCH = 0x0000ffff                                                                                                                                                    # runtime/autogen/libc.py:2672
                          EFA_PARISC_1_0 = 0x020b                                                                                                                                                        # runtime/autogen/libc.py:2673
                          EFA_PARISC_1_1 = 0x0210                                                                                                                                                        # runtime/autogen/libc.py:2674
                          EFA_PARISC_2_0 = 0x0214                                                                                                                                                        # runtime/autogen/libc.py:2675
                          SHN_PARISC_HUGE_COMMON = 0xff01                                                                                                                                                # runtime/autogen/libc.py:2676
                          SHT_PARISC_EXT = 0x70000000                                                                                                                                                    # runtime/autogen/libc.py:2677
                          SHT_PARISC_UNWIND = 0x70000001                                                                                                                                                 # runtime/autogen/libc.py:2678
                          SHT_PARISC_DOC = 0x70000002                                                                                                                                                    # runtime/autogen/libc.py:2679
                          SHF_PARISC_SHORT = 0x20000000                                                                                                                                                  # runtime/autogen/libc.py:2680
                          SHF_PARISC_HUGE = 0x40000000                                                                                                                                                   # runtime/autogen/libc.py:2681
                          SHF_PARISC_SBP = 0x80000000                                                                                                                                                    # runtime/autogen/libc.py:2682
                          STT_PARISC_MILLICODE = 13                                                                                                                                                      # runtime/autogen/libc.py:2683
                          STT_HP_OPAQUE = (STT_LOOS + 0x1)                                                                                                                                               # runtime/autogen/libc.py:2684
                          STT_HP_STUB = (STT_LOOS + 0x2)                                                                                                                                                 # runtime/autogen/libc.py:2685
                          R_PARISC_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:2686
                          R_PARISC_DIR32 = 1                                                                                                                                                             # runtime/autogen/libc.py:2687
                          R_PARISC_DIR21L = 2                                                                                                                                                            # runtime/autogen/libc.py:2688
                          R_PARISC_DIR17R = 3                                                                                                                                                            # runtime/autogen/libc.py:2689
                          R_PARISC_DIR17F = 4                                                                                                                                                            # runtime/autogen/libc.py:2690
                          R_PARISC_DIR14R = 6                                                                                                                                                            # runtime/autogen/libc.py:2691
                          R_PARISC_PCREL32 = 9                                                                                                                                                           # runtime/autogen/libc.py:2692
                          R_PARISC_PCREL21L = 10                                                                                                                                                         # runtime/autogen/libc.py:2693
                          R_PARISC_PCREL17R = 11                                                                                                                                                         # runtime/autogen/libc.py:2694
                          R_PARISC_PCREL17F = 12                                                                                                                                                         # runtime/autogen/libc.py:2695
                          R_PARISC_PCREL14R = 14                                                                                                                                                         # runtime/autogen/libc.py:2696
                          R_PARISC_DPREL21L = 18                                                                                                                                                         # runtime/autogen/libc.py:2697
                          R_PARISC_DPREL14R = 22                                                                                                                                                         # runtime/autogen/libc.py:2698
                          R_PARISC_GPREL21L = 26                                                                                                                                                         # runtime/autogen/libc.py:2699
                          R_PARISC_GPREL14R = 30                                                                                                                                                         # runtime/autogen/libc.py:2700
                          R_PARISC_LTOFF21L = 34                                                                                                                                                         # runtime/autogen/libc.py:2701
                          R_PARISC_LTOFF14R = 38                                                                                                                                                         # runtime/autogen/libc.py:2702
                          R_PARISC_SECREL32 = 41                                                                                                                                                         # runtime/autogen/libc.py:2703
                          R_PARISC_SEGBASE = 48                                                                                                                                                          # runtime/autogen/libc.py:2704
                          R_PARISC_SEGREL32 = 49                                                                                                                                                         # runtime/autogen/libc.py:2705
                          R_PARISC_PLTOFF21L = 50                                                                                                                                                        # runtime/autogen/libc.py:2706
                          R_PARISC_PLTOFF14R = 54                                                                                                                                                        # runtime/autogen/libc.py:2707
                          R_PARISC_LTOFF_FPTR32 = 57                                                                                                                                                     # runtime/autogen/libc.py:2708
                          R_PARISC_LTOFF_FPTR21L = 58                                                                                                                                                    # runtime/autogen/libc.py:2709
                          R_PARISC_LTOFF_FPTR14R = 62                                                                                                                                                    # runtime/autogen/libc.py:2710
                          R_PARISC_FPTR64 = 64                                                                                                                                                           # runtime/autogen/libc.py:2711
                          R_PARISC_PLABEL32 = 65                                                                                                                                                         # runtime/autogen/libc.py:2712
                          R_PARISC_PLABEL21L = 66                                                                                                                                                        # runtime/autogen/libc.py:2713
                          R_PARISC_PLABEL14R = 70                                                                                                                                                        # runtime/autogen/libc.py:2714
                          R_PARISC_PCREL64 = 72                                                                                                                                                          # runtime/autogen/libc.py:2715
                          R_PARISC_PCREL22F = 74                                                                                                                                                         # runtime/autogen/libc.py:2716
                          R_PARISC_PCREL14WR = 75                                                                                                                                                        # runtime/autogen/libc.py:2717
                          R_PARISC_PCREL14DR = 76                                                                                                                                                        # runtime/autogen/libc.py:2718
                          R_PARISC_PCREL16F = 77                                                                                                                                                         # runtime/autogen/libc.py:2719
                          R_PARISC_PCREL16WF = 78                                                                                                                                                        # runtime/autogen/libc.py:2720
                          R_PARISC_PCREL16DF = 79                                                                                                                                                        # runtime/autogen/libc.py:2721
                          R_PARISC_DIR64 = 80                                                                                                                                                            # runtime/autogen/libc.py:2722
                          R_PARISC_DIR14WR = 83                                                                                                                                                          # runtime/autogen/libc.py:2723
                          R_PARISC_DIR14DR = 84                                                                                                                                                          # runtime/autogen/libc.py:2724
                          R_PARISC_DIR16F = 85                                                                                                                                                           # runtime/autogen/libc.py:2725
                          R_PARISC_DIR16WF = 86                                                                                                                                                          # runtime/autogen/libc.py:2726
                          R_PARISC_DIR16DF = 87                                                                                                                                                          # runtime/autogen/libc.py:2727
                          R_PARISC_GPREL64 = 88                                                                                                                                                          # runtime/autogen/libc.py:2728
                          R_PARISC_GPREL14WR = 91                                                                                                                                                        # runtime/autogen/libc.py:2729
                          R_PARISC_GPREL14DR = 92                                                                                                                                                        # runtime/autogen/libc.py:2730
                          R_PARISC_GPREL16F = 93                                                                                                                                                         # runtime/autogen/libc.py:2731
                          R_PARISC_GPREL16WF = 94                                                                                                                                                        # runtime/autogen/libc.py:2732
                          R_PARISC_GPREL16DF = 95                                                                                                                                                        # runtime/autogen/libc.py:2733
                          R_PARISC_LTOFF64 = 96                                                                                                                                                          # runtime/autogen/libc.py:2734
                          R_PARISC_LTOFF14WR = 99                                                                                                                                                        # runtime/autogen/libc.py:2735
                          R_PARISC_LTOFF14DR = 100                                                                                                                                                       # runtime/autogen/libc.py:2736
                          R_PARISC_LTOFF16F = 101                                                                                                                                                        # runtime/autogen/libc.py:2737
                          R_PARISC_LTOFF16WF = 102                                                                                                                                                       # runtime/autogen/libc.py:2738
                          R_PARISC_LTOFF16DF = 103                                                                                                                                                       # runtime/autogen/libc.py:2739
                          R_PARISC_SECREL64 = 104                                                                                                                                                        # runtime/autogen/libc.py:2740
                          R_PARISC_SEGREL64 = 112                                                                                                                                                        # runtime/autogen/libc.py:2741
                          R_PARISC_PLTOFF14WR = 115                                                                                                                                                      # runtime/autogen/libc.py:2742
                          R_PARISC_PLTOFF14DR = 116                                                                                                                                                      # runtime/autogen/libc.py:2743
                          R_PARISC_PLTOFF16F = 117                                                                                                                                                       # runtime/autogen/libc.py:2744
                          R_PARISC_PLTOFF16WF = 118                                                                                                                                                      # runtime/autogen/libc.py:2745
                          R_PARISC_PLTOFF16DF = 119                                                                                                                                                      # runtime/autogen/libc.py:2746
                          R_PARISC_LTOFF_FPTR64 = 120                                                                                                                                                    # runtime/autogen/libc.py:2747
                          R_PARISC_LTOFF_FPTR14WR = 123                                                                                                                                                  # runtime/autogen/libc.py:2748
                          R_PARISC_LTOFF_FPTR14DR = 124                                                                                                                                                  # runtime/autogen/libc.py:2749
                          R_PARISC_LTOFF_FPTR16F = 125                                                                                                                                                   # runtime/autogen/libc.py:2750
                          R_PARISC_LTOFF_FPTR16WF = 126                                                                                                                                                  # runtime/autogen/libc.py:2751
                          R_PARISC_LTOFF_FPTR16DF = 127                                                                                                                                                  # runtime/autogen/libc.py:2752
                          R_PARISC_LORESERVE = 128                                                                                                                                                       # runtime/autogen/libc.py:2753
                          R_PARISC_COPY = 128                                                                                                                                                            # runtime/autogen/libc.py:2754
                          R_PARISC_IPLT = 129                                                                                                                                                            # runtime/autogen/libc.py:2755
                          R_PARISC_EPLT = 130                                                                                                                                                            # runtime/autogen/libc.py:2756
                          R_PARISC_TPREL32 = 153                                                                                                                                                         # runtime/autogen/libc.py:2757
                          R_PARISC_TPREL21L = 154                                                                                                                                                        # runtime/autogen/libc.py:2758
                          R_PARISC_TPREL14R = 158                                                                                                                                                        # runtime/autogen/libc.py:2759
                          R_PARISC_LTOFF_TP21L = 162                                                                                                                                                     # runtime/autogen/libc.py:2760
                          R_PARISC_LTOFF_TP14R = 166                                                                                                                                                     # runtime/autogen/libc.py:2761
                          R_PARISC_LTOFF_TP14F = 167                                                                                                                                                     # runtime/autogen/libc.py:2762
                          R_PARISC_TPREL64 = 216                                                                                                                                                         # runtime/autogen/libc.py:2763
                          R_PARISC_TPREL14WR = 219                                                                                                                                                       # runtime/autogen/libc.py:2764
                          R_PARISC_TPREL14DR = 220                                                                                                                                                       # runtime/autogen/libc.py:2765
                          R_PARISC_TPREL16F = 221                                                                                                                                                        # runtime/autogen/libc.py:2766
                          R_PARISC_TPREL16WF = 222                                                                                                                                                       # runtime/autogen/libc.py:2767
                          R_PARISC_TPREL16DF = 223                                                                                                                                                       # runtime/autogen/libc.py:2768
                          R_PARISC_LTOFF_TP64 = 224                                                                                                                                                      # runtime/autogen/libc.py:2769
                          R_PARISC_LTOFF_TP14WR = 227                                                                                                                                                    # runtime/autogen/libc.py:2770
                          R_PARISC_LTOFF_TP14DR = 228                                                                                                                                                    # runtime/autogen/libc.py:2771
                          R_PARISC_LTOFF_TP16F = 229                                                                                                                                                     # runtime/autogen/libc.py:2772
                          R_PARISC_LTOFF_TP16WF = 230                                                                                                                                                    # runtime/autogen/libc.py:2773
                          R_PARISC_LTOFF_TP16DF = 231                                                                                                                                                    # runtime/autogen/libc.py:2774
                          R_PARISC_GNU_VTENTRY = 232                                                                                                                                                     # runtime/autogen/libc.py:2775
                          R_PARISC_GNU_VTINHERIT = 233                                                                                                                                                   # runtime/autogen/libc.py:2776
                          R_PARISC_TLS_GD21L = 234                                                                                                                                                       # runtime/autogen/libc.py:2777
                          R_PARISC_TLS_GD14R = 235                                                                                                                                                       # runtime/autogen/libc.py:2778
                          R_PARISC_TLS_GDCALL = 236                                                                                                                                                      # runtime/autogen/libc.py:2779
                          R_PARISC_TLS_LDM21L = 237                                                                                                                                                      # runtime/autogen/libc.py:2780
                          R_PARISC_TLS_LDM14R = 238                                                                                                                                                      # runtime/autogen/libc.py:2781
                          R_PARISC_TLS_LDMCALL = 239                                                                                                                                                     # runtime/autogen/libc.py:2782
                          R_PARISC_TLS_LDO21L = 240                                                                                                                                                      # runtime/autogen/libc.py:2783
                          R_PARISC_TLS_LDO14R = 241                                                                                                                                                      # runtime/autogen/libc.py:2784
                          R_PARISC_TLS_DTPMOD32 = 242                                                                                                                                                    # runtime/autogen/libc.py:2785
                          R_PARISC_TLS_DTPMOD64 = 243                                                                                                                                                    # runtime/autogen/libc.py:2786
                          R_PARISC_TLS_DTPOFF32 = 244                                                                                                                                                    # runtime/autogen/libc.py:2787
                          R_PARISC_TLS_DTPOFF64 = 245                                                                                                                                                    # runtime/autogen/libc.py:2788
                          R_PARISC_TLS_LE21L = R_PARISC_TPREL21L                                                                                                                                         # runtime/autogen/libc.py:2789
                          R_PARISC_TLS_LE14R = R_PARISC_TPREL14R                                                                                                                                         # runtime/autogen/libc.py:2790
                          R_PARISC_TLS_IE21L = R_PARISC_LTOFF_TP21L                                                                                                                                      # runtime/autogen/libc.py:2791
                          R_PARISC_TLS_IE14R = R_PARISC_LTOFF_TP14R                                                                                                                                      # runtime/autogen/libc.py:2792
                          R_PARISC_TLS_TPREL32 = R_PARISC_TPREL32                                                                                                                                        # runtime/autogen/libc.py:2793
                          R_PARISC_TLS_TPREL64 = R_PARISC_TPREL64                                                                                                                                        # runtime/autogen/libc.py:2794
                          R_PARISC_HIRESERVE = 255                                                                                                                                                       # runtime/autogen/libc.py:2795
                          PT_HP_TLS = (PT_LOOS + 0x0)                                                                                                                                                    # runtime/autogen/libc.py:2796
                          PT_HP_CORE_NONE = (PT_LOOS + 0x1)                                                                                                                                              # runtime/autogen/libc.py:2797
                          PT_HP_CORE_VERSION = (PT_LOOS + 0x2)                                                                                                                                           # runtime/autogen/libc.py:2798
                          PT_HP_CORE_KERNEL = (PT_LOOS + 0x3)                                                                                                                                            # runtime/autogen/libc.py:2799
                          PT_HP_CORE_COMM = (PT_LOOS + 0x4)                                                                                                                                              # runtime/autogen/libc.py:2800
                          PT_HP_CORE_PROC = (PT_LOOS + 0x5)                                                                                                                                              # runtime/autogen/libc.py:2801
                          PT_HP_CORE_LOADABLE = (PT_LOOS + 0x6)                                                                                                                                          # runtime/autogen/libc.py:2802
                          PT_HP_CORE_STACK = (PT_LOOS + 0x7)                                                                                                                                             # runtime/autogen/libc.py:2803
                          PT_HP_CORE_SHM = (PT_LOOS + 0x8)                                                                                                                                               # runtime/autogen/libc.py:2804
                          PT_HP_CORE_MMF = (PT_LOOS + 0x9)                                                                                                                                               # runtime/autogen/libc.py:2805
                          PT_HP_PARALLEL = (PT_LOOS + 0x10)                                                                                                                                              # runtime/autogen/libc.py:2806
                          PT_HP_FASTBIND = (PT_LOOS + 0x11)                                                                                                                                              # runtime/autogen/libc.py:2807
                          PT_HP_OPT_ANNOT = (PT_LOOS + 0x12)                                                                                                                                             # runtime/autogen/libc.py:2808
                          PT_HP_HSL_ANNOT = (PT_LOOS + 0x13)                                                                                                                                             # runtime/autogen/libc.py:2809
                          PT_HP_STACK = (PT_LOOS + 0x14)                                                                                                                                                 # runtime/autogen/libc.py:2810
                          PT_PARISC_ARCHEXT = 0x70000000                                                                                                                                                 # runtime/autogen/libc.py:2811
                          PT_PARISC_UNWIND = 0x70000001                                                                                                                                                  # runtime/autogen/libc.py:2812
                          PF_PARISC_SBP = 0x08000000                                                                                                                                                     # runtime/autogen/libc.py:2813
                          PF_HP_PAGE_SIZE = 0x00100000                                                                                                                                                   # runtime/autogen/libc.py:2814
                          PF_HP_FAR_SHARED = 0x00200000                                                                                                                                                  # runtime/autogen/libc.py:2815
                          PF_HP_NEAR_SHARED = 0x00400000                                                                                                                                                 # runtime/autogen/libc.py:2816
                          PF_HP_CODE = 0x01000000                                                                                                                                                        # runtime/autogen/libc.py:2817
                          PF_HP_MODIFY = 0x02000000                                                                                                                                                      # runtime/autogen/libc.py:2818
                          PF_HP_LAZYSWAP = 0x04000000                                                                                                                                                    # runtime/autogen/libc.py:2819
                          PF_HP_SBP = 0x08000000                                                                                                                                                         # runtime/autogen/libc.py:2820
                          EF_ALPHA_32BIT = 1                                                                                                                                                             # runtime/autogen/libc.py:2821
                          EF_ALPHA_CANRELAX = 2                                                                                                                                                          # runtime/autogen/libc.py:2822
                          SHT_ALPHA_DEBUG = 0x70000001                                                                                                                                                   # runtime/autogen/libc.py:2823
                          SHT_ALPHA_REGINFO = 0x70000002                                                                                                                                                 # runtime/autogen/libc.py:2824
                          SHF_ALPHA_GPREL = 0x10000000                                                                                                                                                   # runtime/autogen/libc.py:2825
                          STO_ALPHA_NOPV = 0x80                                                                                                                                                          # runtime/autogen/libc.py:2826
                          STO_ALPHA_STD_GPLOAD = 0x88                                                                                                                                                    # runtime/autogen/libc.py:2827
                          R_ALPHA_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:2828
                          R_ALPHA_REFLONG = 1                                                                                                                                                            # runtime/autogen/libc.py:2829
                          R_ALPHA_REFQUAD = 2                                                                                                                                                            # runtime/autogen/libc.py:2830
                          R_ALPHA_GPREL32 = 3                                                                                                                                                            # runtime/autogen/libc.py:2831
                          R_ALPHA_LITERAL = 4                                                                                                                                                            # runtime/autogen/libc.py:2832
                          R_ALPHA_LITUSE = 5                                                                                                                                                             # runtime/autogen/libc.py:2833
                          R_ALPHA_GPDISP = 6                                                                                                                                                             # runtime/autogen/libc.py:2834
                          R_ALPHA_BRADDR = 7                                                                                                                                                             # runtime/autogen/libc.py:2835
                          R_ALPHA_HINT = 8                                                                                                                                                               # runtime/autogen/libc.py:2836
                          R_ALPHA_SREL16 = 9                                                                                                                                                             # runtime/autogen/libc.py:2837
                          R_ALPHA_SREL32 = 10                                                                                                                                                            # runtime/autogen/libc.py:2838
                          R_ALPHA_SREL64 = 11                                                                                                                                                            # runtime/autogen/libc.py:2839
                          R_ALPHA_GPRELHIGH = 17                                                                                                                                                         # runtime/autogen/libc.py:2840
                          R_ALPHA_GPRELLOW = 18                                                                                                                                                          # runtime/autogen/libc.py:2841
                          R_ALPHA_GPREL16 = 19                                                                                                                                                           # runtime/autogen/libc.py:2842
                          R_ALPHA_COPY = 24                                                                                                                                                              # runtime/autogen/libc.py:2843
                          R_ALPHA_GLOB_DAT = 25                                                                                                                                                          # runtime/autogen/libc.py:2844
                          R_ALPHA_JMP_SLOT = 26                                                                                                                                                          # runtime/autogen/libc.py:2845
                          R_ALPHA_RELATIVE = 27                                                                                                                                                          # runtime/autogen/libc.py:2846
                          R_ALPHA_TLS_GD_HI = 28                                                                                                                                                         # runtime/autogen/libc.py:2847
                          R_ALPHA_TLSGD = 29                                                                                                                                                             # runtime/autogen/libc.py:2848
                          R_ALPHA_TLS_LDM = 30                                                                                                                                                           # runtime/autogen/libc.py:2849
                          R_ALPHA_DTPMOD64 = 31                                                                                                                                                          # runtime/autogen/libc.py:2850
                          R_ALPHA_GOTDTPREL = 32                                                                                                                                                         # runtime/autogen/libc.py:2851
                          R_ALPHA_DTPREL64 = 33                                                                                                                                                          # runtime/autogen/libc.py:2852
                          R_ALPHA_DTPRELHI = 34                                                                                                                                                          # runtime/autogen/libc.py:2853
                          R_ALPHA_DTPRELLO = 35                                                                                                                                                          # runtime/autogen/libc.py:2854
                          R_ALPHA_DTPREL16 = 36                                                                                                                                                          # runtime/autogen/libc.py:2855
                          R_ALPHA_GOTTPREL = 37                                                                                                                                                          # runtime/autogen/libc.py:2856
                          R_ALPHA_TPREL64 = 38                                                                                                                                                           # runtime/autogen/libc.py:2857
                          R_ALPHA_TPRELHI = 39                                                                                                                                                           # runtime/autogen/libc.py:2858
                          R_ALPHA_TPRELLO = 40                                                                                                                                                           # runtime/autogen/libc.py:2859
                          R_ALPHA_TPREL16 = 41                                                                                                                                                           # runtime/autogen/libc.py:2860
                          R_ALPHA_NUM = 46                                                                                                                                                               # runtime/autogen/libc.py:2861
                          LITUSE_ALPHA_ADDR = 0                                                                                                                                                          # runtime/autogen/libc.py:2862
                          LITUSE_ALPHA_BASE = 1                                                                                                                                                          # runtime/autogen/libc.py:2863
                          LITUSE_ALPHA_BYTOFF = 2                                                                                                                                                        # runtime/autogen/libc.py:2864
                          LITUSE_ALPHA_JSR = 3                                                                                                                                                           # runtime/autogen/libc.py:2865
                          LITUSE_ALPHA_TLS_GD = 4                                                                                                                                                        # runtime/autogen/libc.py:2866
                          LITUSE_ALPHA_TLS_LDM = 5                                                                                                                                                       # runtime/autogen/libc.py:2867
                          DT_ALPHA_PLTRO = (DT_LOPROC + 0)                                                                                                                                               # runtime/autogen/libc.py:2868
                          DT_ALPHA_NUM = 1                                                                                                                                                               # runtime/autogen/libc.py:2869
                          EF_PPC_EMB = 0x80000000                                                                                                                                                        # runtime/autogen/libc.py:2870
                          EF_PPC_RELOCATABLE = 0x00010000                                                                                                                                                # runtime/autogen/libc.py:2871
                          R_PPC_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:2872
                          R_PPC_ADDR32 = 1                                                                                                                                                               # runtime/autogen/libc.py:2873
                          R_PPC_ADDR24 = 2                                                                                                                                                               # runtime/autogen/libc.py:2874
                          R_PPC_ADDR16 = 3                                                                                                                                                               # runtime/autogen/libc.py:2875
                          R_PPC_ADDR16_LO = 4                                                                                                                                                            # runtime/autogen/libc.py:2876
                          R_PPC_ADDR16_HI = 5                                                                                                                                                            # runtime/autogen/libc.py:2877
                          R_PPC_ADDR16_HA = 6                                                                                                                                                            # runtime/autogen/libc.py:2878
                          R_PPC_ADDR14 = 7                                                                                                                                                               # runtime/autogen/libc.py:2879
                          R_PPC_ADDR14_BRTAKEN = 8                                                                                                                                                       # runtime/autogen/libc.py:2880
                          R_PPC_ADDR14_BRNTAKEN = 9                                                                                                                                                      # runtime/autogen/libc.py:2881
                          R_PPC_REL24 = 10                                                                                                                                                               # runtime/autogen/libc.py:2882
                          R_PPC_REL14 = 11                                                                                                                                                               # runtime/autogen/libc.py:2883
                          R_PPC_REL14_BRTAKEN = 12                                                                                                                                                       # runtime/autogen/libc.py:2884
                          R_PPC_REL14_BRNTAKEN = 13                                                                                                                                                      # runtime/autogen/libc.py:2885
                          R_PPC_GOT16 = 14                                                                                                                                                               # runtime/autogen/libc.py:2886
                          R_PPC_GOT16_LO = 15                                                                                                                                                            # runtime/autogen/libc.py:2887
                          R_PPC_GOT16_HI = 16                                                                                                                                                            # runtime/autogen/libc.py:2888
                          R_PPC_GOT16_HA = 17                                                                                                                                                            # runtime/autogen/libc.py:2889
                          R_PPC_PLTREL24 = 18                                                                                                                                                            # runtime/autogen/libc.py:2890
                          R_PPC_COPY = 19                                                                                                                                                                # runtime/autogen/libc.py:2891
                          R_PPC_GLOB_DAT = 20                                                                                                                                                            # runtime/autogen/libc.py:2892
                          R_PPC_JMP_SLOT = 21                                                                                                                                                            # runtime/autogen/libc.py:2893
                          R_PPC_RELATIVE = 22                                                                                                                                                            # runtime/autogen/libc.py:2894
                          R_PPC_LOCAL24PC = 23                                                                                                                                                           # runtime/autogen/libc.py:2895
                          R_PPC_UADDR32 = 24                                                                                                                                                             # runtime/autogen/libc.py:2896
                          R_PPC_UADDR16 = 25                                                                                                                                                             # runtime/autogen/libc.py:2897
                          R_PPC_REL32 = 26                                                                                                                                                               # runtime/autogen/libc.py:2898
                          R_PPC_PLT32 = 27                                                                                                                                                               # runtime/autogen/libc.py:2899
                          R_PPC_PLTREL32 = 28                                                                                                                                                            # runtime/autogen/libc.py:2900
                          R_PPC_PLT16_LO = 29                                                                                                                                                            # runtime/autogen/libc.py:2901
                          R_PPC_PLT16_HI = 30                                                                                                                                                            # runtime/autogen/libc.py:2902
                          R_PPC_PLT16_HA = 31                                                                                                                                                            # runtime/autogen/libc.py:2903
                          R_PPC_SDAREL16 = 32                                                                                                                                                            # runtime/autogen/libc.py:2904
                          R_PPC_SECTOFF = 33                                                                                                                                                             # runtime/autogen/libc.py:2905
                          R_PPC_SECTOFF_LO = 34                                                                                                                                                          # runtime/autogen/libc.py:2906
                          R_PPC_SECTOFF_HI = 35                                                                                                                                                          # runtime/autogen/libc.py:2907
                          R_PPC_SECTOFF_HA = 36                                                                                                                                                          # runtime/autogen/libc.py:2908
                          R_PPC_TLS = 67                                                                                                                                                                 # runtime/autogen/libc.py:2909
                          R_PPC_DTPMOD32 = 68                                                                                                                                                            # runtime/autogen/libc.py:2910
                          R_PPC_TPREL16 = 69                                                                                                                                                             # runtime/autogen/libc.py:2911
                          R_PPC_TPREL16_LO = 70                                                                                                                                                          # runtime/autogen/libc.py:2912
                          R_PPC_TPREL16_HI = 71                                                                                                                                                          # runtime/autogen/libc.py:2913
                          R_PPC_TPREL16_HA = 72                                                                                                                                                          # runtime/autogen/libc.py:2914
                          R_PPC_TPREL32 = 73                                                                                                                                                             # runtime/autogen/libc.py:2915
                          R_PPC_DTPREL16 = 74                                                                                                                                                            # runtime/autogen/libc.py:2916
                          R_PPC_DTPREL16_LO = 75                                                                                                                                                         # runtime/autogen/libc.py:2917
                          R_PPC_DTPREL16_HI = 76                                                                                                                                                         # runtime/autogen/libc.py:2918
                          R_PPC_DTPREL16_HA = 77                                                                                                                                                         # runtime/autogen/libc.py:2919
                          R_PPC_DTPREL32 = 78                                                                                                                                                            # runtime/autogen/libc.py:2920
                          R_PPC_GOT_TLSGD16 = 79                                                                                                                                                         # runtime/autogen/libc.py:2921
                          R_PPC_GOT_TLSGD16_LO = 80                                                                                                                                                      # runtime/autogen/libc.py:2922
                          R_PPC_GOT_TLSGD16_HI = 81                                                                                                                                                      # runtime/autogen/libc.py:2923
                          R_PPC_GOT_TLSGD16_HA = 82                                                                                                                                                      # runtime/autogen/libc.py:2924
                          R_PPC_GOT_TLSLD16 = 83                                                                                                                                                         # runtime/autogen/libc.py:2925
                          R_PPC_GOT_TLSLD16_LO = 84                                                                                                                                                      # runtime/autogen/libc.py:2926
                          R_PPC_GOT_TLSLD16_HI = 85                                                                                                                                                      # runtime/autogen/libc.py:2927
                          R_PPC_GOT_TLSLD16_HA = 86                                                                                                                                                      # runtime/autogen/libc.py:2928
                          R_PPC_GOT_TPREL16 = 87                                                                                                                                                         # runtime/autogen/libc.py:2929
                          R_PPC_GOT_TPREL16_LO = 88                                                                                                                                                      # runtime/autogen/libc.py:2930
                          R_PPC_GOT_TPREL16_HI = 89                                                                                                                                                      # runtime/autogen/libc.py:2931
                          R_PPC_GOT_TPREL16_HA = 90                                                                                                                                                      # runtime/autogen/libc.py:2932
                          R_PPC_GOT_DTPREL16 = 91                                                                                                                                                        # runtime/autogen/libc.py:2933
                          R_PPC_GOT_DTPREL16_LO = 92                                                                                                                                                     # runtime/autogen/libc.py:2934
                          R_PPC_GOT_DTPREL16_HI = 93                                                                                                                                                     # runtime/autogen/libc.py:2935
                          R_PPC_GOT_DTPREL16_HA = 94                                                                                                                                                     # runtime/autogen/libc.py:2936
                          R_PPC_TLSGD = 95                                                                                                                                                               # runtime/autogen/libc.py:2937
                          R_PPC_TLSLD = 96                                                                                                                                                               # runtime/autogen/libc.py:2938
                          R_PPC_EMB_NADDR32 = 101                                                                                                                                                        # runtime/autogen/libc.py:2939
                          R_PPC_EMB_NADDR16 = 102                                                                                                                                                        # runtime/autogen/libc.py:2940
                          R_PPC_EMB_NADDR16_LO = 103                                                                                                                                                     # runtime/autogen/libc.py:2941
                          R_PPC_EMB_NADDR16_HI = 104                                                                                                                                                     # runtime/autogen/libc.py:2942
                          R_PPC_EMB_NADDR16_HA = 105                                                                                                                                                     # runtime/autogen/libc.py:2943
                          R_PPC_EMB_SDAI16 = 106                                                                                                                                                         # runtime/autogen/libc.py:2944
                          R_PPC_EMB_SDA2I16 = 107                                                                                                                                                        # runtime/autogen/libc.py:2945
                          R_PPC_EMB_SDA2REL = 108                                                                                                                                                        # runtime/autogen/libc.py:2946
                          R_PPC_EMB_SDA21 = 109                                                                                                                                                          # runtime/autogen/libc.py:2947
                          R_PPC_EMB_MRKREF = 110                                                                                                                                                         # runtime/autogen/libc.py:2948
                          R_PPC_EMB_RELSEC16 = 111                                                                                                                                                       # runtime/autogen/libc.py:2949
                          R_PPC_EMB_RELST_LO = 112                                                                                                                                                       # runtime/autogen/libc.py:2950
                          R_PPC_EMB_RELST_HI = 113                                                                                                                                                       # runtime/autogen/libc.py:2951
                          R_PPC_EMB_RELST_HA = 114                                                                                                                                                       # runtime/autogen/libc.py:2952
                          R_PPC_EMB_BIT_FLD = 115                                                                                                                                                        # runtime/autogen/libc.py:2953
                          R_PPC_EMB_RELSDA = 116                                                                                                                                                         # runtime/autogen/libc.py:2954
                          R_PPC_DIAB_SDA21_LO = 180                                                                                                                                                      # runtime/autogen/libc.py:2955
                          R_PPC_DIAB_SDA21_HI = 181                                                                                                                                                      # runtime/autogen/libc.py:2956
                          R_PPC_DIAB_SDA21_HA = 182                                                                                                                                                      # runtime/autogen/libc.py:2957
                          R_PPC_DIAB_RELSDA_LO = 183                                                                                                                                                     # runtime/autogen/libc.py:2958
                          R_PPC_DIAB_RELSDA_HI = 184                                                                                                                                                     # runtime/autogen/libc.py:2959
                          R_PPC_DIAB_RELSDA_HA = 185                                                                                                                                                     # runtime/autogen/libc.py:2960
                          R_PPC_IRELATIVE = 248                                                                                                                                                          # runtime/autogen/libc.py:2961
                          R_PPC_REL16 = 249                                                                                                                                                              # runtime/autogen/libc.py:2962
                          R_PPC_REL16_LO = 250                                                                                                                                                           # runtime/autogen/libc.py:2963
                          R_PPC_REL16_HI = 251                                                                                                                                                           # runtime/autogen/libc.py:2964
                          R_PPC_REL16_HA = 252                                                                                                                                                           # runtime/autogen/libc.py:2965
                          R_PPC_TOC16 = 255                                                                                                                                                              # runtime/autogen/libc.py:2966
                          DT_PPC_GOT = (DT_LOPROC + 0)                                                                                                                                                   # runtime/autogen/libc.py:2967
                          DT_PPC_OPT = (DT_LOPROC + 1)                                                                                                                                                   # runtime/autogen/libc.py:2968
                          DT_PPC_NUM = 2                                                                                                                                                                 # runtime/autogen/libc.py:2969
                          PPC_OPT_TLS = 1                                                                                                                                                                # runtime/autogen/libc.py:2970
                          R_PPC64_NONE = R_PPC_NONE                                                                                                                                                      # runtime/autogen/libc.py:2971
                          R_PPC64_ADDR32 = R_PPC_ADDR32                                                                                                                                                  # runtime/autogen/libc.py:2972
                          R_PPC64_ADDR24 = R_PPC_ADDR24                                                                                                                                                  # runtime/autogen/libc.py:2973
                          R_PPC64_ADDR16 = R_PPC_ADDR16                                                                                                                                                  # runtime/autogen/libc.py:2974
                          R_PPC64_ADDR16_LO = R_PPC_ADDR16_LO                                                                                                                                            # runtime/autogen/libc.py:2975
                          R_PPC64_ADDR16_HI = R_PPC_ADDR16_HI                                                                                                                                            # runtime/autogen/libc.py:2976
                          R_PPC64_ADDR16_HA = R_PPC_ADDR16_HA                                                                                                                                            # runtime/autogen/libc.py:2977
                          R_PPC64_ADDR14 = R_PPC_ADDR14                                                                                                                                                  # runtime/autogen/libc.py:2978
                          R_PPC64_ADDR14_BRTAKEN = R_PPC_ADDR14_BRTAKEN                                                                                                                                  # runtime/autogen/libc.py:2979
                          R_PPC64_ADDR14_BRNTAKEN = R_PPC_ADDR14_BRNTAKEN                                                                                                                                # runtime/autogen/libc.py:2980
                          R_PPC64_REL24 = R_PPC_REL24                                                                                                                                                    # runtime/autogen/libc.py:2981
                          R_PPC64_REL14 = R_PPC_REL14                                                                                                                                                    # runtime/autogen/libc.py:2982
                          R_PPC64_REL14_BRTAKEN = R_PPC_REL14_BRTAKEN                                                                                                                                    # runtime/autogen/libc.py:2983
                          R_PPC64_REL14_BRNTAKEN = R_PPC_REL14_BRNTAKEN                                                                                                                                  # runtime/autogen/libc.py:2984
                          R_PPC64_GOT16 = R_PPC_GOT16                                                                                                                                                    # runtime/autogen/libc.py:2985
                          R_PPC64_GOT16_LO = R_PPC_GOT16_LO                                                                                                                                              # runtime/autogen/libc.py:2986
                          R_PPC64_GOT16_HI = R_PPC_GOT16_HI                                                                                                                                              # runtime/autogen/libc.py:2987
                          R_PPC64_GOT16_HA = R_PPC_GOT16_HA                                                                                                                                              # runtime/autogen/libc.py:2988
                          R_PPC64_COPY = R_PPC_COPY                                                                                                                                                      # runtime/autogen/libc.py:2989
                          R_PPC64_GLOB_DAT = R_PPC_GLOB_DAT                                                                                                                                              # runtime/autogen/libc.py:2990
                          R_PPC64_JMP_SLOT = R_PPC_JMP_SLOT                                                                                                                                              # runtime/autogen/libc.py:2991
                          R_PPC64_RELATIVE = R_PPC_RELATIVE                                                                                                                                              # runtime/autogen/libc.py:2992
                          R_PPC64_UADDR32 = R_PPC_UADDR32                                                                                                                                                # runtime/autogen/libc.py:2993
                          R_PPC64_UADDR16 = R_PPC_UADDR16                                                                                                                                                # runtime/autogen/libc.py:2994
                          R_PPC64_REL32 = R_PPC_REL32                                                                                                                                                    # runtime/autogen/libc.py:2995
                          R_PPC64_PLT32 = R_PPC_PLT32                                                                                                                                                    # runtime/autogen/libc.py:2996
                          R_PPC64_PLTREL32 = R_PPC_PLTREL32                                                                                                                                              # runtime/autogen/libc.py:2997
                          R_PPC64_PLT16_LO = R_PPC_PLT16_LO                                                                                                                                              # runtime/autogen/libc.py:2998
                          R_PPC64_PLT16_HI = R_PPC_PLT16_HI                                                                                                                                              # runtime/autogen/libc.py:2999
                          R_PPC64_PLT16_HA = R_PPC_PLT16_HA                                                                                                                                              # runtime/autogen/libc.py:3000
                          R_PPC64_SECTOFF = R_PPC_SECTOFF                                                                                                                                                # runtime/autogen/libc.py:3001
                          R_PPC64_SECTOFF_LO = R_PPC_SECTOFF_LO                                                                                                                                          # runtime/autogen/libc.py:3002
                          R_PPC64_SECTOFF_HI = R_PPC_SECTOFF_HI                                                                                                                                          # runtime/autogen/libc.py:3003
                          R_PPC64_SECTOFF_HA = R_PPC_SECTOFF_HA                                                                                                                                          # runtime/autogen/libc.py:3004
                          R_PPC64_ADDR30 = 37                                                                                                                                                            # runtime/autogen/libc.py:3005
                          R_PPC64_ADDR64 = 38                                                                                                                                                            # runtime/autogen/libc.py:3006
                          R_PPC64_ADDR16_HIGHER = 39                                                                                                                                                     # runtime/autogen/libc.py:3007
                          R_PPC64_ADDR16_HIGHERA = 40                                                                                                                                                    # runtime/autogen/libc.py:3008
                          R_PPC64_ADDR16_HIGHEST = 41                                                                                                                                                    # runtime/autogen/libc.py:3009
                          R_PPC64_ADDR16_HIGHESTA = 42                                                                                                                                                   # runtime/autogen/libc.py:3010
                          R_PPC64_UADDR64 = 43                                                                                                                                                           # runtime/autogen/libc.py:3011
                          R_PPC64_REL64 = 44                                                                                                                                                             # runtime/autogen/libc.py:3012
                          R_PPC64_PLT64 = 45                                                                                                                                                             # runtime/autogen/libc.py:3013
                          R_PPC64_PLTREL64 = 46                                                                                                                                                          # runtime/autogen/libc.py:3014
                          R_PPC64_TOC16 = 47                                                                                                                                                             # runtime/autogen/libc.py:3015
                          R_PPC64_TOC16_LO = 48                                                                                                                                                          # runtime/autogen/libc.py:3016
                          R_PPC64_TOC16_HI = 49                                                                                                                                                          # runtime/autogen/libc.py:3017
                          R_PPC64_TOC16_HA = 50                                                                                                                                                          # runtime/autogen/libc.py:3018
                          R_PPC64_TOC = 51                                                                                                                                                               # runtime/autogen/libc.py:3019
                          R_PPC64_PLTGOT16 = 52                                                                                                                                                          # runtime/autogen/libc.py:3020
                          R_PPC64_PLTGOT16_LO = 53                                                                                                                                                       # runtime/autogen/libc.py:3021
                          R_PPC64_PLTGOT16_HI = 54                                                                                                                                                       # runtime/autogen/libc.py:3022
                          R_PPC64_PLTGOT16_HA = 55                                                                                                                                                       # runtime/autogen/libc.py:3023
                          R_PPC64_ADDR16_DS = 56                                                                                                                                                         # runtime/autogen/libc.py:3024
                          R_PPC64_ADDR16_LO_DS = 57                                                                                                                                                      # runtime/autogen/libc.py:3025
                          R_PPC64_GOT16_DS = 58                                                                                                                                                          # runtime/autogen/libc.py:3026
                          R_PPC64_GOT16_LO_DS = 59                                                                                                                                                       # runtime/autogen/libc.py:3027
                          R_PPC64_PLT16_LO_DS = 60                                                                                                                                                       # runtime/autogen/libc.py:3028
                          R_PPC64_SECTOFF_DS = 61                                                                                                                                                        # runtime/autogen/libc.py:3029
                          R_PPC64_SECTOFF_LO_DS = 62                                                                                                                                                     # runtime/autogen/libc.py:3030
                          R_PPC64_TOC16_DS = 63                                                                                                                                                          # runtime/autogen/libc.py:3031
                          R_PPC64_TOC16_LO_DS = 64                                                                                                                                                       # runtime/autogen/libc.py:3032
                          R_PPC64_PLTGOT16_DS = 65                                                                                                                                                       # runtime/autogen/libc.py:3033
                          R_PPC64_PLTGOT16_LO_DS = 66                                                                                                                                                    # runtime/autogen/libc.py:3034
                          R_PPC64_TLS = 67                                                                                                                                                               # runtime/autogen/libc.py:3035
                          R_PPC64_DTPMOD64 = 68                                                                                                                                                          # runtime/autogen/libc.py:3036
                          R_PPC64_TPREL16 = 69                                                                                                                                                           # runtime/autogen/libc.py:3037
                          R_PPC64_TPREL16_LO = 70                                                                                                                                                        # runtime/autogen/libc.py:3038
                          R_PPC64_TPREL16_HI = 71                                                                                                                                                        # runtime/autogen/libc.py:3039
                          R_PPC64_TPREL16_HA = 72                                                                                                                                                        # runtime/autogen/libc.py:3040
                          R_PPC64_TPREL64 = 73                                                                                                                                                           # runtime/autogen/libc.py:3041
                          R_PPC64_DTPREL16 = 74                                                                                                                                                          # runtime/autogen/libc.py:3042
                          R_PPC64_DTPREL16_LO = 75                                                                                                                                                       # runtime/autogen/libc.py:3043
                          R_PPC64_DTPREL16_HI = 76                                                                                                                                                       # runtime/autogen/libc.py:3044
                          R_PPC64_DTPREL16_HA = 77                                                                                                                                                       # runtime/autogen/libc.py:3045
                          R_PPC64_DTPREL64 = 78                                                                                                                                                          # runtime/autogen/libc.py:3046
                          R_PPC64_GOT_TLSGD16 = 79                                                                                                                                                       # runtime/autogen/libc.py:3047
                          R_PPC64_GOT_TLSGD16_LO = 80                                                                                                                                                    # runtime/autogen/libc.py:3048
                          R_PPC64_GOT_TLSGD16_HI = 81                                                                                                                                                    # runtime/autogen/libc.py:3049
                          R_PPC64_GOT_TLSGD16_HA = 82                                                                                                                                                    # runtime/autogen/libc.py:3050
                          R_PPC64_GOT_TLSLD16 = 83                                                                                                                                                       # runtime/autogen/libc.py:3051
                          R_PPC64_GOT_TLSLD16_LO = 84                                                                                                                                                    # runtime/autogen/libc.py:3052
                          R_PPC64_GOT_TLSLD16_HI = 85                                                                                                                                                    # runtime/autogen/libc.py:3053
                          R_PPC64_GOT_TLSLD16_HA = 86                                                                                                                                                    # runtime/autogen/libc.py:3054
                          R_PPC64_GOT_TPREL16_DS = 87                                                                                                                                                    # runtime/autogen/libc.py:3055
                          R_PPC64_GOT_TPREL16_LO_DS = 88                                                                                                                                                 # runtime/autogen/libc.py:3056
                          R_PPC64_GOT_TPREL16_HI = 89                                                                                                                                                    # runtime/autogen/libc.py:3057
                          R_PPC64_GOT_TPREL16_HA = 90                                                                                                                                                    # runtime/autogen/libc.py:3058
                          R_PPC64_GOT_DTPREL16_DS = 91                                                                                                                                                   # runtime/autogen/libc.py:3059
                          R_PPC64_GOT_DTPREL16_LO_DS = 92                                                                                                                                                # runtime/autogen/libc.py:3060
                          R_PPC64_GOT_DTPREL16_HI = 93                                                                                                                                                   # runtime/autogen/libc.py:3061
                          R_PPC64_GOT_DTPREL16_HA = 94                                                                                                                                                   # runtime/autogen/libc.py:3062
                          R_PPC64_TPREL16_DS = 95                                                                                                                                                        # runtime/autogen/libc.py:3063
                          R_PPC64_TPREL16_LO_DS = 96                                                                                                                                                     # runtime/autogen/libc.py:3064
                          R_PPC64_TPREL16_HIGHER = 97                                                                                                                                                    # runtime/autogen/libc.py:3065
                          R_PPC64_TPREL16_HIGHERA = 98                                                                                                                                                   # runtime/autogen/libc.py:3066
                          R_PPC64_TPREL16_HIGHEST = 99                                                                                                                                                   # runtime/autogen/libc.py:3067
                          R_PPC64_TPREL16_HIGHESTA = 100                                                                                                                                                 # runtime/autogen/libc.py:3068
                          R_PPC64_DTPREL16_DS = 101                                                                                                                                                      # runtime/autogen/libc.py:3069
                          R_PPC64_DTPREL16_LO_DS = 102                                                                                                                                                   # runtime/autogen/libc.py:3070
                          R_PPC64_DTPREL16_HIGHER = 103                                                                                                                                                  # runtime/autogen/libc.py:3071
                          R_PPC64_DTPREL16_HIGHERA = 104                                                                                                                                                 # runtime/autogen/libc.py:3072
                          R_PPC64_DTPREL16_HIGHEST = 105                                                                                                                                                 # runtime/autogen/libc.py:3073
                          R_PPC64_DTPREL16_HIGHESTA = 106                                                                                                                                                # runtime/autogen/libc.py:3074
                          R_PPC64_TLSGD = 107                                                                                                                                                            # runtime/autogen/libc.py:3075
                          R_PPC64_TLSLD = 108                                                                                                                                                            # runtime/autogen/libc.py:3076
                          R_PPC64_TOCSAVE = 109                                                                                                                                                          # runtime/autogen/libc.py:3077
                          R_PPC64_ADDR16_HIGH = 110                                                                                                                                                      # runtime/autogen/libc.py:3078
                          R_PPC64_ADDR16_HIGHA = 111                                                                                                                                                     # runtime/autogen/libc.py:3079
                          R_PPC64_TPREL16_HIGH = 112                                                                                                                                                     # runtime/autogen/libc.py:3080
                          R_PPC64_TPREL16_HIGHA = 113                                                                                                                                                    # runtime/autogen/libc.py:3081
                          R_PPC64_DTPREL16_HIGH = 114                                                                                                                                                    # runtime/autogen/libc.py:3082
                          R_PPC64_DTPREL16_HIGHA = 115                                                                                                                                                   # runtime/autogen/libc.py:3083
                          R_PPC64_JMP_IREL = 247                                                                                                                                                         # runtime/autogen/libc.py:3084
                          R_PPC64_IRELATIVE = 248                                                                                                                                                        # runtime/autogen/libc.py:3085
                          R_PPC64_REL16 = 249                                                                                                                                                            # runtime/autogen/libc.py:3086
                          R_PPC64_REL16_LO = 250                                                                                                                                                         # runtime/autogen/libc.py:3087
                          R_PPC64_REL16_HI = 251                                                                                                                                                         # runtime/autogen/libc.py:3088
                          R_PPC64_REL16_HA = 252                                                                                                                                                         # runtime/autogen/libc.py:3089
                          EF_PPC64_ABI = 3                                                                                                                                                               # runtime/autogen/libc.py:3090
                          DT_PPC64_GLINK = (DT_LOPROC + 0)                                                                                                                                               # runtime/autogen/libc.py:3091
                          DT_PPC64_OPD = (DT_LOPROC + 1)                                                                                                                                                 # runtime/autogen/libc.py:3092
                          DT_PPC64_OPDSZ = (DT_LOPROC + 2)                                                                                                                                               # runtime/autogen/libc.py:3093
                          DT_PPC64_OPT = (DT_LOPROC + 3)                                                                                                                                                 # runtime/autogen/libc.py:3094
                          DT_PPC64_NUM = 4                                                                                                                                                               # runtime/autogen/libc.py:3095
                          PPC64_OPT_TLS = 1                                                                                                                                                              # runtime/autogen/libc.py:3096
                          PPC64_OPT_MULTI_TOC = 2                                                                                                                                                        # runtime/autogen/libc.py:3097
                          PPC64_OPT_LOCALENTRY = 4                                                                                                                                                       # runtime/autogen/libc.py:3098
                          STO_PPC64_LOCAL_BIT = 5                                                                                                                                                        # runtime/autogen/libc.py:3099
                          STO_PPC64_LOCAL_MASK = (7 << STO_PPC64_LOCAL_BIT)                                                                                                                              # runtime/autogen/libc.py:3100
                          EF_ARM_RELEXEC = 0x01                                                                                                                                                          # runtime/autogen/libc.py:3101
                          EF_ARM_HASENTRY = 0x02                                                                                                                                                         # runtime/autogen/libc.py:3102
                          EF_ARM_INTERWORK = 0x04                                                                                                                                                        # runtime/autogen/libc.py:3103
                          EF_ARM_APCS_26 = 0x08                                                                                                                                                          # runtime/autogen/libc.py:3104
                          EF_ARM_APCS_FLOAT = 0x10                                                                                                                                                       # runtime/autogen/libc.py:3105
                          EF_ARM_PIC = 0x20                                                                                                                                                              # runtime/autogen/libc.py:3106
                          EF_ARM_ALIGN8 = 0x40                                                                                                                                                           # runtime/autogen/libc.py:3107
                          EF_ARM_NEW_ABI = 0x80                                                                                                                                                          # runtime/autogen/libc.py:3108
                          EF_ARM_OLD_ABI = 0x100                                                                                                                                                         # runtime/autogen/libc.py:3109
                          EF_ARM_SOFT_FLOAT = 0x200                                                                                                                                                      # runtime/autogen/libc.py:3110
                          EF_ARM_VFP_FLOAT = 0x400                                                                                                                                                       # runtime/autogen/libc.py:3111
                          EF_ARM_MAVERICK_FLOAT = 0x800                                                                                                                                                  # runtime/autogen/libc.py:3112
                          EF_ARM_ABI_FLOAT_SOFT = 0x200                                                                                                                                                  # runtime/autogen/libc.py:3113
                          EF_ARM_ABI_FLOAT_HARD = 0x400                                                                                                                                                  # runtime/autogen/libc.py:3114
                          EF_ARM_SYMSARESORTED = 0x04                                                                                                                                                    # runtime/autogen/libc.py:3115
                          EF_ARM_DYNSYMSUSESEGIDX = 0x08                                                                                                                                                 # runtime/autogen/libc.py:3116
                          EF_ARM_MAPSYMSFIRST = 0x10                                                                                                                                                     # runtime/autogen/libc.py:3117
                          EF_ARM_EABIMASK = 0XFF000000                                                                                                                                                   # runtime/autogen/libc.py:3118
                          EF_ARM_BE8 = 0x00800000                                                                                                                                                        # runtime/autogen/libc.py:3119
                          EF_ARM_LE8 = 0x00400000                                                                                                                                                        # runtime/autogen/libc.py:3120
                          EF_ARM_EABI_UNKNOWN = 0x00000000                                                                                                                                               # runtime/autogen/libc.py:3122
                          EF_ARM_EABI_VER1 = 0x01000000                                                                                                                                                  # runtime/autogen/libc.py:3123
                          EF_ARM_EABI_VER2 = 0x02000000                                                                                                                                                  # runtime/autogen/libc.py:3124
                          EF_ARM_EABI_VER3 = 0x03000000                                                                                                                                                  # runtime/autogen/libc.py:3125
                          EF_ARM_EABI_VER4 = 0x04000000                                                                                                                                                  # runtime/autogen/libc.py:3126
                          EF_ARM_EABI_VER5 = 0x05000000                                                                                                                                                  # runtime/autogen/libc.py:3127
                          STT_ARM_TFUNC = STT_LOPROC                                                                                                                                                     # runtime/autogen/libc.py:3128
                          STT_ARM_16BIT = STT_HIPROC                                                                                                                                                     # runtime/autogen/libc.py:3129
                          SHF_ARM_ENTRYSECT = 0x10000000                                                                                                                                                 # runtime/autogen/libc.py:3130
                          PF_ARM_PI = 0x20000000                                                                                                                                                         # runtime/autogen/libc.py:3131
                          PF_ARM_ABS = 0x40000000                                                                                                                                                        # runtime/autogen/libc.py:3132
                          PT_ARM_EXIDX = (PT_LOPROC + 1)                                                                                                                                                 # runtime/autogen/libc.py:3133
                          SHT_ARM_EXIDX = (SHT_LOPROC + 1)                                                                                                                                               # runtime/autogen/libc.py:3134
                          SHT_ARM_PREEMPTMAP = (SHT_LOPROC + 2)                                                                                                                                          # runtime/autogen/libc.py:3135
                          SHT_ARM_ATTRIBUTES = (SHT_LOPROC + 3)                                                                                                                                          # runtime/autogen/libc.py:3136
                          R_AARCH64_NONE = 0                                                                                                                                                             # runtime/autogen/libc.py:3137
                          R_AARCH64_P32_ABS32 = 1                                                                                                                                                        # runtime/autogen/libc.py:3138
                          R_AARCH64_P32_COPY = 180                                                                                                                                                       # runtime/autogen/libc.py:3139
                          R_AARCH64_P32_GLOB_DAT = 181                                                                                                                                                   # runtime/autogen/libc.py:3140
                          R_AARCH64_P32_JUMP_SLOT = 182                                                                                                                                                  # runtime/autogen/libc.py:3141
                          R_AARCH64_P32_RELATIVE = 183                                                                                                                                                   # runtime/autogen/libc.py:3142
                          R_AARCH64_P32_TLS_DTPMOD = 184                                                                                                                                                 # runtime/autogen/libc.py:3143
                          R_AARCH64_P32_TLS_DTPREL = 185                                                                                                                                                 # runtime/autogen/libc.py:3144
                          R_AARCH64_P32_TLS_TPREL = 186                                                                                                                                                  # runtime/autogen/libc.py:3145
                          R_AARCH64_P32_TLSDESC = 187                                                                                                                                                    # runtime/autogen/libc.py:3146
                          R_AARCH64_P32_IRELATIVE = 188                                                                                                                                                  # runtime/autogen/libc.py:3147
                          R_AARCH64_ABS64 = 257                                                                                                                                                          # runtime/autogen/libc.py:3148
                          R_AARCH64_ABS32 = 258                                                                                                                                                          # runtime/autogen/libc.py:3149
                          R_AARCH64_ABS16 = 259                                                                                                                                                          # runtime/autogen/libc.py:3150
                          R_AARCH64_PREL64 = 260                                                                                                                                                         # runtime/autogen/libc.py:3151
                          R_AARCH64_PREL32 = 261                                                                                                                                                         # runtime/autogen/libc.py:3152
                          R_AARCH64_PREL16 = 262                                                                                                                                                         # runtime/autogen/libc.py:3153
                          R_AARCH64_MOVW_UABS_G0 = 263                                                                                                                                                   # runtime/autogen/libc.py:3154
                          R_AARCH64_MOVW_UABS_G0_NC = 264                                                                                                                                                # runtime/autogen/libc.py:3155
                          R_AARCH64_MOVW_UABS_G1 = 265                                                                                                                                                   # runtime/autogen/libc.py:3156
                          R_AARCH64_MOVW_UABS_G1_NC = 266                                                                                                                                                # runtime/autogen/libc.py:3157
                          R_AARCH64_MOVW_UABS_G2 = 267                                                                                                                                                   # runtime/autogen/libc.py:3158
                          R_AARCH64_MOVW_UABS_G2_NC = 268                                                                                                                                                # runtime/autogen/libc.py:3159
                          R_AARCH64_MOVW_UABS_G3 = 269                                                                                                                                                   # runtime/autogen/libc.py:3160
                          R_AARCH64_MOVW_SABS_G0 = 270                                                                                                                                                   # runtime/autogen/libc.py:3161
                          R_AARCH64_MOVW_SABS_G1 = 271                                                                                                                                                   # runtime/autogen/libc.py:3162
                          R_AARCH64_MOVW_SABS_G2 = 272                                                                                                                                                   # runtime/autogen/libc.py:3163
                          R_AARCH64_LD_PREL_LO19 = 273                                                                                                                                                   # runtime/autogen/libc.py:3164
                          R_AARCH64_ADR_PREL_LO21 = 274                                                                                                                                                  # runtime/autogen/libc.py:3165
                          R_AARCH64_ADR_PREL_PG_HI21 = 275                                                                                                                                               # runtime/autogen/libc.py:3166
                          R_AARCH64_ADR_PREL_PG_HI21_NC = 276                                                                                                                                            # runtime/autogen/libc.py:3167
                          R_AARCH64_ADD_ABS_LO12_NC = 277                                                                                                                                                # runtime/autogen/libc.py:3168
                          R_AARCH64_LDST8_ABS_LO12_NC = 278                                                                                                                                              # runtime/autogen/libc.py:3169
                          R_AARCH64_TSTBR14 = 279                                                                                                                                                        # runtime/autogen/libc.py:3170
                          R_AARCH64_CONDBR19 = 280                                                                                                                                                       # runtime/autogen/libc.py:3171
                          R_AARCH64_JUMP26 = 282                                                                                                                                                         # runtime/autogen/libc.py:3172
                          R_AARCH64_CALL26 = 283                                                                                                                                                         # runtime/autogen/libc.py:3173
                          R_AARCH64_LDST16_ABS_LO12_NC = 284                                                                                                                                             # runtime/autogen/libc.py:3174
                          R_AARCH64_LDST32_ABS_LO12_NC = 285                                                                                                                                             # runtime/autogen/libc.py:3175
                          R_AARCH64_LDST64_ABS_LO12_NC = 286                                                                                                                                             # runtime/autogen/libc.py:3176
                          R_AARCH64_MOVW_PREL_G0 = 287                                                                                                                                                   # runtime/autogen/libc.py:3177
                          R_AARCH64_MOVW_PREL_G0_NC = 288                                                                                                                                                # runtime/autogen/libc.py:3178
                          R_AARCH64_MOVW_PREL_G1 = 289                                                                                                                                                   # runtime/autogen/libc.py:3179
                          R_AARCH64_MOVW_PREL_G1_NC = 290                                                                                                                                                # runtime/autogen/libc.py:3180
                          R_AARCH64_MOVW_PREL_G2 = 291                                                                                                                                                   # runtime/autogen/libc.py:3181
                          R_AARCH64_MOVW_PREL_G2_NC = 292                                                                                                                                                # runtime/autogen/libc.py:3182
                          R_AARCH64_MOVW_PREL_G3 = 293                                                                                                                                                   # runtime/autogen/libc.py:3183
                          R_AARCH64_LDST128_ABS_LO12_NC = 299                                                                                                                                            # runtime/autogen/libc.py:3184
                          R_AARCH64_MOVW_GOTOFF_G0 = 300                                                                                                                                                 # runtime/autogen/libc.py:3185
                          R_AARCH64_MOVW_GOTOFF_G0_NC = 301                                                                                                                                              # runtime/autogen/libc.py:3186
                          R_AARCH64_MOVW_GOTOFF_G1 = 302                                                                                                                                                 # runtime/autogen/libc.py:3187
                          R_AARCH64_MOVW_GOTOFF_G1_NC = 303                                                                                                                                              # runtime/autogen/libc.py:3188
                          R_AARCH64_MOVW_GOTOFF_G2 = 304                                                                                                                                                 # runtime/autogen/libc.py:3189
                          R_AARCH64_MOVW_GOTOFF_G2_NC = 305                                                                                                                                              # runtime/autogen/libc.py:3190
                          R_AARCH64_MOVW_GOTOFF_G3 = 306                                                                                                                                                 # runtime/autogen/libc.py:3191
                          R_AARCH64_GOTREL64 = 307                                                                                                                                                       # runtime/autogen/libc.py:3192
                          R_AARCH64_GOTREL32 = 308                                                                                                                                                       # runtime/autogen/libc.py:3193
                          R_AARCH64_GOT_LD_PREL19 = 309                                                                                                                                                  # runtime/autogen/libc.py:3194
                          R_AARCH64_LD64_GOTOFF_LO15 = 310                                                                                                                                               # runtime/autogen/libc.py:3195
                          R_AARCH64_ADR_GOT_PAGE = 311                                                                                                                                                   # runtime/autogen/libc.py:3196
                          R_AARCH64_LD64_GOT_LO12_NC = 312                                                                                                                                               # runtime/autogen/libc.py:3197
                          R_AARCH64_LD64_GOTPAGE_LO15 = 313                                                                                                                                              # runtime/autogen/libc.py:3198
                          R_AARCH64_TLSGD_ADR_PREL21 = 512                                                                                                                                               # runtime/autogen/libc.py:3199
                          R_AARCH64_TLSGD_ADR_PAGE21 = 513                                                                                                                                               # runtime/autogen/libc.py:3200
                          R_AARCH64_TLSGD_ADD_LO12_NC = 514                                                                                                                                              # runtime/autogen/libc.py:3201
                          R_AARCH64_TLSGD_MOVW_G1 = 515                                                                                                                                                  # runtime/autogen/libc.py:3202
                          R_AARCH64_TLSGD_MOVW_G0_NC = 516                                                                                                                                               # runtime/autogen/libc.py:3203
                          R_AARCH64_TLSLD_ADR_PREL21 = 517                                                                                                                                               # runtime/autogen/libc.py:3204
                          R_AARCH64_TLSLD_ADR_PAGE21 = 518                                                                                                                                               # runtime/autogen/libc.py:3205
                          R_AARCH64_TLSLD_ADD_LO12_NC = 519                                                                                                                                              # runtime/autogen/libc.py:3206
                          R_AARCH64_TLSLD_MOVW_G1 = 520                                                                                                                                                  # runtime/autogen/libc.py:3207
                          R_AARCH64_TLSLD_MOVW_G0_NC = 521                                                                                                                                               # runtime/autogen/libc.py:3208
                          R_AARCH64_TLSLD_LD_PREL19 = 522                                                                                                                                                # runtime/autogen/libc.py:3209
                          R_AARCH64_TLSLD_MOVW_DTPREL_G2 = 523                                                                                                                                           # runtime/autogen/libc.py:3210
                          R_AARCH64_TLSLD_MOVW_DTPREL_G1 = 524                                                                                                                                           # runtime/autogen/libc.py:3211
                          R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC = 525                                                                                                                                        # runtime/autogen/libc.py:3212
                          R_AARCH64_TLSLD_MOVW_DTPREL_G0 = 526                                                                                                                                           # runtime/autogen/libc.py:3213
                          R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC = 527                                                                                                                                        # runtime/autogen/libc.py:3214
                          R_AARCH64_TLSLD_ADD_DTPREL_HI12 = 528                                                                                                                                          # runtime/autogen/libc.py:3215
                          R_AARCH64_TLSLD_ADD_DTPREL_LO12 = 529                                                                                                                                          # runtime/autogen/libc.py:3216
                          R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC = 530                                                                                                                                       # runtime/autogen/libc.py:3217
                          R_AARCH64_TLSLD_LDST8_DTPREL_LO12 = 531                                                                                                                                        # runtime/autogen/libc.py:3218
                          R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC = 532                                                                                                                                     # runtime/autogen/libc.py:3219
                          R_AARCH64_TLSLD_LDST16_DTPREL_LO12 = 533                                                                                                                                       # runtime/autogen/libc.py:3220
                          R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC = 534                                                                                                                                    # runtime/autogen/libc.py:3221
                          R_AARCH64_TLSLD_LDST32_DTPREL_LO12 = 535                                                                                                                                       # runtime/autogen/libc.py:3222
                          R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC = 536                                                                                                                                    # runtime/autogen/libc.py:3223
                          R_AARCH64_TLSLD_LDST64_DTPREL_LO12 = 537                                                                                                                                       # runtime/autogen/libc.py:3224
                          R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC = 538                                                                                                                                    # runtime/autogen/libc.py:3225
                          R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = 539                                                                                                                                         # runtime/autogen/libc.py:3226
                          R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = 540                                                                                                                                      # runtime/autogen/libc.py:3227
                          R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = 541                                                                                                                                      # runtime/autogen/libc.py:3228
                          R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = 542                                                                                                                                    # runtime/autogen/libc.py:3229
                          R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = 543                                                                                                                                       # runtime/autogen/libc.py:3230
                          R_AARCH64_TLSLE_MOVW_TPREL_G2 = 544                                                                                                                                            # runtime/autogen/libc.py:3231
                          R_AARCH64_TLSLE_MOVW_TPREL_G1 = 545                                                                                                                                            # runtime/autogen/libc.py:3232
                          R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = 546                                                                                                                                         # runtime/autogen/libc.py:3233
                          R_AARCH64_TLSLE_MOVW_TPREL_G0 = 547                                                                                                                                            # runtime/autogen/libc.py:3234
                          R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = 548                                                                                                                                         # runtime/autogen/libc.py:3235
                          R_AARCH64_TLSLE_ADD_TPREL_HI12 = 549                                                                                                                                           # runtime/autogen/libc.py:3236
                          R_AARCH64_TLSLE_ADD_TPREL_LO12 = 550                                                                                                                                           # runtime/autogen/libc.py:3237
                          R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = 551                                                                                                                                        # runtime/autogen/libc.py:3238
                          R_AARCH64_TLSLE_LDST8_TPREL_LO12 = 552                                                                                                                                         # runtime/autogen/libc.py:3239
                          R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC = 553                                                                                                                                      # runtime/autogen/libc.py:3240
                          R_AARCH64_TLSLE_LDST16_TPREL_LO12 = 554                                                                                                                                        # runtime/autogen/libc.py:3241
                          R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC = 555                                                                                                                                     # runtime/autogen/libc.py:3242
                          R_AARCH64_TLSLE_LDST32_TPREL_LO12 = 556                                                                                                                                        # runtime/autogen/libc.py:3243
                          R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC = 557                                                                                                                                     # runtime/autogen/libc.py:3244
                          R_AARCH64_TLSLE_LDST64_TPREL_LO12 = 558                                                                                                                                        # runtime/autogen/libc.py:3245
                          R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC = 559                                                                                                                                     # runtime/autogen/libc.py:3246
                          R_AARCH64_TLSDESC_LD_PREL19 = 560                                                                                                                                              # runtime/autogen/libc.py:3247
                          R_AARCH64_TLSDESC_ADR_PREL21 = 561                                                                                                                                             # runtime/autogen/libc.py:3248
                          R_AARCH64_TLSDESC_ADR_PAGE21 = 562                                                                                                                                             # runtime/autogen/libc.py:3249
                          R_AARCH64_TLSDESC_LD64_LO12 = 563                                                                                                                                              # runtime/autogen/libc.py:3250
                          R_AARCH64_TLSDESC_ADD_LO12 = 564                                                                                                                                               # runtime/autogen/libc.py:3251
                          R_AARCH64_TLSDESC_OFF_G1 = 565                                                                                                                                                 # runtime/autogen/libc.py:3252
                          R_AARCH64_TLSDESC_OFF_G0_NC = 566                                                                                                                                              # runtime/autogen/libc.py:3253
                          R_AARCH64_TLSDESC_LDR = 567                                                                                                                                                    # runtime/autogen/libc.py:3254
                          R_AARCH64_TLSDESC_ADD = 568                                                                                                                                                    # runtime/autogen/libc.py:3255
                          R_AARCH64_TLSDESC_CALL = 569                                                                                                                                                   # runtime/autogen/libc.py:3256
                          R_AARCH64_TLSLE_LDST128_TPREL_LO12 = 570                                                                                                                                       # runtime/autogen/libc.py:3257
                          R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC = 571                                                                                                                                    # runtime/autogen/libc.py:3258
                          R_AARCH64_TLSLD_LDST128_DTPREL_LO12 = 572                                                                                                                                      # runtime/autogen/libc.py:3259
                          R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC = 573                                                                                                                                   # runtime/autogen/libc.py:3260
                          R_AARCH64_COPY = 1024                                                                                                                                                          # runtime/autogen/libc.py:3261
                          R_AARCH64_GLOB_DAT = 1025                                                                                                                                                      # runtime/autogen/libc.py:3262
                          R_AARCH64_JUMP_SLOT = 1026                                                                                                                                                     # runtime/autogen/libc.py:3263
                          R_AARCH64_RELATIVE = 1027                                                                                                                                                      # runtime/autogen/libc.py:3264
                          R_AARCH64_TLS_DTPMOD = 1028                                                                                                                                                    # runtime/autogen/libc.py:3265
                          R_AARCH64_TLS_DTPREL = 1029                                                                                                                                                    # runtime/autogen/libc.py:3266
                          R_AARCH64_TLS_TPREL = 1030                                                                                                                                                     # runtime/autogen/libc.py:3267
                          R_AARCH64_TLSDESC = 1031                                                                                                                                                       # runtime/autogen/libc.py:3268
                          R_AARCH64_IRELATIVE = 1032                                                                                                                                                     # runtime/autogen/libc.py:3269
                          DT_AARCH64_BTI_PLT = (DT_LOPROC + 1)                                                                                                                                           # runtime/autogen/libc.py:3270
                          DT_AARCH64_PAC_PLT = (DT_LOPROC + 3)                                                                                                                                           # runtime/autogen/libc.py:3271
                          DT_AARCH64_VARIANT_PCS = (DT_LOPROC + 5)                                                                                                                                       # runtime/autogen/libc.py:3272
                          DT_AARCH64_NUM = 6                                                                                                                                                             # runtime/autogen/libc.py:3273
                          STO_AARCH64_VARIANT_PCS = 0x80                                                                                                                                                 # runtime/autogen/libc.py:3274
                          R_ARM_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:3275
                          R_ARM_ABS32 = 2                                                                                                                                                                # runtime/autogen/libc.py:3276
                          R_ARM_REL32 = 3                                                                                                                                                                # runtime/autogen/libc.py:3277
                          R_ARM_PC13 = 4                                                                                                                                                                 # runtime/autogen/libc.py:3278
                          R_ARM_ABS16 = 5                                                                                                                                                                # runtime/autogen/libc.py:3279
                          R_ARM_ABS12 = 6                                                                                                                                                                # runtime/autogen/libc.py:3280
                          R_ARM_THM_ABS5 = 7                                                                                                                                                             # runtime/autogen/libc.py:3281
                          R_ARM_ABS8 = 8                                                                                                                                                                 # runtime/autogen/libc.py:3282
                          R_ARM_SBREL32 = 9                                                                                                                                                              # runtime/autogen/libc.py:3283
                          R_ARM_THM_PC22 = 10                                                                                                                                                            # runtime/autogen/libc.py:3284
                          R_ARM_AMP_VCALL9 = 12                                                                                                                                                          # runtime/autogen/libc.py:3285
                          R_ARM_SWI24 = 13                                                                                                                                                               # runtime/autogen/libc.py:3286
                          R_ARM_TLS_DESC = 13                                                                                                                                                            # runtime/autogen/libc.py:3287
                          R_ARM_THM_SWI8 = 14                                                                                                                                                            # runtime/autogen/libc.py:3288
                          R_ARM_XPC25 = 15                                                                                                                                                               # runtime/autogen/libc.py:3289
                          R_ARM_THM_XPC22 = 16                                                                                                                                                           # runtime/autogen/libc.py:3290
                          R_ARM_TLS_DTPMOD32 = 17                                                                                                                                                        # runtime/autogen/libc.py:3291
                          R_ARM_TLS_DTPOFF32 = 18                                                                                                                                                        # runtime/autogen/libc.py:3292
                          R_ARM_TLS_TPOFF32 = 19                                                                                                                                                         # runtime/autogen/libc.py:3293
                          R_ARM_COPY = 20                                                                                                                                                                # runtime/autogen/libc.py:3294
                          R_ARM_GLOB_DAT = 21                                                                                                                                                            # runtime/autogen/libc.py:3295
                          R_ARM_JUMP_SLOT = 22                                                                                                                                                           # runtime/autogen/libc.py:3296
                          R_ARM_RELATIVE = 23                                                                                                                                                            # runtime/autogen/libc.py:3297
                          R_ARM_GOTOFF = 24                                                                                                                                                              # runtime/autogen/libc.py:3298
                          R_ARM_GOTPC = 25                                                                                                                                                               # runtime/autogen/libc.py:3299
                          R_ARM_GOT32 = 26                                                                                                                                                               # runtime/autogen/libc.py:3300
                          R_ARM_PLT32 = 27                                                                                                                                                               # runtime/autogen/libc.py:3301
                          R_ARM_CALL = 28                                                                                                                                                                # runtime/autogen/libc.py:3302
                          R_ARM_THM_JUMP24 = 30                                                                                                                                                          # runtime/autogen/libc.py:3303
                          R_ARM_BASE_ABS = 31                                                                                                                                                            # runtime/autogen/libc.py:3304
                          R_ARM_ALU_PCREL_7_0 = 32                                                                                                                                                       # runtime/autogen/libc.py:3305
                          R_ARM_ALU_PCREL_15_8 = 33                                                                                                                                                      # runtime/autogen/libc.py:3306
                          R_ARM_ALU_PCREL_23_15 = 34                                                                                                                                                     # runtime/autogen/libc.py:3307
                          R_ARM_LDR_SBREL_11_0 = 35                                                                                                                                                      # runtime/autogen/libc.py:3308
                          R_ARM_ALU_SBREL_19_12 = 36                                                                                                                                                     # runtime/autogen/libc.py:3309
                          R_ARM_ALU_SBREL_27_20 = 37                                                                                                                                                     # runtime/autogen/libc.py:3310
                          R_ARM_TARGET1 = 38                                                                                                                                                             # runtime/autogen/libc.py:3311
                          R_ARM_SBREL31 = 39                                                                                                                                                             # runtime/autogen/libc.py:3312
                          R_ARM_V4BX = 40                                                                                                                                                                # runtime/autogen/libc.py:3313
                          R_ARM_TARGET2 = 41                                                                                                                                                             # runtime/autogen/libc.py:3314
                          R_ARM_PREL31 = 42                                                                                                                                                              # runtime/autogen/libc.py:3315
                          R_ARM_MOVW_ABS_NC = 43                                                                                                                                                         # runtime/autogen/libc.py:3316
                          R_ARM_MOVT_ABS = 44                                                                                                                                                            # runtime/autogen/libc.py:3317
                          R_ARM_MOVW_PREL_NC = 45                                                                                                                                                        # runtime/autogen/libc.py:3318
                          R_ARM_MOVT_PREL = 46                                                                                                                                                           # runtime/autogen/libc.py:3319
                          R_ARM_THM_MOVW_ABS_NC = 47                                                                                                                                                     # runtime/autogen/libc.py:3320
                          R_ARM_ABS32_NOI = 55                                                                                                                                                           # runtime/autogen/libc.py:3321
                          R_ARM_REL32_NOI = 56                                                                                                                                                           # runtime/autogen/libc.py:3322
                          R_ARM_ALU_PC_G0_NC = 57                                                                                                                                                        # runtime/autogen/libc.py:3323
                          R_ARM_ALU_PC_G0 = 58                                                                                                                                                           # runtime/autogen/libc.py:3324
                          R_ARM_ALU_PC_G1_NC = 59                                                                                                                                                        # runtime/autogen/libc.py:3325
                          R_ARM_ALU_PC_G1 = 60                                                                                                                                                           # runtime/autogen/libc.py:3326
                          R_ARM_ALU_PC_G2 = 61                                                                                                                                                           # runtime/autogen/libc.py:3327
                          R_ARM_LDR_PC_G1 = 62                                                                                                                                                           # runtime/autogen/libc.py:3328
                          R_ARM_LDR_PC_G2 = 63                                                                                                                                                           # runtime/autogen/libc.py:3329
                          R_ARM_LDC_PC_G0 = 67                                                                                                                                                           # runtime/autogen/libc.py:3330
                          R_ARM_LDC_PC_G1 = 68                                                                                                                                                           # runtime/autogen/libc.py:3331
                          R_ARM_LDC_PC_G2 = 69                                                                                                                                                           # runtime/autogen/libc.py:3332
                          R_ARM_ALU_SB_G0_NC = 70                                                                                                                                                        # runtime/autogen/libc.py:3333
                          R_ARM_ALU_SB_G0 = 71                                                                                                                                                           # runtime/autogen/libc.py:3334
                          R_ARM_ALU_SB_G1_NC = 72                                                                                                                                                        # runtime/autogen/libc.py:3335
                          R_ARM_ALU_SB_G1 = 73                                                                                                                                                           # runtime/autogen/libc.py:3336
                          R_ARM_ALU_SB_G2 = 74                                                                                                                                                           # runtime/autogen/libc.py:3337
                          R_ARM_LDC_SB_G0 = 81                                                                                                                                                           # runtime/autogen/libc.py:3338
                          R_ARM_LDC_SB_G1 = 82                                                                                                                                                           # runtime/autogen/libc.py:3339
                          R_ARM_LDC_SB_G2 = 83                                                                                                                                                           # runtime/autogen/libc.py:3340
                          R_ARM_TLS_GOTDESC = 90                                                                                                                                                         # runtime/autogen/libc.py:3341
                          R_ARM_TLS_CALL = 91                                                                                                                                                            # runtime/autogen/libc.py:3342
                          R_ARM_TLS_DESCSEQ = 92                                                                                                                                                         # runtime/autogen/libc.py:3343
                          R_ARM_THM_TLS_CALL = 93                                                                                                                                                        # runtime/autogen/libc.py:3344
                          R_ARM_PLT32_ABS = 94                                                                                                                                                           # runtime/autogen/libc.py:3345
                          R_ARM_GOT_ABS = 95                                                                                                                                                             # runtime/autogen/libc.py:3346
                          R_ARM_GOT_PREL = 96                                                                                                                                                            # runtime/autogen/libc.py:3347
                          R_ARM_GOTRELAX = 99                                                                                                                                                            # runtime/autogen/libc.py:3348
                          R_ARM_GNU_VTENTRY = 100                                                                                                                                                        # runtime/autogen/libc.py:3349
                          R_ARM_GNU_VTINHERIT = 101                                                                                                                                                      # runtime/autogen/libc.py:3350
                          R_ARM_THM_PC11 = 102                                                                                                                                                           # runtime/autogen/libc.py:3351
                          R_ARM_ME_TOO = 128                                                                                                                                                             # runtime/autogen/libc.py:3352
                          R_ARM_THM_TLS_DESCSEQ = 129                                                                                                                                                    # runtime/autogen/libc.py:3353
                          R_ARM_THM_TLS_DESCSEQ16 = 129                                                                                                                                                  # runtime/autogen/libc.py:3354
                          R_ARM_THM_TLS_DESCSEQ32 = 130                                                                                                                                                  # runtime/autogen/libc.py:3355
                          R_ARM_IRELATIVE = 160                                                                                                                                                          # runtime/autogen/libc.py:3356
                          R_ARM_RXPC25 = 249                                                                                                                                                             # runtime/autogen/libc.py:3357
                          R_ARM_RSBREL32 = 250                                                                                                                                                           # runtime/autogen/libc.py:3358
                          R_ARM_THM_RPC22 = 251                                                                                                                                                          # runtime/autogen/libc.py:3359
                          R_ARM_RREL32 = 252                                                                                                                                                             # runtime/autogen/libc.py:3360
                          R_ARM_RABS22 = 253                                                                                                                                                             # runtime/autogen/libc.py:3361
                          R_ARM_RPC24 = 254                                                                                                                                                              # runtime/autogen/libc.py:3362
                          R_ARM_RBASE = 255                                                                                                                                                              # runtime/autogen/libc.py:3363
                          R_ARM_NUM = 256                                                                                                                                                                # runtime/autogen/libc.py:3364
                          R_CKCORE_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:3365
                          R_CKCORE_ADDR32 = 1                                                                                                                                                            # runtime/autogen/libc.py:3366
                          R_CKCORE_PCRELIMM8BY4 = 2                                                                                                                                                      # runtime/autogen/libc.py:3367
                          R_CKCORE_PCRELIMM11BY2 = 3                                                                                                                                                     # runtime/autogen/libc.py:3368
                          R_CKCORE_PCREL32 = 5                                                                                                                                                           # runtime/autogen/libc.py:3369
                          R_CKCORE_PCRELJSR_IMM11BY2 = 6                                                                                                                                                 # runtime/autogen/libc.py:3370
                          R_CKCORE_RELATIVE = 9                                                                                                                                                          # runtime/autogen/libc.py:3371
                          R_CKCORE_COPY = 10                                                                                                                                                             # runtime/autogen/libc.py:3372
                          R_CKCORE_GLOB_DAT = 11                                                                                                                                                         # runtime/autogen/libc.py:3373
                          R_CKCORE_JUMP_SLOT = 12                                                                                                                                                        # runtime/autogen/libc.py:3374
                          R_CKCORE_GOTOFF = 13                                                                                                                                                           # runtime/autogen/libc.py:3375
                          R_CKCORE_GOTPC = 14                                                                                                                                                            # runtime/autogen/libc.py:3376
                          R_CKCORE_GOT32 = 15                                                                                                                                                            # runtime/autogen/libc.py:3377
                          R_CKCORE_PLT32 = 16                                                                                                                                                            # runtime/autogen/libc.py:3378
                          R_CKCORE_ADDRGOT = 17                                                                                                                                                          # runtime/autogen/libc.py:3379
                          R_CKCORE_ADDRPLT = 18                                                                                                                                                          # runtime/autogen/libc.py:3380
                          R_CKCORE_PCREL_IMM26BY2 = 19                                                                                                                                                   # runtime/autogen/libc.py:3381
                          R_CKCORE_PCREL_IMM16BY2 = 20                                                                                                                                                   # runtime/autogen/libc.py:3382
                          R_CKCORE_PCREL_IMM16BY4 = 21                                                                                                                                                   # runtime/autogen/libc.py:3383
                          R_CKCORE_PCREL_IMM10BY2 = 22                                                                                                                                                   # runtime/autogen/libc.py:3384
                          R_CKCORE_PCREL_IMM10BY4 = 23                                                                                                                                                   # runtime/autogen/libc.py:3385
                          R_CKCORE_ADDR_HI16 = 24                                                                                                                                                        # runtime/autogen/libc.py:3386
                          R_CKCORE_ADDR_LO16 = 25                                                                                                                                                        # runtime/autogen/libc.py:3387
                          R_CKCORE_GOTPC_HI16 = 26                                                                                                                                                       # runtime/autogen/libc.py:3388
                          R_CKCORE_GOTPC_LO16 = 27                                                                                                                                                       # runtime/autogen/libc.py:3389
                          R_CKCORE_GOTOFF_HI16 = 28                                                                                                                                                      # runtime/autogen/libc.py:3390
                          R_CKCORE_GOTOFF_LO16 = 29                                                                                                                                                      # runtime/autogen/libc.py:3391
                          R_CKCORE_GOT12 = 30                                                                                                                                                            # runtime/autogen/libc.py:3392
                          R_CKCORE_GOT_HI16 = 31                                                                                                                                                         # runtime/autogen/libc.py:3393
                          R_CKCORE_GOT_LO16 = 32                                                                                                                                                         # runtime/autogen/libc.py:3394
                          R_CKCORE_PLT12 = 33                                                                                                                                                            # runtime/autogen/libc.py:3395
                          R_CKCORE_PLT_HI16 = 34                                                                                                                                                         # runtime/autogen/libc.py:3396
                          R_CKCORE_PLT_LO16 = 35                                                                                                                                                         # runtime/autogen/libc.py:3397
                          R_CKCORE_ADDRGOT_HI16 = 36                                                                                                                                                     # runtime/autogen/libc.py:3398
                          R_CKCORE_ADDRGOT_LO16 = 37                                                                                                                                                     # runtime/autogen/libc.py:3399
                          R_CKCORE_ADDRPLT_HI16 = 38                                                                                                                                                     # runtime/autogen/libc.py:3400
                          R_CKCORE_ADDRPLT_LO16 = 39                                                                                                                                                     # runtime/autogen/libc.py:3401
                          R_CKCORE_PCREL_JSR_IMM26BY2 = 40                                                                                                                                               # runtime/autogen/libc.py:3402
                          R_CKCORE_TOFFSET_LO16 = 41                                                                                                                                                     # runtime/autogen/libc.py:3403
                          R_CKCORE_DOFFSET_LO16 = 42                                                                                                                                                     # runtime/autogen/libc.py:3404
                          R_CKCORE_PCREL_IMM18BY2 = 43                                                                                                                                                   # runtime/autogen/libc.py:3405
                          R_CKCORE_DOFFSET_IMM18 = 44                                                                                                                                                    # runtime/autogen/libc.py:3406
                          R_CKCORE_DOFFSET_IMM18BY2 = 45                                                                                                                                                 # runtime/autogen/libc.py:3407
                          R_CKCORE_DOFFSET_IMM18BY4 = 46                                                                                                                                                 # runtime/autogen/libc.py:3408
                          R_CKCORE_GOT_IMM18BY4 = 48                                                                                                                                                     # runtime/autogen/libc.py:3409
                          R_CKCORE_PLT_IMM18BY4 = 49                                                                                                                                                     # runtime/autogen/libc.py:3410
                          R_CKCORE_PCREL_IMM7BY4 = 50                                                                                                                                                    # runtime/autogen/libc.py:3411
                          R_CKCORE_TLS_LE32 = 51                                                                                                                                                         # runtime/autogen/libc.py:3412
                          R_CKCORE_TLS_IE32 = 52                                                                                                                                                         # runtime/autogen/libc.py:3413
                          R_CKCORE_TLS_GD32 = 53                                                                                                                                                         # runtime/autogen/libc.py:3414
                          R_CKCORE_TLS_LDM32 = 54                                                                                                                                                        # runtime/autogen/libc.py:3415
                          R_CKCORE_TLS_LDO32 = 55                                                                                                                                                        # runtime/autogen/libc.py:3416
                          R_CKCORE_TLS_DTPMOD32 = 56                                                                                                                                                     # runtime/autogen/libc.py:3417
                          R_CKCORE_TLS_DTPOFF32 = 57                                                                                                                                                     # runtime/autogen/libc.py:3418
                          R_CKCORE_TLS_TPOFF32 = 58                                                                                                                                                      # runtime/autogen/libc.py:3419
                          EF_CSKY_ABIMASK = 0XF0000000                                                                                                                                                   # runtime/autogen/libc.py:3420
                          EF_CSKY_OTHER = 0X0FFF0000                                                                                                                                                     # runtime/autogen/libc.py:3421
                          EF_CSKY_PROCESSOR = 0X0000FFFF                                                                                                                                                 # runtime/autogen/libc.py:3422
                          EF_CSKY_ABIV1 = 0X10000000                                                                                                                                                     # runtime/autogen/libc.py:3423
                          EF_CSKY_ABIV2 = 0X20000000                                                                                                                                                     # runtime/autogen/libc.py:3424
                          SHT_CSKY_ATTRIBUTES = (SHT_LOPROC + 1)                                                                                                                                         # runtime/autogen/libc.py:3425
                          EF_IA_64_MASKOS = 0x0000000f                                                                                                                                                   # runtime/autogen/libc.py:3426
                          EF_IA_64_ABI64 = 0x00000010                                                                                                                                                    # runtime/autogen/libc.py:3427
                          EF_IA_64_ARCH = 0xff000000                                                                                                                                                     # runtime/autogen/libc.py:3428
                          PT_IA_64_ARCHEXT = (PT_LOPROC + 0)                                                                                                                                             # runtime/autogen/libc.py:3429
                          PT_IA_64_UNWIND = (PT_LOPROC + 1)                                                                                                                                              # runtime/autogen/libc.py:3430
                          PT_IA_64_HP_OPT_ANOT = (PT_LOOS + 0x12)                                                                                                                                        # runtime/autogen/libc.py:3431
                          PT_IA_64_HP_HSL_ANOT = (PT_LOOS + 0x13)                                                                                                                                        # runtime/autogen/libc.py:3432
                          PT_IA_64_HP_STACK = (PT_LOOS + 0x14)                                                                                                                                           # runtime/autogen/libc.py:3433
                          PF_IA_64_NORECOV = 0x80000000                                                                                                                                                  # runtime/autogen/libc.py:3434
                          SHT_IA_64_EXT = (SHT_LOPROC + 0)                                                                                                                                               # runtime/autogen/libc.py:3435
                          SHT_IA_64_UNWIND = (SHT_LOPROC + 1)                                                                                                                                            # runtime/autogen/libc.py:3436
                          SHF_IA_64_SHORT = 0x10000000                                                                                                                                                   # runtime/autogen/libc.py:3437
                          SHF_IA_64_NORECOV = 0x20000000                                                                                                                                                 # runtime/autogen/libc.py:3438
                          DT_IA_64_PLT_RESERVE = (DT_LOPROC + 0)                                                                                                                                         # runtime/autogen/libc.py:3439
                          DT_IA_64_NUM = 1                                                                                                                                                               # runtime/autogen/libc.py:3440
                          R_IA64_NONE = 0x00                                                                                                                                                             # runtime/autogen/libc.py:3441
                          R_IA64_IMM14 = 0x21                                                                                                                                                            # runtime/autogen/libc.py:3442
                          R_IA64_IMM22 = 0x22                                                                                                                                                            # runtime/autogen/libc.py:3443
                          R_IA64_IMM64 = 0x23                                                                                                                                                            # runtime/autogen/libc.py:3444
                          R_IA64_DIR32MSB = 0x24                                                                                                                                                         # runtime/autogen/libc.py:3445
                          R_IA64_DIR32LSB = 0x25                                                                                                                                                         # runtime/autogen/libc.py:3446
                          R_IA64_DIR64MSB = 0x26                                                                                                                                                         # runtime/autogen/libc.py:3447
                          R_IA64_DIR64LSB = 0x27                                                                                                                                                         # runtime/autogen/libc.py:3448
                          R_IA64_GPREL22 = 0x2a                                                                                                                                                          # runtime/autogen/libc.py:3449
                          R_IA64_GPREL64I = 0x2b                                                                                                                                                         # runtime/autogen/libc.py:3450
                          R_IA64_GPREL32MSB = 0x2c                                                                                                                                                       # runtime/autogen/libc.py:3451
                          R_IA64_GPREL32LSB = 0x2d                                                                                                                                                       # runtime/autogen/libc.py:3452
                          R_IA64_GPREL64MSB = 0x2e                                                                                                                                                       # runtime/autogen/libc.py:3453
                          R_IA64_GPREL64LSB = 0x2f                                                                                                                                                       # runtime/autogen/libc.py:3454
                          R_IA64_LTOFF22 = 0x32                                                                                                                                                          # runtime/autogen/libc.py:3455
                          R_IA64_LTOFF64I = 0x33                                                                                                                                                         # runtime/autogen/libc.py:3456
                          R_IA64_PLTOFF22 = 0x3a                                                                                                                                                         # runtime/autogen/libc.py:3457
                          R_IA64_PLTOFF64I = 0x3b                                                                                                                                                        # runtime/autogen/libc.py:3458
                          R_IA64_PLTOFF64MSB = 0x3e                                                                                                                                                      # runtime/autogen/libc.py:3459
                          R_IA64_PLTOFF64LSB = 0x3f                                                                                                                                                      # runtime/autogen/libc.py:3460
                          R_IA64_FPTR64I = 0x43                                                                                                                                                          # runtime/autogen/libc.py:3461
                          R_IA64_FPTR32MSB = 0x44                                                                                                                                                        # runtime/autogen/libc.py:3462
                          R_IA64_FPTR32LSB = 0x45                                                                                                                                                        # runtime/autogen/libc.py:3463
                          R_IA64_FPTR64MSB = 0x46                                                                                                                                                        # runtime/autogen/libc.py:3464
                          R_IA64_FPTR64LSB = 0x47                                                                                                                                                        # runtime/autogen/libc.py:3465
                          R_IA64_PCREL60B = 0x48                                                                                                                                                         # runtime/autogen/libc.py:3466
                          R_IA64_PCREL21B = 0x49                                                                                                                                                         # runtime/autogen/libc.py:3467
                          R_IA64_PCREL21M = 0x4a                                                                                                                                                         # runtime/autogen/libc.py:3468
                          R_IA64_PCREL21F = 0x4b                                                                                                                                                         # runtime/autogen/libc.py:3469
                          R_IA64_PCREL32MSB = 0x4c                                                                                                                                                       # runtime/autogen/libc.py:3470
                          R_IA64_PCREL32LSB = 0x4d                                                                                                                                                       # runtime/autogen/libc.py:3471
                          R_IA64_PCREL64MSB = 0x4e                                                                                                                                                       # runtime/autogen/libc.py:3472
                          R_IA64_PCREL64LSB = 0x4f                                                                                                                                                       # runtime/autogen/libc.py:3473
                          R_IA64_LTOFF_FPTR22 = 0x52                                                                                                                                                     # runtime/autogen/libc.py:3474
                          R_IA64_LTOFF_FPTR64I = 0x53                                                                                                                                                    # runtime/autogen/libc.py:3475
                          R_IA64_LTOFF_FPTR32MSB = 0x54                                                                                                                                                  # runtime/autogen/libc.py:3476
                          R_IA64_LTOFF_FPTR32LSB = 0x55                                                                                                                                                  # runtime/autogen/libc.py:3477
                          R_IA64_LTOFF_FPTR64MSB = 0x56                                                                                                                                                  # runtime/autogen/libc.py:3478
                          R_IA64_LTOFF_FPTR64LSB = 0x57                                                                                                                                                  # runtime/autogen/libc.py:3479
                          R_IA64_SEGREL32MSB = 0x5c                                                                                                                                                      # runtime/autogen/libc.py:3480
                          R_IA64_SEGREL32LSB = 0x5d                                                                                                                                                      # runtime/autogen/libc.py:3481
                          R_IA64_SEGREL64MSB = 0x5e                                                                                                                                                      # runtime/autogen/libc.py:3482
                          R_IA64_SEGREL64LSB = 0x5f                                                                                                                                                      # runtime/autogen/libc.py:3483
                          R_IA64_SECREL32MSB = 0x64                                                                                                                                                      # runtime/autogen/libc.py:3484
                          R_IA64_SECREL32LSB = 0x65                                                                                                                                                      # runtime/autogen/libc.py:3485
                          R_IA64_SECREL64MSB = 0x66                                                                                                                                                      # runtime/autogen/libc.py:3486
                          R_IA64_SECREL64LSB = 0x67                                                                                                                                                      # runtime/autogen/libc.py:3487
                          R_IA64_REL32MSB = 0x6c                                                                                                                                                         # runtime/autogen/libc.py:3488
                          R_IA64_REL32LSB = 0x6d                                                                                                                                                         # runtime/autogen/libc.py:3489
                          R_IA64_REL64MSB = 0x6e                                                                                                                                                         # runtime/autogen/libc.py:3490
                          R_IA64_REL64LSB = 0x6f                                                                                                                                                         # runtime/autogen/libc.py:3491
                          R_IA64_LTV32MSB = 0x74                                                                                                                                                         # runtime/autogen/libc.py:3492
                          R_IA64_LTV32LSB = 0x75                                                                                                                                                         # runtime/autogen/libc.py:3493
                          R_IA64_LTV64MSB = 0x76                                                                                                                                                         # runtime/autogen/libc.py:3494
                          R_IA64_LTV64LSB = 0x77                                                                                                                                                         # runtime/autogen/libc.py:3495
                          R_IA64_PCREL21BI = 0x79                                                                                                                                                        # runtime/autogen/libc.py:3496
                          R_IA64_PCREL22 = 0x7a                                                                                                                                                          # runtime/autogen/libc.py:3497
                          R_IA64_PCREL64I = 0x7b                                                                                                                                                         # runtime/autogen/libc.py:3498
                          R_IA64_IPLTMSB = 0x80                                                                                                                                                          # runtime/autogen/libc.py:3499
                          R_IA64_IPLTLSB = 0x81                                                                                                                                                          # runtime/autogen/libc.py:3500
                          R_IA64_COPY = 0x84                                                                                                                                                             # runtime/autogen/libc.py:3501
                          R_IA64_SUB = 0x85                                                                                                                                                              # runtime/autogen/libc.py:3502
                          R_IA64_LTOFF22X = 0x86                                                                                                                                                         # runtime/autogen/libc.py:3503
                          R_IA64_LDXMOV = 0x87                                                                                                                                                           # runtime/autogen/libc.py:3504
                          R_IA64_TPREL14 = 0x91                                                                                                                                                          # runtime/autogen/libc.py:3505
                          R_IA64_TPREL22 = 0x92                                                                                                                                                          # runtime/autogen/libc.py:3506
                          R_IA64_TPREL64I = 0x93                                                                                                                                                         # runtime/autogen/libc.py:3507
                          R_IA64_TPREL64MSB = 0x96                                                                                                                                                       # runtime/autogen/libc.py:3508
                          R_IA64_TPREL64LSB = 0x97                                                                                                                                                       # runtime/autogen/libc.py:3509
                          R_IA64_LTOFF_TPREL22 = 0x9a                                                                                                                                                    # runtime/autogen/libc.py:3510
                          R_IA64_DTPMOD64MSB = 0xa6                                                                                                                                                      # runtime/autogen/libc.py:3511
                          R_IA64_DTPMOD64LSB = 0xa7                                                                                                                                                      # runtime/autogen/libc.py:3512
                          R_IA64_LTOFF_DTPMOD22 = 0xaa                                                                                                                                                   # runtime/autogen/libc.py:3513
                          R_IA64_DTPREL14 = 0xb1                                                                                                                                                         # runtime/autogen/libc.py:3514
                          R_IA64_DTPREL22 = 0xb2                                                                                                                                                         # runtime/autogen/libc.py:3515
                          R_IA64_DTPREL64I = 0xb3                                                                                                                                                        # runtime/autogen/libc.py:3516
                          R_IA64_DTPREL32MSB = 0xb4                                                                                                                                                      # runtime/autogen/libc.py:3517
                          R_IA64_DTPREL32LSB = 0xb5                                                                                                                                                      # runtime/autogen/libc.py:3518
                          R_IA64_DTPREL64MSB = 0xb6                                                                                                                                                      # runtime/autogen/libc.py:3519
                          R_IA64_DTPREL64LSB = 0xb7                                                                                                                                                      # runtime/autogen/libc.py:3520
                          R_IA64_LTOFF_DTPREL22 = 0xba                                                                                                                                                   # runtime/autogen/libc.py:3521
                          EF_SH_MACH_MASK = 0x1f                                                                                                                                                         # runtime/autogen/libc.py:3522
                          EF_SH_UNKNOWN = 0x0                                                                                                                                                            # runtime/autogen/libc.py:3523
                          EF_SH1 = 0x1                                                                                                                                                                   # runtime/autogen/libc.py:3524
                          EF_SH2 = 0x2                                                                                                                                                                   # runtime/autogen/libc.py:3525
                          EF_SH3 = 0x3                                                                                                                                                                   # runtime/autogen/libc.py:3526
                          EF_SH_DSP = 0x4                                                                                                                                                                # runtime/autogen/libc.py:3527
                          EF_SH3_DSP = 0x5                                                                                                                                                               # runtime/autogen/libc.py:3528
                          EF_SH4AL_DSP = 0x6                                                                                                                                                             # runtime/autogen/libc.py:3529
                          EF_SH3E = 0x8                                                                                                                                                                  # runtime/autogen/libc.py:3530
                          EF_SH4 = 0x9                                                                                                                                                                   # runtime/autogen/libc.py:3531
                          EF_SH2E = 0xb                                                                                                                                                                  # runtime/autogen/libc.py:3532
                          EF_SH4A = 0xc                                                                                                                                                                  # runtime/autogen/libc.py:3533
                          EF_SH2A = 0xd                                                                                                                                                                  # runtime/autogen/libc.py:3534
                          EF_SH4_NOFPU = 0x10                                                                                                                                                            # runtime/autogen/libc.py:3535
                          EF_SH4A_NOFPU = 0x11                                                                                                                                                           # runtime/autogen/libc.py:3536
                          EF_SH4_NOMMU_NOFPU = 0x12                                                                                                                                                      # runtime/autogen/libc.py:3537
                          EF_SH2A_NOFPU = 0x13                                                                                                                                                           # runtime/autogen/libc.py:3538
                          EF_SH3_NOMMU = 0x14                                                                                                                                                            # runtime/autogen/libc.py:3539
                          EF_SH2A_SH4_NOFPU = 0x15                                                                                                                                                       # runtime/autogen/libc.py:3540
                          EF_SH2A_SH3_NOFPU = 0x16                                                                                                                                                       # runtime/autogen/libc.py:3541
                          EF_SH2A_SH4 = 0x17                                                                                                                                                             # runtime/autogen/libc.py:3542
                          EF_SH2A_SH3E = 0x18                                                                                                                                                            # runtime/autogen/libc.py:3543
                          R_SH_NONE = 0                                                                                                                                                                  # runtime/autogen/libc.py:3544
                          R_SH_DIR32 = 1                                                                                                                                                                 # runtime/autogen/libc.py:3545
                          R_SH_REL32 = 2                                                                                                                                                                 # runtime/autogen/libc.py:3546
                          R_SH_DIR8WPN = 3                                                                                                                                                               # runtime/autogen/libc.py:3547
                          R_SH_IND12W = 4                                                                                                                                                                # runtime/autogen/libc.py:3548
                          R_SH_DIR8WPL = 5                                                                                                                                                               # runtime/autogen/libc.py:3549
                          R_SH_DIR8WPZ = 6                                                                                                                                                               # runtime/autogen/libc.py:3550
                          R_SH_DIR8BP = 7                                                                                                                                                                # runtime/autogen/libc.py:3551
                          R_SH_DIR8W = 8                                                                                                                                                                 # runtime/autogen/libc.py:3552
                          R_SH_DIR8L = 9                                                                                                                                                                 # runtime/autogen/libc.py:3553
                          R_SH_SWITCH16 = 25                                                                                                                                                             # runtime/autogen/libc.py:3554
                          R_SH_SWITCH32 = 26                                                                                                                                                             # runtime/autogen/libc.py:3555
                          R_SH_USES = 27                                                                                                                                                                 # runtime/autogen/libc.py:3556
                          R_SH_COUNT = 28                                                                                                                                                                # runtime/autogen/libc.py:3557
                          R_SH_ALIGN = 29                                                                                                                                                                # runtime/autogen/libc.py:3558
                          R_SH_CODE = 30                                                                                                                                                                 # runtime/autogen/libc.py:3559
                          R_SH_DATA = 31                                                                                                                                                                 # runtime/autogen/libc.py:3560
                          R_SH_LABEL = 32                                                                                                                                                                # runtime/autogen/libc.py:3561
                          R_SH_SWITCH8 = 33                                                                                                                                                              # runtime/autogen/libc.py:3562
                          R_SH_GNU_VTINHERIT = 34                                                                                                                                                        # runtime/autogen/libc.py:3563
                          R_SH_GNU_VTENTRY = 35                                                                                                                                                          # runtime/autogen/libc.py:3564
                          R_SH_TLS_GD_32 = 144                                                                                                                                                           # runtime/autogen/libc.py:3565
                          R_SH_TLS_LD_32 = 145                                                                                                                                                           # runtime/autogen/libc.py:3566
                          R_SH_TLS_LDO_32 = 146                                                                                                                                                          # runtime/autogen/libc.py:3567
                          R_SH_TLS_IE_32 = 147                                                                                                                                                           # runtime/autogen/libc.py:3568
                          R_SH_TLS_LE_32 = 148                                                                                                                                                           # runtime/autogen/libc.py:3569
                          R_SH_TLS_DTPMOD32 = 149                                                                                                                                                        # runtime/autogen/libc.py:3570
                          R_SH_TLS_DTPOFF32 = 150                                                                                                                                                        # runtime/autogen/libc.py:3571
                          R_SH_TLS_TPOFF32 = 151                                                                                                                                                         # runtime/autogen/libc.py:3572
                          R_SH_GOT32 = 160                                                                                                                                                               # runtime/autogen/libc.py:3573
                          R_SH_PLT32 = 161                                                                                                                                                               # runtime/autogen/libc.py:3574
                          R_SH_COPY = 162                                                                                                                                                                # runtime/autogen/libc.py:3575
                          R_SH_GLOB_DAT = 163                                                                                                                                                            # runtime/autogen/libc.py:3576
                          R_SH_JMP_SLOT = 164                                                                                                                                                            # runtime/autogen/libc.py:3577
                          R_SH_RELATIVE = 165                                                                                                                                                            # runtime/autogen/libc.py:3578
                          R_SH_GOTOFF = 166                                                                                                                                                              # runtime/autogen/libc.py:3579
                          R_SH_GOTPC = 167                                                                                                                                                               # runtime/autogen/libc.py:3580
                          R_SH_NUM = 256                                                                                                                                                                 # runtime/autogen/libc.py:3581
                          EF_S390_HIGH_GPRS = 0x00000001                                                                                                                                                 # runtime/autogen/libc.py:3582
                          R_390_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:3583
                          R_390_8 = 1                                                                                                                                                                    # runtime/autogen/libc.py:3584
                          R_390_12 = 2                                                                                                                                                                   # runtime/autogen/libc.py:3585
                          R_390_16 = 3                                                                                                                                                                   # runtime/autogen/libc.py:3586
                          R_390_32 = 4                                                                                                                                                                   # runtime/autogen/libc.py:3587
                          R_390_PC32 = 5                                                                                                                                                                 # runtime/autogen/libc.py:3588
                          R_390_GOT12 = 6                                                                                                                                                                # runtime/autogen/libc.py:3589
                          R_390_GOT32 = 7                                                                                                                                                                # runtime/autogen/libc.py:3590
                          R_390_PLT32 = 8                                                                                                                                                                # runtime/autogen/libc.py:3591
                          R_390_COPY = 9                                                                                                                                                                 # runtime/autogen/libc.py:3592
                          R_390_GLOB_DAT = 10                                                                                                                                                            # runtime/autogen/libc.py:3593
                          R_390_JMP_SLOT = 11                                                                                                                                                            # runtime/autogen/libc.py:3594
                          R_390_RELATIVE = 12                                                                                                                                                            # runtime/autogen/libc.py:3595
                          R_390_GOTOFF32 = 13                                                                                                                                                            # runtime/autogen/libc.py:3596
                          R_390_GOTPC = 14                                                                                                                                                               # runtime/autogen/libc.py:3597
                          R_390_GOT16 = 15                                                                                                                                                               # runtime/autogen/libc.py:3598
                          R_390_PC16 = 16                                                                                                                                                                # runtime/autogen/libc.py:3599
                          R_390_PC16DBL = 17                                                                                                                                                             # runtime/autogen/libc.py:3600
                          R_390_PLT16DBL = 18                                                                                                                                                            # runtime/autogen/libc.py:3601
                          R_390_PC32DBL = 19                                                                                                                                                             # runtime/autogen/libc.py:3602
                          R_390_PLT32DBL = 20                                                                                                                                                            # runtime/autogen/libc.py:3603
                          R_390_GOTPCDBL = 21                                                                                                                                                            # runtime/autogen/libc.py:3604
                          R_390_64 = 22                                                                                                                                                                  # runtime/autogen/libc.py:3605
                          R_390_PC64 = 23                                                                                                                                                                # runtime/autogen/libc.py:3606
                          R_390_GOT64 = 24                                                                                                                                                               # runtime/autogen/libc.py:3607
                          R_390_PLT64 = 25                                                                                                                                                               # runtime/autogen/libc.py:3608
                          R_390_GOTENT = 26                                                                                                                                                              # runtime/autogen/libc.py:3609
                          R_390_GOTOFF16 = 27                                                                                                                                                            # runtime/autogen/libc.py:3610
                          R_390_GOTOFF64 = 28                                                                                                                                                            # runtime/autogen/libc.py:3611
                          R_390_GOTPLT12 = 29                                                                                                                                                            # runtime/autogen/libc.py:3612
                          R_390_GOTPLT16 = 30                                                                                                                                                            # runtime/autogen/libc.py:3613
                          R_390_GOTPLT32 = 31                                                                                                                                                            # runtime/autogen/libc.py:3614
                          R_390_GOTPLT64 = 32                                                                                                                                                            # runtime/autogen/libc.py:3615
                          R_390_GOTPLTENT = 33                                                                                                                                                           # runtime/autogen/libc.py:3616
                          R_390_PLTOFF16 = 34                                                                                                                                                            # runtime/autogen/libc.py:3617
                          R_390_PLTOFF32 = 35                                                                                                                                                            # runtime/autogen/libc.py:3618
                          R_390_PLTOFF64 = 36                                                                                                                                                            # runtime/autogen/libc.py:3619
                          R_390_TLS_LOAD = 37                                                                                                                                                            # runtime/autogen/libc.py:3620
                          R_390_TLS_DTPMOD = 54                                                                                                                                                          # runtime/autogen/libc.py:3621
                          R_390_TLS_DTPOFF = 55                                                                                                                                                          # runtime/autogen/libc.py:3622
                          R_390_20 = 57                                                                                                                                                                  # runtime/autogen/libc.py:3623
                          R_390_GOT20 = 58                                                                                                                                                               # runtime/autogen/libc.py:3624
                          R_390_GOTPLT20 = 59                                                                                                                                                            # runtime/autogen/libc.py:3625
                          R_390_IRELATIVE = 61                                                                                                                                                           # runtime/autogen/libc.py:3626
                          R_390_NUM = 62                                                                                                                                                                 # runtime/autogen/libc.py:3627
                          R_CRIS_NONE = 0                                                                                                                                                                # runtime/autogen/libc.py:3628
                          R_CRIS_8 = 1                                                                                                                                                                   # runtime/autogen/libc.py:3629
                          R_CRIS_16 = 2                                                                                                                                                                  # runtime/autogen/libc.py:3630
                          R_CRIS_32 = 3                                                                                                                                                                  # runtime/autogen/libc.py:3631
                          R_CRIS_8_PCREL = 4                                                                                                                                                             # runtime/autogen/libc.py:3632
                          R_CRIS_16_PCREL = 5                                                                                                                                                            # runtime/autogen/libc.py:3633
                          R_CRIS_32_PCREL = 6                                                                                                                                                            # runtime/autogen/libc.py:3634
                          R_CRIS_GNU_VTINHERIT = 7                                                                                                                                                       # runtime/autogen/libc.py:3635
                          R_CRIS_GNU_VTENTRY = 8                                                                                                                                                         # runtime/autogen/libc.py:3636
                          R_CRIS_COPY = 9                                                                                                                                                                # runtime/autogen/libc.py:3637
                          R_CRIS_GLOB_DAT = 10                                                                                                                                                           # runtime/autogen/libc.py:3638
                          R_CRIS_JUMP_SLOT = 11                                                                                                                                                          # runtime/autogen/libc.py:3639
                          R_CRIS_RELATIVE = 12                                                                                                                                                           # runtime/autogen/libc.py:3640
                          R_CRIS_16_GOT = 13                                                                                                                                                             # runtime/autogen/libc.py:3641
                          R_CRIS_32_GOT = 14                                                                                                                                                             # runtime/autogen/libc.py:3642
                          R_CRIS_16_GOTPLT = 15                                                                                                                                                          # runtime/autogen/libc.py:3643
                          R_CRIS_32_GOTPLT = 16                                                                                                                                                          # runtime/autogen/libc.py:3644
                          R_CRIS_32_GOTREL = 17                                                                                                                                                          # runtime/autogen/libc.py:3645
                          R_CRIS_32_PLT_GOTREL = 18                                                                                                                                                      # runtime/autogen/libc.py:3646
                          R_CRIS_32_PLT_PCREL = 19                                                                                                                                                       # runtime/autogen/libc.py:3647
                          R_CRIS_NUM = 20                                                                                                                                                                # runtime/autogen/libc.py:3648
                          R_X86_64_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:3649
                          R_X86_64_64 = 1                                                                                                                                                                # runtime/autogen/libc.py:3650
                          R_X86_64_PC32 = 2                                                                                                                                                              # runtime/autogen/libc.py:3651
                          R_X86_64_GOT32 = 3                                                                                                                                                             # runtime/autogen/libc.py:3652
                          R_X86_64_PLT32 = 4                                                                                                                                                             # runtime/autogen/libc.py:3653
                          R_X86_64_COPY = 5                                                                                                                                                              # runtime/autogen/libc.py:3654
                          R_X86_64_GLOB_DAT = 6                                                                                                                                                          # runtime/autogen/libc.py:3655
                          R_X86_64_JUMP_SLOT = 7                                                                                                                                                         # runtime/autogen/libc.py:3656
                          R_X86_64_RELATIVE = 8                                                                                                                                                          # runtime/autogen/libc.py:3657
                          R_X86_64_32 = 10                                                                                                                                                               # runtime/autogen/libc.py:3658
                          R_X86_64_32S = 11                                                                                                                                                              # runtime/autogen/libc.py:3659
                          R_X86_64_16 = 12                                                                                                                                                               # runtime/autogen/libc.py:3660
                          R_X86_64_PC16 = 13                                                                                                                                                             # runtime/autogen/libc.py:3661
                          R_X86_64_8 = 14                                                                                                                                                                # runtime/autogen/libc.py:3662
                          R_X86_64_PC8 = 15                                                                                                                                                              # runtime/autogen/libc.py:3663
                          R_X86_64_DTPMOD64 = 16                                                                                                                                                         # runtime/autogen/libc.py:3664
                          R_X86_64_DTPOFF64 = 17                                                                                                                                                         # runtime/autogen/libc.py:3665
                          R_X86_64_TPOFF64 = 18                                                                                                                                                          # runtime/autogen/libc.py:3666
                          R_X86_64_DTPOFF32 = 21                                                                                                                                                         # runtime/autogen/libc.py:3667
                          R_X86_64_TPOFF32 = 23                                                                                                                                                          # runtime/autogen/libc.py:3668
                          R_X86_64_PC64 = 24                                                                                                                                                             # runtime/autogen/libc.py:3669
                          R_X86_64_GOTOFF64 = 25                                                                                                                                                         # runtime/autogen/libc.py:3670
                          R_X86_64_GOT64 = 27                                                                                                                                                            # runtime/autogen/libc.py:3671
                          R_X86_64_GOTPC64 = 29                                                                                                                                                          # runtime/autogen/libc.py:3672
                          R_X86_64_GOTPLT64 = 30                                                                                                                                                         # runtime/autogen/libc.py:3673
                          R_X86_64_SIZE32 = 32                                                                                                                                                           # runtime/autogen/libc.py:3674
                          R_X86_64_SIZE64 = 33                                                                                                                                                           # runtime/autogen/libc.py:3675
                          R_X86_64_GOTPC32_TLSDESC = 34                                                                                                                                                  # runtime/autogen/libc.py:3676
                          R_X86_64_TLSDESC = 36                                                                                                                                                          # runtime/autogen/libc.py:3677
                          R_X86_64_IRELATIVE = 37                                                                                                                                                        # runtime/autogen/libc.py:3678
                          R_X86_64_RELATIVE64 = 38                                                                                                                                                       # runtime/autogen/libc.py:3679
                          R_X86_64_NUM = 43                                                                                                                                                              # runtime/autogen/libc.py:3680
                          SHT_X86_64_UNWIND = 0x70000001                                                                                                                                                 # runtime/autogen/libc.py:3681
                          R_MN10300_NONE = 0                                                                                                                                                             # runtime/autogen/libc.py:3682
                          R_MN10300_32 = 1                                                                                                                                                               # runtime/autogen/libc.py:3683
                          R_MN10300_16 = 2                                                                                                                                                               # runtime/autogen/libc.py:3684
                          R_MN10300_8 = 3                                                                                                                                                                # runtime/autogen/libc.py:3685
                          R_MN10300_PCREL32 = 4                                                                                                                                                          # runtime/autogen/libc.py:3686
                          R_MN10300_PCREL16 = 5                                                                                                                                                          # runtime/autogen/libc.py:3687
                          R_MN10300_PCREL8 = 6                                                                                                                                                           # runtime/autogen/libc.py:3688
                          R_MN10300_GNU_VTINHERIT = 7                                                                                                                                                    # runtime/autogen/libc.py:3689
                          R_MN10300_GNU_VTENTRY = 8                                                                                                                                                      # runtime/autogen/libc.py:3690
                          R_MN10300_24 = 9                                                                                                                                                               # runtime/autogen/libc.py:3691
                          R_MN10300_GOTPC32 = 10                                                                                                                                                         # runtime/autogen/libc.py:3692
                          R_MN10300_GOTPC16 = 11                                                                                                                                                         # runtime/autogen/libc.py:3693
                          R_MN10300_GOTOFF32 = 12                                                                                                                                                        # runtime/autogen/libc.py:3694
                          R_MN10300_GOTOFF24 = 13                                                                                                                                                        # runtime/autogen/libc.py:3695
                          R_MN10300_GOTOFF16 = 14                                                                                                                                                        # runtime/autogen/libc.py:3696
                          R_MN10300_PLT32 = 15                                                                                                                                                           # runtime/autogen/libc.py:3697
                          R_MN10300_PLT16 = 16                                                                                                                                                           # runtime/autogen/libc.py:3698
                          R_MN10300_GOT32 = 17                                                                                                                                                           # runtime/autogen/libc.py:3699
                          R_MN10300_GOT24 = 18                                                                                                                                                           # runtime/autogen/libc.py:3700
                          R_MN10300_GOT16 = 19                                                                                                                                                           # runtime/autogen/libc.py:3701
                          R_MN10300_COPY = 20                                                                                                                                                            # runtime/autogen/libc.py:3702
                          R_MN10300_GLOB_DAT = 21                                                                                                                                                        # runtime/autogen/libc.py:3703
                          R_MN10300_JMP_SLOT = 22                                                                                                                                                        # runtime/autogen/libc.py:3704
                          R_MN10300_RELATIVE = 23                                                                                                                                                        # runtime/autogen/libc.py:3705
                          R_MN10300_TLS_GD = 24                                                                                                                                                          # runtime/autogen/libc.py:3706
                          R_MN10300_TLS_LD = 25                                                                                                                                                          # runtime/autogen/libc.py:3707
                          R_MN10300_TLS_LDO = 26                                                                                                                                                         # runtime/autogen/libc.py:3708
                          R_MN10300_TLS_DTPMOD = 30                                                                                                                                                      # runtime/autogen/libc.py:3709
                          R_MN10300_TLS_DTPOFF = 31                                                                                                                                                      # runtime/autogen/libc.py:3710
                          R_MN10300_TLS_TPOFF = 32                                                                                                                                                       # runtime/autogen/libc.py:3711
                          R_MN10300_NUM = 35                                                                                                                                                             # runtime/autogen/libc.py:3712
                          R_M32R_NONE = 0                                                                                                                                                                # runtime/autogen/libc.py:3713
                          R_M32R_16 = 1                                                                                                                                                                  # runtime/autogen/libc.py:3714
                          R_M32R_32 = 2                                                                                                                                                                  # runtime/autogen/libc.py:3715
                          R_M32R_24 = 3                                                                                                                                                                  # runtime/autogen/libc.py:3716
                          R_M32R_10_PCREL = 4                                                                                                                                                            # runtime/autogen/libc.py:3717
                          R_M32R_18_PCREL = 5                                                                                                                                                            # runtime/autogen/libc.py:3718
                          R_M32R_26_PCREL = 6                                                                                                                                                            # runtime/autogen/libc.py:3719
                          R_M32R_HI16_ULO = 7                                                                                                                                                            # runtime/autogen/libc.py:3720
                          R_M32R_HI16_SLO = 8                                                                                                                                                            # runtime/autogen/libc.py:3721
                          R_M32R_LO16 = 9                                                                                                                                                                # runtime/autogen/libc.py:3722
                          R_M32R_SDA16 = 10                                                                                                                                                              # runtime/autogen/libc.py:3723
                          R_M32R_GNU_VTINHERIT = 11                                                                                                                                                      # runtime/autogen/libc.py:3724
                          R_M32R_GNU_VTENTRY = 12                                                                                                                                                        # runtime/autogen/libc.py:3725
                          R_M32R_16_RELA = 33                                                                                                                                                            # runtime/autogen/libc.py:3726
                          R_M32R_32_RELA = 34                                                                                                                                                            # runtime/autogen/libc.py:3727
                          R_M32R_24_RELA = 35                                                                                                                                                            # runtime/autogen/libc.py:3728
                          R_M32R_10_PCREL_RELA = 36                                                                                                                                                      # runtime/autogen/libc.py:3729
                          R_M32R_18_PCREL_RELA = 37                                                                                                                                                      # runtime/autogen/libc.py:3730
                          R_M32R_26_PCREL_RELA = 38                                                                                                                                                      # runtime/autogen/libc.py:3731
                          R_M32R_HI16_ULO_RELA = 39                                                                                                                                                      # runtime/autogen/libc.py:3732
                          R_M32R_HI16_SLO_RELA = 40                                                                                                                                                      # runtime/autogen/libc.py:3733
                          R_M32R_LO16_RELA = 41                                                                                                                                                          # runtime/autogen/libc.py:3734
                          R_M32R_SDA16_RELA = 42                                                                                                                                                         # runtime/autogen/libc.py:3735
                          R_M32R_RELA_GNU_VTINHERIT = 43                                                                                                                                                 # runtime/autogen/libc.py:3736
                          R_M32R_RELA_GNU_VTENTRY = 44                                                                                                                                                   # runtime/autogen/libc.py:3737
                          R_M32R_REL32 = 45                                                                                                                                                              # runtime/autogen/libc.py:3738
                          R_M32R_GOT24 = 48                                                                                                                                                              # runtime/autogen/libc.py:3739
                          R_M32R_26_PLTREL = 49                                                                                                                                                          # runtime/autogen/libc.py:3740
                          R_M32R_COPY = 50                                                                                                                                                               # runtime/autogen/libc.py:3741
                          R_M32R_GLOB_DAT = 51                                                                                                                                                           # runtime/autogen/libc.py:3742
                          R_M32R_JMP_SLOT = 52                                                                                                                                                           # runtime/autogen/libc.py:3743
                          R_M32R_RELATIVE = 53                                                                                                                                                           # runtime/autogen/libc.py:3744
                          R_M32R_GOTOFF = 54                                                                                                                                                             # runtime/autogen/libc.py:3745
                          R_M32R_GOTPC24 = 55                                                                                                                                                            # runtime/autogen/libc.py:3746
                          R_M32R_GOT16_LO = 58                                                                                                                                                           # runtime/autogen/libc.py:3747
                          R_M32R_GOTOFF_LO = 64                                                                                                                                                          # runtime/autogen/libc.py:3748
                          R_M32R_NUM = 256                                                                                                                                                               # runtime/autogen/libc.py:3749
                          R_MICROBLAZE_NONE = 0                                                                                                                                                          # runtime/autogen/libc.py:3750
                          R_MICROBLAZE_32 = 1                                                                                                                                                            # runtime/autogen/libc.py:3751
                          R_MICROBLAZE_32_PCREL = 2                                                                                                                                                      # runtime/autogen/libc.py:3752
                          R_MICROBLAZE_64_PCREL = 3                                                                                                                                                      # runtime/autogen/libc.py:3753
                          R_MICROBLAZE_32_PCREL_LO = 4                                                                                                                                                   # runtime/autogen/libc.py:3754
                          R_MICROBLAZE_64 = 5                                                                                                                                                            # runtime/autogen/libc.py:3755
                          R_MICROBLAZE_32_LO = 6                                                                                                                                                         # runtime/autogen/libc.py:3756
                          R_MICROBLAZE_SRO32 = 7                                                                                                                                                         # runtime/autogen/libc.py:3757
                          R_MICROBLAZE_SRW32 = 8                                                                                                                                                         # runtime/autogen/libc.py:3758
                          R_MICROBLAZE_64_NONE = 9                                                                                                                                                       # runtime/autogen/libc.py:3759
                          R_MICROBLAZE_32_SYM_OP_SYM = 10                                                                                                                                                # runtime/autogen/libc.py:3760
                          R_MICROBLAZE_GNU_VTINHERIT = 11                                                                                                                                                # runtime/autogen/libc.py:3761
                          R_MICROBLAZE_GNU_VTENTRY = 12                                                                                                                                                  # runtime/autogen/libc.py:3762
                          R_MICROBLAZE_GOTPC_64 = 13                                                                                                                                                     # runtime/autogen/libc.py:3763
                          R_MICROBLAZE_GOT_64 = 14                                                                                                                                                       # runtime/autogen/libc.py:3764
                          R_MICROBLAZE_PLT_64 = 15                                                                                                                                                       # runtime/autogen/libc.py:3765
                          R_MICROBLAZE_REL = 16                                                                                                                                                          # runtime/autogen/libc.py:3766
                          R_MICROBLAZE_JUMP_SLOT = 17                                                                                                                                                    # runtime/autogen/libc.py:3767
                          R_MICROBLAZE_GLOB_DAT = 18                                                                                                                                                     # runtime/autogen/libc.py:3768
                          R_MICROBLAZE_GOTOFF_64 = 19                                                                                                                                                    # runtime/autogen/libc.py:3769
                          R_MICROBLAZE_GOTOFF_32 = 20                                                                                                                                                    # runtime/autogen/libc.py:3770
                          R_MICROBLAZE_COPY = 21                                                                                                                                                         # runtime/autogen/libc.py:3771
                          R_MICROBLAZE_TLS = 22                                                                                                                                                          # runtime/autogen/libc.py:3772
                          R_MICROBLAZE_TLSGD = 23                                                                                                                                                        # runtime/autogen/libc.py:3773
                          R_MICROBLAZE_TLSLD = 24                                                                                                                                                        # runtime/autogen/libc.py:3774
                          R_MICROBLAZE_TLSDTPMOD32 = 25                                                                                                                                                  # runtime/autogen/libc.py:3775
                          R_MICROBLAZE_TLSDTPREL32 = 26                                                                                                                                                  # runtime/autogen/libc.py:3776
                          R_MICROBLAZE_TLSDTPREL64 = 27                                                                                                                                                  # runtime/autogen/libc.py:3777
                          R_MICROBLAZE_TLSGOTTPREL32 = 28                                                                                                                                                # runtime/autogen/libc.py:3778
                          R_MICROBLAZE_TLSTPREL32 = 29                                                                                                                                                   # runtime/autogen/libc.py:3779
                          DT_NIOS2_GP = 0x70000002                                                                                                                                                       # runtime/autogen/libc.py:3780
                          R_NIOS2_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:3781
                          R_NIOS2_S16 = 1                                                                                                                                                                # runtime/autogen/libc.py:3782
                          R_NIOS2_U16 = 2                                                                                                                                                                # runtime/autogen/libc.py:3783
                          R_NIOS2_PCREL16 = 3                                                                                                                                                            # runtime/autogen/libc.py:3784
                          R_NIOS2_CALL26 = 4                                                                                                                                                             # runtime/autogen/libc.py:3785
                          R_NIOS2_IMM5 = 5                                                                                                                                                               # runtime/autogen/libc.py:3786
                          R_NIOS2_CACHE_OPX = 6                                                                                                                                                          # runtime/autogen/libc.py:3787
                          R_NIOS2_IMM6 = 7                                                                                                                                                               # runtime/autogen/libc.py:3788
                          R_NIOS2_IMM8 = 8                                                                                                                                                               # runtime/autogen/libc.py:3789
                          R_NIOS2_HI16 = 9                                                                                                                                                               # runtime/autogen/libc.py:3790
                          R_NIOS2_LO16 = 10                                                                                                                                                              # runtime/autogen/libc.py:3791
                          R_NIOS2_HIADJ16 = 11                                                                                                                                                           # runtime/autogen/libc.py:3792
                          R_NIOS2_BFD_RELOC_32 = 12                                                                                                                                                      # runtime/autogen/libc.py:3793
                          R_NIOS2_BFD_RELOC_16 = 13                                                                                                                                                      # runtime/autogen/libc.py:3794
                          R_NIOS2_BFD_RELOC_8 = 14                                                                                                                                                       # runtime/autogen/libc.py:3795
                          R_NIOS2_GPREL = 15                                                                                                                                                             # runtime/autogen/libc.py:3796
                          R_NIOS2_GNU_VTINHERIT = 16                                                                                                                                                     # runtime/autogen/libc.py:3797
                          R_NIOS2_GNU_VTENTRY = 17                                                                                                                                                       # runtime/autogen/libc.py:3798
                          R_NIOS2_UJMP = 18                                                                                                                                                              # runtime/autogen/libc.py:3799
                          R_NIOS2_CJMP = 19                                                                                                                                                              # runtime/autogen/libc.py:3800
                          R_NIOS2_CALLR = 20                                                                                                                                                             # runtime/autogen/libc.py:3801
                          R_NIOS2_GOT16 = 22                                                                                                                                                             # runtime/autogen/libc.py:3802
                          R_NIOS2_CALL16 = 23                                                                                                                                                            # runtime/autogen/libc.py:3803
                          R_NIOS2_GOTOFF_LO = 24                                                                                                                                                         # runtime/autogen/libc.py:3804
                          R_NIOS2_GOTOFF_HA = 25                                                                                                                                                         # runtime/autogen/libc.py:3805
                          R_NIOS2_PCREL_LO = 26                                                                                                                                                          # runtime/autogen/libc.py:3806
                          R_NIOS2_PCREL_HA = 27                                                                                                                                                          # runtime/autogen/libc.py:3807
                          R_NIOS2_TLS_GD16 = 28                                                                                                                                                          # runtime/autogen/libc.py:3808
                          R_NIOS2_TLS_LDM16 = 29                                                                                                                                                         # runtime/autogen/libc.py:3809
                          R_NIOS2_TLS_LDO16 = 30                                                                                                                                                         # runtime/autogen/libc.py:3810
                          R_NIOS2_TLS_IE16 = 31                                                                                                                                                          # runtime/autogen/libc.py:3811
                          R_NIOS2_TLS_LE16 = 32                                                                                                                                                          # runtime/autogen/libc.py:3812
                          R_NIOS2_TLS_DTPMOD = 33                                                                                                                                                        # runtime/autogen/libc.py:3813
                          R_NIOS2_TLS_DTPREL = 34                                                                                                                                                        # runtime/autogen/libc.py:3814
                          R_NIOS2_TLS_TPREL = 35                                                                                                                                                         # runtime/autogen/libc.py:3815
                          R_NIOS2_COPY = 36                                                                                                                                                              # runtime/autogen/libc.py:3816
                          R_NIOS2_GLOB_DAT = 37                                                                                                                                                          # runtime/autogen/libc.py:3817
                          R_NIOS2_JUMP_SLOT = 38                                                                                                                                                         # runtime/autogen/libc.py:3818
                          R_NIOS2_RELATIVE = 39                                                                                                                                                          # runtime/autogen/libc.py:3819
                          R_NIOS2_GOTOFF = 40                                                                                                                                                            # runtime/autogen/libc.py:3820
                          R_NIOS2_CALL26_NOAT = 41                                                                                                                                                       # runtime/autogen/libc.py:3821
                          R_NIOS2_GOT_LO = 42                                                                                                                                                            # runtime/autogen/libc.py:3822
                          R_NIOS2_GOT_HA = 43                                                                                                                                                            # runtime/autogen/libc.py:3823
                          R_NIOS2_CALL_LO = 44                                                                                                                                                           # runtime/autogen/libc.py:3824
                          R_NIOS2_CALL_HA = 45                                                                                                                                                           # runtime/autogen/libc.py:3825
                          R_TILEPRO_NONE = 0                                                                                                                                                             # runtime/autogen/libc.py:3826
                          R_TILEPRO_32 = 1                                                                                                                                                               # runtime/autogen/libc.py:3827
                          R_TILEPRO_16 = 2                                                                                                                                                               # runtime/autogen/libc.py:3828
                          R_TILEPRO_8 = 3                                                                                                                                                                # runtime/autogen/libc.py:3829
                          R_TILEPRO_32_PCREL = 4                                                                                                                                                         # runtime/autogen/libc.py:3830
                          R_TILEPRO_16_PCREL = 5                                                                                                                                                         # runtime/autogen/libc.py:3831
                          R_TILEPRO_8_PCREL = 6                                                                                                                                                          # runtime/autogen/libc.py:3832
                          R_TILEPRO_LO16 = 7                                                                                                                                                             # runtime/autogen/libc.py:3833
                          R_TILEPRO_HI16 = 8                                                                                                                                                             # runtime/autogen/libc.py:3834
                          R_TILEPRO_HA16 = 9                                                                                                                                                             # runtime/autogen/libc.py:3835
                          R_TILEPRO_COPY = 10                                                                                                                                                            # runtime/autogen/libc.py:3836
                          R_TILEPRO_GLOB_DAT = 11                                                                                                                                                        # runtime/autogen/libc.py:3837
                          R_TILEPRO_JMP_SLOT = 12                                                                                                                                                        # runtime/autogen/libc.py:3838
                          R_TILEPRO_RELATIVE = 13                                                                                                                                                        # runtime/autogen/libc.py:3839
                          R_TILEPRO_BROFF_X1 = 14                                                                                                                                                        # runtime/autogen/libc.py:3840
                          R_TILEPRO_JOFFLONG_X1 = 15                                                                                                                                                     # runtime/autogen/libc.py:3841
                          R_TILEPRO_JOFFLONG_X1_PLT = 16                                                                                                                                                 # runtime/autogen/libc.py:3842
                          R_TILEPRO_IMM8_X0 = 17                                                                                                                                                         # runtime/autogen/libc.py:3843
                          R_TILEPRO_IMM8_Y0 = 18                                                                                                                                                         # runtime/autogen/libc.py:3844
                          R_TILEPRO_IMM8_X1 = 19                                                                                                                                                         # runtime/autogen/libc.py:3845
                          R_TILEPRO_IMM8_Y1 = 20                                                                                                                                                         # runtime/autogen/libc.py:3846
                          R_TILEPRO_MT_IMM15_X1 = 21                                                                                                                                                     # runtime/autogen/libc.py:3847
                          R_TILEPRO_MF_IMM15_X1 = 22                                                                                                                                                     # runtime/autogen/libc.py:3848
                          R_TILEPRO_IMM16_X0 = 23                                                                                                                                                        # runtime/autogen/libc.py:3849
                          R_TILEPRO_IMM16_X1 = 24                                                                                                                                                        # runtime/autogen/libc.py:3850
                          R_TILEPRO_IMM16_X0_LO = 25                                                                                                                                                     # runtime/autogen/libc.py:3851
                          R_TILEPRO_IMM16_X1_LO = 26                                                                                                                                                     # runtime/autogen/libc.py:3852
                          R_TILEPRO_IMM16_X0_HI = 27                                                                                                                                                     # runtime/autogen/libc.py:3853
                          R_TILEPRO_IMM16_X1_HI = 28                                                                                                                                                     # runtime/autogen/libc.py:3854
                          R_TILEPRO_IMM16_X0_HA = 29                                                                                                                                                     # runtime/autogen/libc.py:3855
                          R_TILEPRO_IMM16_X1_HA = 30                                                                                                                                                     # runtime/autogen/libc.py:3856
                          R_TILEPRO_IMM16_X0_PCREL = 31                                                                                                                                                  # runtime/autogen/libc.py:3857
                          R_TILEPRO_IMM16_X1_PCREL = 32                                                                                                                                                  # runtime/autogen/libc.py:3858
                          R_TILEPRO_IMM16_X0_LO_PCREL = 33                                                                                                                                               # runtime/autogen/libc.py:3859
                          R_TILEPRO_IMM16_X1_LO_PCREL = 34                                                                                                                                               # runtime/autogen/libc.py:3860
                          R_TILEPRO_IMM16_X0_HI_PCREL = 35                                                                                                                                               # runtime/autogen/libc.py:3861
                          R_TILEPRO_IMM16_X1_HI_PCREL = 36                                                                                                                                               # runtime/autogen/libc.py:3862
                          R_TILEPRO_IMM16_X0_HA_PCREL = 37                                                                                                                                               # runtime/autogen/libc.py:3863
                          R_TILEPRO_IMM16_X1_HA_PCREL = 38                                                                                                                                               # runtime/autogen/libc.py:3864
                          R_TILEPRO_IMM16_X0_GOT = 39                                                                                                                                                    # runtime/autogen/libc.py:3865
                          R_TILEPRO_IMM16_X1_GOT = 40                                                                                                                                                    # runtime/autogen/libc.py:3866
                          R_TILEPRO_IMM16_X0_GOT_LO = 41                                                                                                                                                 # runtime/autogen/libc.py:3867
                          R_TILEPRO_IMM16_X1_GOT_LO = 42                                                                                                                                                 # runtime/autogen/libc.py:3868
                          R_TILEPRO_IMM16_X0_GOT_HI = 43                                                                                                                                                 # runtime/autogen/libc.py:3869
                          R_TILEPRO_IMM16_X1_GOT_HI = 44                                                                                                                                                 # runtime/autogen/libc.py:3870
                          R_TILEPRO_IMM16_X0_GOT_HA = 45                                                                                                                                                 # runtime/autogen/libc.py:3871
                          R_TILEPRO_IMM16_X1_GOT_HA = 46                                                                                                                                                 # runtime/autogen/libc.py:3872
                          R_TILEPRO_MMSTART_X0 = 47                                                                                                                                                      # runtime/autogen/libc.py:3873
                          R_TILEPRO_MMEND_X0 = 48                                                                                                                                                        # runtime/autogen/libc.py:3874
                          R_TILEPRO_MMSTART_X1 = 49                                                                                                                                                      # runtime/autogen/libc.py:3875
                          R_TILEPRO_MMEND_X1 = 50                                                                                                                                                        # runtime/autogen/libc.py:3876
                          R_TILEPRO_SHAMT_X0 = 51                                                                                                                                                        # runtime/autogen/libc.py:3877
                          R_TILEPRO_SHAMT_X1 = 52                                                                                                                                                        # runtime/autogen/libc.py:3878
                          R_TILEPRO_SHAMT_Y0 = 53                                                                                                                                                        # runtime/autogen/libc.py:3879
                          R_TILEPRO_SHAMT_Y1 = 54                                                                                                                                                        # runtime/autogen/libc.py:3880
                          R_TILEPRO_DEST_IMM8_X1 = 55                                                                                                                                                    # runtime/autogen/libc.py:3881
                          R_TILEPRO_TLS_GD_CALL = 60                                                                                                                                                     # runtime/autogen/libc.py:3882
                          R_TILEPRO_IMM8_X0_TLS_GD_ADD = 61                                                                                                                                              # runtime/autogen/libc.py:3883
                          R_TILEPRO_IMM8_X1_TLS_GD_ADD = 62                                                                                                                                              # runtime/autogen/libc.py:3884
                          R_TILEPRO_IMM8_Y0_TLS_GD_ADD = 63                                                                                                                                              # runtime/autogen/libc.py:3885
                          R_TILEPRO_IMM8_Y1_TLS_GD_ADD = 64                                                                                                                                              # runtime/autogen/libc.py:3886
                          R_TILEPRO_TLS_IE_LOAD = 65                                                                                                                                                     # runtime/autogen/libc.py:3887
                          R_TILEPRO_IMM16_X0_TLS_GD = 66                                                                                                                                                 # runtime/autogen/libc.py:3888
                          R_TILEPRO_IMM16_X1_TLS_GD = 67                                                                                                                                                 # runtime/autogen/libc.py:3889
                          R_TILEPRO_IMM16_X0_TLS_GD_LO = 68                                                                                                                                              # runtime/autogen/libc.py:3890
                          R_TILEPRO_IMM16_X1_TLS_GD_LO = 69                                                                                                                                              # runtime/autogen/libc.py:3891
                          R_TILEPRO_IMM16_X0_TLS_GD_HI = 70                                                                                                                                              # runtime/autogen/libc.py:3892
                          R_TILEPRO_IMM16_X1_TLS_GD_HI = 71                                                                                                                                              # runtime/autogen/libc.py:3893
                          R_TILEPRO_IMM16_X0_TLS_GD_HA = 72                                                                                                                                              # runtime/autogen/libc.py:3894
                          R_TILEPRO_IMM16_X1_TLS_GD_HA = 73                                                                                                                                              # runtime/autogen/libc.py:3895
                          R_TILEPRO_IMM16_X0_TLS_IE = 74                                                                                                                                                 # runtime/autogen/libc.py:3896
                          R_TILEPRO_IMM16_X1_TLS_IE = 75                                                                                                                                                 # runtime/autogen/libc.py:3897
                          R_TILEPRO_IMM16_X0_TLS_IE_LO = 76                                                                                                                                              # runtime/autogen/libc.py:3898
                          R_TILEPRO_IMM16_X1_TLS_IE_LO = 77                                                                                                                                              # runtime/autogen/libc.py:3899
                          R_TILEPRO_IMM16_X0_TLS_IE_HI = 78                                                                                                                                              # runtime/autogen/libc.py:3900
                          R_TILEPRO_IMM16_X1_TLS_IE_HI = 79                                                                                                                                              # runtime/autogen/libc.py:3901
                          R_TILEPRO_IMM16_X0_TLS_IE_HA = 80                                                                                                                                              # runtime/autogen/libc.py:3902
                          R_TILEPRO_IMM16_X1_TLS_IE_HA = 81                                                                                                                                              # runtime/autogen/libc.py:3903
                          R_TILEPRO_TLS_DTPMOD32 = 82                                                                                                                                                    # runtime/autogen/libc.py:3904
                          R_TILEPRO_TLS_DTPOFF32 = 83                                                                                                                                                    # runtime/autogen/libc.py:3905
                          R_TILEPRO_TLS_TPOFF32 = 84                                                                                                                                                     # runtime/autogen/libc.py:3906
                          R_TILEPRO_IMM16_X0_TLS_LE = 85                                                                                                                                                 # runtime/autogen/libc.py:3907
                          R_TILEPRO_IMM16_X1_TLS_LE = 86                                                                                                                                                 # runtime/autogen/libc.py:3908
                          R_TILEPRO_IMM16_X0_TLS_LE_LO = 87                                                                                                                                              # runtime/autogen/libc.py:3909
                          R_TILEPRO_IMM16_X1_TLS_LE_LO = 88                                                                                                                                              # runtime/autogen/libc.py:3910
                          R_TILEPRO_IMM16_X0_TLS_LE_HI = 89                                                                                                                                              # runtime/autogen/libc.py:3911
                          R_TILEPRO_IMM16_X1_TLS_LE_HI = 90                                                                                                                                              # runtime/autogen/libc.py:3912
                          R_TILEPRO_IMM16_X0_TLS_LE_HA = 91                                                                                                                                              # runtime/autogen/libc.py:3913
                          R_TILEPRO_IMM16_X1_TLS_LE_HA = 92                                                                                                                                              # runtime/autogen/libc.py:3914
                          R_TILEPRO_GNU_VTINHERIT = 128                                                                                                                                                  # runtime/autogen/libc.py:3915
                          R_TILEPRO_GNU_VTENTRY = 129                                                                                                                                                    # runtime/autogen/libc.py:3916
                          R_TILEPRO_NUM = 130                                                                                                                                                            # runtime/autogen/libc.py:3917
                          R_TILEGX_NONE = 0                                                                                                                                                              # runtime/autogen/libc.py:3918
                          R_TILEGX_64 = 1                                                                                                                                                                # runtime/autogen/libc.py:3919
                          R_TILEGX_32 = 2                                                                                                                                                                # runtime/autogen/libc.py:3920
                          R_TILEGX_16 = 3                                                                                                                                                                # runtime/autogen/libc.py:3921
                          R_TILEGX_8 = 4                                                                                                                                                                 # runtime/autogen/libc.py:3922
                          R_TILEGX_64_PCREL = 5                                                                                                                                                          # runtime/autogen/libc.py:3923
                          R_TILEGX_32_PCREL = 6                                                                                                                                                          # runtime/autogen/libc.py:3924
                          R_TILEGX_16_PCREL = 7                                                                                                                                                          # runtime/autogen/libc.py:3925
                          R_TILEGX_8_PCREL = 8                                                                                                                                                           # runtime/autogen/libc.py:3926
                          R_TILEGX_HW0 = 9                                                                                                                                                               # runtime/autogen/libc.py:3927
                          R_TILEGX_HW1 = 10                                                                                                                                                              # runtime/autogen/libc.py:3928
                          R_TILEGX_HW2 = 11                                                                                                                                                              # runtime/autogen/libc.py:3929
                          R_TILEGX_HW3 = 12                                                                                                                                                              # runtime/autogen/libc.py:3930
                          R_TILEGX_HW0_LAST = 13                                                                                                                                                         # runtime/autogen/libc.py:3931
                          R_TILEGX_HW1_LAST = 14                                                                                                                                                         # runtime/autogen/libc.py:3932
                          R_TILEGX_HW2_LAST = 15                                                                                                                                                         # runtime/autogen/libc.py:3933
                          R_TILEGX_COPY = 16                                                                                                                                                             # runtime/autogen/libc.py:3934
                          R_TILEGX_GLOB_DAT = 17                                                                                                                                                         # runtime/autogen/libc.py:3935
                          R_TILEGX_JMP_SLOT = 18                                                                                                                                                         # runtime/autogen/libc.py:3936
                          R_TILEGX_RELATIVE = 19                                                                                                                                                         # runtime/autogen/libc.py:3937
                          R_TILEGX_BROFF_X1 = 20                                                                                                                                                         # runtime/autogen/libc.py:3938
                          R_TILEGX_JUMPOFF_X1 = 21                                                                                                                                                       # runtime/autogen/libc.py:3939
                          R_TILEGX_JUMPOFF_X1_PLT = 22                                                                                                                                                   # runtime/autogen/libc.py:3940
                          R_TILEGX_IMM8_X0 = 23                                                                                                                                                          # runtime/autogen/libc.py:3941
                          R_TILEGX_IMM8_Y0 = 24                                                                                                                                                          # runtime/autogen/libc.py:3942
                          R_TILEGX_IMM8_X1 = 25                                                                                                                                                          # runtime/autogen/libc.py:3943
                          R_TILEGX_IMM8_Y1 = 26                                                                                                                                                          # runtime/autogen/libc.py:3944
                          R_TILEGX_DEST_IMM8_X1 = 27                                                                                                                                                     # runtime/autogen/libc.py:3945
                          R_TILEGX_MT_IMM14_X1 = 28                                                                                                                                                      # runtime/autogen/libc.py:3946
                          R_TILEGX_MF_IMM14_X1 = 29                                                                                                                                                      # runtime/autogen/libc.py:3947
                          R_TILEGX_MMSTART_X0 = 30                                                                                                                                                       # runtime/autogen/libc.py:3948
                          R_TILEGX_MMEND_X0 = 31                                                                                                                                                         # runtime/autogen/libc.py:3949
                          R_TILEGX_SHAMT_X0 = 32                                                                                                                                                         # runtime/autogen/libc.py:3950
                          R_TILEGX_SHAMT_X1 = 33                                                                                                                                                         # runtime/autogen/libc.py:3951
                          R_TILEGX_SHAMT_Y0 = 34                                                                                                                                                         # runtime/autogen/libc.py:3952
                          R_TILEGX_SHAMT_Y1 = 35                                                                                                                                                         # runtime/autogen/libc.py:3953
                          R_TILEGX_IMM16_X0_HW0 = 36                                                                                                                                                     # runtime/autogen/libc.py:3954
                          R_TILEGX_IMM16_X1_HW0 = 37                                                                                                                                                     # runtime/autogen/libc.py:3955
                          R_TILEGX_IMM16_X0_HW1 = 38                                                                                                                                                     # runtime/autogen/libc.py:3956
                          R_TILEGX_IMM16_X1_HW1 = 39                                                                                                                                                     # runtime/autogen/libc.py:3957
                          R_TILEGX_IMM16_X0_HW2 = 40                                                                                                                                                     # runtime/autogen/libc.py:3958
                          R_TILEGX_IMM16_X1_HW2 = 41                                                                                                                                                     # runtime/autogen/libc.py:3959
                          R_TILEGX_IMM16_X0_HW3 = 42                                                                                                                                                     # runtime/autogen/libc.py:3960
                          R_TILEGX_IMM16_X1_HW3 = 43                                                                                                                                                     # runtime/autogen/libc.py:3961
                          R_TILEGX_IMM16_X0_HW0_LAST = 44                                                                                                                                                # runtime/autogen/libc.py:3962
                          R_TILEGX_IMM16_X1_HW0_LAST = 45                                                                                                                                                # runtime/autogen/libc.py:3963
                          R_TILEGX_IMM16_X0_HW1_LAST = 46                                                                                                                                                # runtime/autogen/libc.py:3964
                          R_TILEGX_IMM16_X1_HW1_LAST = 47                                                                                                                                                # runtime/autogen/libc.py:3965
                          R_TILEGX_IMM16_X0_HW2_LAST = 48                                                                                                                                                # runtime/autogen/libc.py:3966
                          R_TILEGX_IMM16_X1_HW2_LAST = 49                                                                                                                                                # runtime/autogen/libc.py:3967
                          R_TILEGX_IMM16_X0_HW0_PCREL = 50                                                                                                                                               # runtime/autogen/libc.py:3968
                          R_TILEGX_IMM16_X1_HW0_PCREL = 51                                                                                                                                               # runtime/autogen/libc.py:3969
                          R_TILEGX_IMM16_X0_HW1_PCREL = 52                                                                                                                                               # runtime/autogen/libc.py:3970
                          R_TILEGX_IMM16_X1_HW1_PCREL = 53                                                                                                                                               # runtime/autogen/libc.py:3971
                          R_TILEGX_IMM16_X0_HW2_PCREL = 54                                                                                                                                               # runtime/autogen/libc.py:3972
                          R_TILEGX_IMM16_X1_HW2_PCREL = 55                                                                                                                                               # runtime/autogen/libc.py:3973
                          R_TILEGX_IMM16_X0_HW3_PCREL = 56                                                                                                                                               # runtime/autogen/libc.py:3974
                          R_TILEGX_IMM16_X1_HW3_PCREL = 57                                                                                                                                               # runtime/autogen/libc.py:3975
                          R_TILEGX_IMM16_X0_HW0_LAST_PCREL = 58                                                                                                                                          # runtime/autogen/libc.py:3976
                          R_TILEGX_IMM16_X1_HW0_LAST_PCREL = 59                                                                                                                                          # runtime/autogen/libc.py:3977
                          R_TILEGX_IMM16_X0_HW1_LAST_PCREL = 60                                                                                                                                          # runtime/autogen/libc.py:3978
                          R_TILEGX_IMM16_X1_HW1_LAST_PCREL = 61                                                                                                                                          # runtime/autogen/libc.py:3979
                          R_TILEGX_IMM16_X0_HW2_LAST_PCREL = 62                                                                                                                                          # runtime/autogen/libc.py:3980
                          R_TILEGX_IMM16_X1_HW2_LAST_PCREL = 63                                                                                                                                          # runtime/autogen/libc.py:3981
                          R_TILEGX_IMM16_X0_HW0_GOT = 64                                                                                                                                                 # runtime/autogen/libc.py:3982
                          R_TILEGX_IMM16_X1_HW0_GOT = 65                                                                                                                                                 # runtime/autogen/libc.py:3983
                          R_TILEGX_IMM16_X0_HW0_PLT_PCREL = 66                                                                                                                                           # runtime/autogen/libc.py:3984
                          R_TILEGX_IMM16_X1_HW0_PLT_PCREL = 67                                                                                                                                           # runtime/autogen/libc.py:3985
                          R_TILEGX_IMM16_X0_HW1_PLT_PCREL = 68                                                                                                                                           # runtime/autogen/libc.py:3986
                          R_TILEGX_IMM16_X1_HW1_PLT_PCREL = 69                                                                                                                                           # runtime/autogen/libc.py:3987
                          R_TILEGX_IMM16_X0_HW2_PLT_PCREL = 70                                                                                                                                           # runtime/autogen/libc.py:3988
                          R_TILEGX_IMM16_X1_HW2_PLT_PCREL = 71                                                                                                                                           # runtime/autogen/libc.py:3989
                          R_TILEGX_IMM16_X0_HW0_LAST_GOT = 72                                                                                                                                            # runtime/autogen/libc.py:3990
                          R_TILEGX_IMM16_X1_HW0_LAST_GOT = 73                                                                                                                                            # runtime/autogen/libc.py:3991
                          R_TILEGX_IMM16_X0_HW1_LAST_GOT = 74                                                                                                                                            # runtime/autogen/libc.py:3992
                          R_TILEGX_IMM16_X1_HW1_LAST_GOT = 75                                                                                                                                            # runtime/autogen/libc.py:3993
                          R_TILEGX_IMM16_X0_HW3_PLT_PCREL = 76                                                                                                                                           # runtime/autogen/libc.py:3994
                          R_TILEGX_IMM16_X1_HW3_PLT_PCREL = 77                                                                                                                                           # runtime/autogen/libc.py:3995
                          R_TILEGX_IMM16_X0_HW0_TLS_GD = 78                                                                                                                                              # runtime/autogen/libc.py:3996
                          R_TILEGX_IMM16_X1_HW0_TLS_GD = 79                                                                                                                                              # runtime/autogen/libc.py:3997
                          R_TILEGX_IMM16_X0_HW0_TLS_LE = 80                                                                                                                                              # runtime/autogen/libc.py:3998
                          R_TILEGX_IMM16_X1_HW0_TLS_LE = 81                                                                                                                                              # runtime/autogen/libc.py:3999
                          R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE = 82                                                                                                                                         # runtime/autogen/libc.py:4000
                          R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE = 83                                                                                                                                         # runtime/autogen/libc.py:4001
                          R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE = 84                                                                                                                                         # runtime/autogen/libc.py:4002
                          R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE = 85                                                                                                                                         # runtime/autogen/libc.py:4003
                          R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD = 86                                                                                                                                         # runtime/autogen/libc.py:4004
                          R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD = 87                                                                                                                                         # runtime/autogen/libc.py:4005
                          R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD = 88                                                                                                                                         # runtime/autogen/libc.py:4006
                          R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD = 89                                                                                                                                         # runtime/autogen/libc.py:4007
                          R_TILEGX_IMM16_X0_HW0_TLS_IE = 92                                                                                                                                              # runtime/autogen/libc.py:4008
                          R_TILEGX_IMM16_X1_HW0_TLS_IE = 93                                                                                                                                              # runtime/autogen/libc.py:4009
                          R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL = 94                                                                                                                                      # runtime/autogen/libc.py:4010
                          R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL = 95                                                                                                                                      # runtime/autogen/libc.py:4011
                          R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL = 96                                                                                                                                      # runtime/autogen/libc.py:4012
                          R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL = 97                                                                                                                                      # runtime/autogen/libc.py:4013
                          R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL = 98                                                                                                                                      # runtime/autogen/libc.py:4014
                          R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL = 99                                                                                                                                      # runtime/autogen/libc.py:4015
                          R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE = 100                                                                                                                                        # runtime/autogen/libc.py:4016
                          R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE = 101                                                                                                                                        # runtime/autogen/libc.py:4017
                          R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE = 102                                                                                                                                        # runtime/autogen/libc.py:4018
                          R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE = 103                                                                                                                                        # runtime/autogen/libc.py:4019
                          R_TILEGX_TLS_DTPMOD64 = 106                                                                                                                                                    # runtime/autogen/libc.py:4020
                          R_TILEGX_TLS_DTPOFF64 = 107                                                                                                                                                    # runtime/autogen/libc.py:4021
                          R_TILEGX_TLS_TPOFF64 = 108                                                                                                                                                     # runtime/autogen/libc.py:4022
                          R_TILEGX_TLS_DTPMOD32 = 109                                                                                                                                                    # runtime/autogen/libc.py:4023
                          R_TILEGX_TLS_DTPOFF32 = 110                                                                                                                                                    # runtime/autogen/libc.py:4024
                          R_TILEGX_TLS_TPOFF32 = 111                                                                                                                                                     # runtime/autogen/libc.py:4025
                          R_TILEGX_TLS_GD_CALL = 112                                                                                                                                                     # runtime/autogen/libc.py:4026
                          R_TILEGX_IMM8_X0_TLS_GD_ADD = 113                                                                                                                                              # runtime/autogen/libc.py:4027
                          R_TILEGX_IMM8_X1_TLS_GD_ADD = 114                                                                                                                                              # runtime/autogen/libc.py:4028
                          R_TILEGX_IMM8_Y0_TLS_GD_ADD = 115                                                                                                                                              # runtime/autogen/libc.py:4029
                          R_TILEGX_IMM8_Y1_TLS_GD_ADD = 116                                                                                                                                              # runtime/autogen/libc.py:4030
                          R_TILEGX_TLS_IE_LOAD = 117                                                                                                                                                     # runtime/autogen/libc.py:4031
                          R_TILEGX_IMM8_X0_TLS_ADD = 118                                                                                                                                                 # runtime/autogen/libc.py:4032
                          R_TILEGX_IMM8_X1_TLS_ADD = 119                                                                                                                                                 # runtime/autogen/libc.py:4033
                          R_TILEGX_IMM8_Y0_TLS_ADD = 120                                                                                                                                                 # runtime/autogen/libc.py:4034
                          R_TILEGX_IMM8_Y1_TLS_ADD = 121                                                                                                                                                 # runtime/autogen/libc.py:4035
                          R_TILEGX_GNU_VTINHERIT = 128                                                                                                                                                   # runtime/autogen/libc.py:4036
                          R_TILEGX_GNU_VTENTRY = 129                                                                                                                                                     # runtime/autogen/libc.py:4037
                          R_TILEGX_NUM = 130                                                                                                                                                             # runtime/autogen/libc.py:4038
                          EF_RISCV_RVC = 0x0001                                                                                                                                                          # runtime/autogen/libc.py:4039
                          EF_RISCV_FLOAT_ABI = 0x0006                                                                                                                                                    # runtime/autogen/libc.py:4040
                          EF_RISCV_FLOAT_ABI_SOFT = 0x0000                                                                                                                                               # runtime/autogen/libc.py:4041
                          EF_RISCV_FLOAT_ABI_SINGLE = 0x0002                                                                                                                                             # runtime/autogen/libc.py:4042
                          EF_RISCV_FLOAT_ABI_DOUBLE = 0x0004                                                                                                                                             # runtime/autogen/libc.py:4043
                          EF_RISCV_FLOAT_ABI_QUAD = 0x0006                                                                                                                                               # runtime/autogen/libc.py:4044
                          R_RISCV_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:4045
                          R_RISCV_32 = 1                                                                                                                                                                 # runtime/autogen/libc.py:4046
                          R_RISCV_64 = 2                                                                                                                                                                 # runtime/autogen/libc.py:4047
                          R_RISCV_RELATIVE = 3                                                                                                                                                           # runtime/autogen/libc.py:4048
                          R_RISCV_COPY = 4                                                                                                                                                               # runtime/autogen/libc.py:4049
                          R_RISCV_JUMP_SLOT = 5                                                                                                                                                          # runtime/autogen/libc.py:4050
                          R_RISCV_TLS_DTPMOD32 = 6                                                                                                                                                       # runtime/autogen/libc.py:4051
                          R_RISCV_TLS_DTPMOD64 = 7                                                                                                                                                       # runtime/autogen/libc.py:4052
                          R_RISCV_TLS_DTPREL32 = 8                                                                                                                                                       # runtime/autogen/libc.py:4053
                          R_RISCV_TLS_DTPREL64 = 9                                                                                                                                                       # runtime/autogen/libc.py:4054
                          R_RISCV_TLS_TPREL32 = 10                                                                                                                                                       # runtime/autogen/libc.py:4055
                          R_RISCV_TLS_TPREL64 = 11                                                                                                                                                       # runtime/autogen/libc.py:4056
                          R_RISCV_BRANCH = 16                                                                                                                                                            # runtime/autogen/libc.py:4057
                          R_RISCV_JAL = 17                                                                                                                                                               # runtime/autogen/libc.py:4058
                          R_RISCV_CALL = 18                                                                                                                                                              # runtime/autogen/libc.py:4059
                          R_RISCV_CALL_PLT = 19                                                                                                                                                          # runtime/autogen/libc.py:4060
                          R_RISCV_GOT_HI20 = 20                                                                                                                                                          # runtime/autogen/libc.py:4061
                          R_RISCV_TLS_GOT_HI20 = 21                                                                                                                                                      # runtime/autogen/libc.py:4062
                          R_RISCV_TLS_GD_HI20 = 22                                                                                                                                                       # runtime/autogen/libc.py:4063
                          R_RISCV_PCREL_HI20 = 23                                                                                                                                                        # runtime/autogen/libc.py:4064
                          R_RISCV_PCREL_LO12_I = 24                                                                                                                                                      # runtime/autogen/libc.py:4065
                          R_RISCV_PCREL_LO12_S = 25                                                                                                                                                      # runtime/autogen/libc.py:4066
                          R_RISCV_HI20 = 26                                                                                                                                                              # runtime/autogen/libc.py:4067
                          R_RISCV_LO12_I = 27                                                                                                                                                            # runtime/autogen/libc.py:4068
                          R_RISCV_LO12_S = 28                                                                                                                                                            # runtime/autogen/libc.py:4069
                          R_RISCV_TPREL_HI20 = 29                                                                                                                                                        # runtime/autogen/libc.py:4070
                          R_RISCV_TPREL_LO12_I = 30                                                                                                                                                      # runtime/autogen/libc.py:4071
                          R_RISCV_TPREL_LO12_S = 31                                                                                                                                                      # runtime/autogen/libc.py:4072
                          R_RISCV_TPREL_ADD = 32                                                                                                                                                         # runtime/autogen/libc.py:4073
                          R_RISCV_ADD8 = 33                                                                                                                                                              # runtime/autogen/libc.py:4074
                          R_RISCV_ADD16 = 34                                                                                                                                                             # runtime/autogen/libc.py:4075
                          R_RISCV_ADD32 = 35                                                                                                                                                             # runtime/autogen/libc.py:4076
                          R_RISCV_ADD64 = 36                                                                                                                                                             # runtime/autogen/libc.py:4077
                          R_RISCV_SUB8 = 37                                                                                                                                                              # runtime/autogen/libc.py:4078
                          R_RISCV_SUB16 = 38                                                                                                                                                             # runtime/autogen/libc.py:4079
                          R_RISCV_SUB32 = 39                                                                                                                                                             # runtime/autogen/libc.py:4080
                          R_RISCV_SUB64 = 40                                                                                                                                                             # runtime/autogen/libc.py:4081
                          R_RISCV_GNU_VTINHERIT = 41                                                                                                                                                     # runtime/autogen/libc.py:4082
                          R_RISCV_GNU_VTENTRY = 42                                                                                                                                                       # runtime/autogen/libc.py:4083
                          R_RISCV_ALIGN = 43                                                                                                                                                             # runtime/autogen/libc.py:4084
                          R_RISCV_RVC_BRANCH = 44                                                                                                                                                        # runtime/autogen/libc.py:4085
                          R_RISCV_RVC_JUMP = 45                                                                                                                                                          # runtime/autogen/libc.py:4086
                          R_RISCV_RVC_LUI = 46                                                                                                                                                           # runtime/autogen/libc.py:4087
                          R_RISCV_GPREL_I = 47                                                                                                                                                           # runtime/autogen/libc.py:4088
                          R_RISCV_GPREL_S = 48                                                                                                                                                           # runtime/autogen/libc.py:4089
                          R_RISCV_TPREL_I = 49                                                                                                                                                           # runtime/autogen/libc.py:4090
                          R_RISCV_TPREL_S = 50                                                                                                                                                           # runtime/autogen/libc.py:4091
                          R_RISCV_RELAX = 51                                                                                                                                                             # runtime/autogen/libc.py:4092
                          R_RISCV_SUB6 = 52                                                                                                                                                              # runtime/autogen/libc.py:4093
                          R_RISCV_SET6 = 53                                                                                                                                                              # runtime/autogen/libc.py:4094
                          R_RISCV_SET8 = 54                                                                                                                                                              # runtime/autogen/libc.py:4095
                          R_RISCV_SET16 = 55                                                                                                                                                             # runtime/autogen/libc.py:4096
                          R_RISCV_SET32 = 56                                                                                                                                                             # runtime/autogen/libc.py:4097
                          R_RISCV_32_PCREL = 57                                                                                                                                                          # runtime/autogen/libc.py:4098
                          R_RISCV_IRELATIVE = 58                                                                                                                                                         # runtime/autogen/libc.py:4099
                          R_RISCV_NUM = 59                                                                                                                                                               # runtime/autogen/libc.py:4100
                          R_BPF_NONE = 0                                                                                                                                                                 # runtime/autogen/libc.py:4101
                          R_BPF_64_64 = 1                                                                                                                                                                # runtime/autogen/libc.py:4102
                          R_BPF_64_32 = 10                                                                                                                                                               # runtime/autogen/libc.py:4103
                          R_METAG_HIADDR16 = 0                                                                                                                                                           # runtime/autogen/libc.py:4104
                          R_METAG_LOADDR16 = 1                                                                                                                                                           # runtime/autogen/libc.py:4105
                          R_METAG_ADDR32 = 2                                                                                                                                                             # runtime/autogen/libc.py:4106
                          R_METAG_NONE = 3                                                                                                                                                               # runtime/autogen/libc.py:4107
                          R_METAG_RELBRANCH = 4                                                                                                                                                          # runtime/autogen/libc.py:4108
                          R_METAG_GETSETOFF = 5                                                                                                                                                          # runtime/autogen/libc.py:4109
                          R_METAG_REG32OP1 = 6                                                                                                                                                           # runtime/autogen/libc.py:4110
                          R_METAG_REG32OP2 = 7                                                                                                                                                           # runtime/autogen/libc.py:4111
                          R_METAG_REG32OP3 = 8                                                                                                                                                           # runtime/autogen/libc.py:4112
                          R_METAG_REG16OP1 = 9                                                                                                                                                           # runtime/autogen/libc.py:4113
                          R_METAG_REG16OP2 = 10                                                                                                                                                          # runtime/autogen/libc.py:4114
                          R_METAG_REG16OP3 = 11                                                                                                                                                          # runtime/autogen/libc.py:4115
                          R_METAG_REG32OP4 = 12                                                                                                                                                          # runtime/autogen/libc.py:4116
                          R_METAG_HIOG = 13                                                                                                                                                              # runtime/autogen/libc.py:4117
                          R_METAG_LOOG = 14                                                                                                                                                              # runtime/autogen/libc.py:4118
                          R_METAG_REL8 = 15                                                                                                                                                              # runtime/autogen/libc.py:4119
                          R_METAG_REL16 = 16                                                                                                                                                             # runtime/autogen/libc.py:4120
                          R_METAG_GNU_VTINHERIT = 30                                                                                                                                                     # runtime/autogen/libc.py:4121
                          R_METAG_GNU_VTENTRY = 31                                                                                                                                                       # runtime/autogen/libc.py:4122
                          R_METAG_HI16_GOTOFF = 32                                                                                                                                                       # runtime/autogen/libc.py:4123
                          R_METAG_LO16_GOTOFF = 33                                                                                                                                                       # runtime/autogen/libc.py:4124
                          R_METAG_GETSET_GOTOFF = 34                                                                                                                                                     # runtime/autogen/libc.py:4125
                          R_METAG_GETSET_GOT = 35                                                                                                                                                        # runtime/autogen/libc.py:4126
                          R_METAG_HI16_GOTPC = 36                                                                                                                                                        # runtime/autogen/libc.py:4127
                          R_METAG_LO16_GOTPC = 37                                                                                                                                                        # runtime/autogen/libc.py:4128
                          R_METAG_HI16_PLT = 38                                                                                                                                                          # runtime/autogen/libc.py:4129
                          R_METAG_LO16_PLT = 39                                                                                                                                                          # runtime/autogen/libc.py:4130
                          R_METAG_RELBRANCH_PLT = 40                                                                                                                                                     # runtime/autogen/libc.py:4131
                          R_METAG_GOTOFF = 41                                                                                                                                                            # runtime/autogen/libc.py:4132
                          R_METAG_PLT = 42                                                                                                                                                               # runtime/autogen/libc.py:4133
                          R_METAG_COPY = 43                                                                                                                                                              # runtime/autogen/libc.py:4134
                          R_METAG_JMP_SLOT = 44                                                                                                                                                          # runtime/autogen/libc.py:4135
                          R_METAG_RELATIVE = 45                                                                                                                                                          # runtime/autogen/libc.py:4136
                          R_METAG_GLOB_DAT = 46                                                                                                                                                          # runtime/autogen/libc.py:4137
                          R_METAG_TLS_GD = 47                                                                                                                                                            # runtime/autogen/libc.py:4138
                          R_METAG_TLS_LDM = 48                                                                                                                                                           # runtime/autogen/libc.py:4139
                          R_METAG_TLS_LDO_HI16 = 49                                                                                                                                                      # runtime/autogen/libc.py:4140
                          R_METAG_TLS_LDO_LO16 = 50                                                                                                                                                      # runtime/autogen/libc.py:4141
                          R_METAG_TLS_LDO = 51                                                                                                                                                           # runtime/autogen/libc.py:4142
                          R_METAG_TLS_IE = 52                                                                                                                                                            # runtime/autogen/libc.py:4143
                          R_METAG_TLS_IENONPIC = 53                                                                                                                                                      # runtime/autogen/libc.py:4144
                          R_METAG_TLS_IENONPIC_HI16 = 54                                                                                                                                                 # runtime/autogen/libc.py:4145
                          R_METAG_TLS_IENONPIC_LO16 = 55                                                                                                                                                 # runtime/autogen/libc.py:4146
                          R_METAG_TLS_TPOFF = 56                                                                                                                                                         # runtime/autogen/libc.py:4147
                          R_METAG_TLS_DTPMOD = 57                                                                                                                                                        # runtime/autogen/libc.py:4148
                          R_METAG_TLS_DTPOFF = 58                                                                                                                                                        # runtime/autogen/libc.py:4149
                          R_METAG_TLS_LE = 59                                                                                                                                                            # runtime/autogen/libc.py:4150
                          R_METAG_TLS_LE_HI16 = 60                                                                                                                                                       # runtime/autogen/libc.py:4151
                          R_METAG_TLS_LE_LO16 = 61                                                                                                                                                       # runtime/autogen/libc.py:4152
                          R_NDS32_NONE = 0                                                                                                                                                               # runtime/autogen/libc.py:4153
                          R_NDS32_32_RELA = 20                                                                                                                                                           # runtime/autogen/libc.py:4154
                          R_NDS32_COPY = 39                                                                                                                                                              # runtime/autogen/libc.py:4155
                          R_NDS32_GLOB_DAT = 40                                                                                                                                                          # runtime/autogen/libc.py:4156
                          R_NDS32_JMP_SLOT = 41                                                                                                                                                          # runtime/autogen/libc.py:4157
                          R_NDS32_RELATIVE = 42                                                                                                                                                          # runtime/autogen/libc.py:4158
                          R_NDS32_TLS_TPOFF = 102                                                                                                                                                        # runtime/autogen/libc.py:4159
                          R_NDS32_TLS_DESC = 119                                                                                                                                                         # runtime/autogen/libc.py:4160
                          R_ARC_NONE = 0x0                                                                                                                                                               # runtime/autogen/libc.py:4161
                          R_ARC_8 = 0x1                                                                                                                                                                  # runtime/autogen/libc.py:4162
                          R_ARC_16 = 0x2                                                                                                                                                                 # runtime/autogen/libc.py:4163
                          R_ARC_24 = 0x3                                                                                                                                                                 # runtime/autogen/libc.py:4164
                          R_ARC_32 = 0x4                                                                                                                                                                 # runtime/autogen/libc.py:4165
                          R_ARC_B26 = 0x5                                                                                                                                                                # runtime/autogen/libc.py:4166
                          R_ARC_B22_PCREL = 0x6                                                                                                                                                          # runtime/autogen/libc.py:4167
                          R_ARC_H30 = 0x7                                                                                                                                                                # runtime/autogen/libc.py:4168
                          R_ARC_N8 = 0x8                                                                                                                                                                 # runtime/autogen/libc.py:4169
                          R_ARC_N16 = 0x9                                                                                                                                                                # runtime/autogen/libc.py:4170
                          R_ARC_N24 = 0xA                                                                                                                                                                # runtime/autogen/libc.py:4171
                          R_ARC_N32 = 0xB                                                                                                                                                                # runtime/autogen/libc.py:4172
                          R_ARC_SDA = 0xC                                                                                                                                                                # runtime/autogen/libc.py:4173
                          R_ARC_SECTOFF = 0xD                                                                                                                                                            # runtime/autogen/libc.py:4174
                          R_ARC_S21H_PCREL = 0xE                                                                                                                                                         # runtime/autogen/libc.py:4175
                          R_ARC_S21W_PCREL = 0xF                                                                                                                                                         # runtime/autogen/libc.py:4176
                          R_ARC_S25H_PCREL = 0x10                                                                                                                                                        # runtime/autogen/libc.py:4177
                          R_ARC_S25W_PCREL = 0x11                                                                                                                                                        # runtime/autogen/libc.py:4178
                          R_ARC_SDA32 = 0x12                                                                                                                                                             # runtime/autogen/libc.py:4179
                          R_ARC_SDA_LDST = 0x13                                                                                                                                                          # runtime/autogen/libc.py:4180
                          R_ARC_SDA_LDST1 = 0x14                                                                                                                                                         # runtime/autogen/libc.py:4181
                          R_ARC_SDA_LDST2 = 0x15                                                                                                                                                         # runtime/autogen/libc.py:4182
                          R_ARC_SDA16_LD = 0x16                                                                                                                                                          # runtime/autogen/libc.py:4183
                          R_ARC_SDA16_LD1 = 0x17                                                                                                                                                         # runtime/autogen/libc.py:4184
                          R_ARC_SDA16_LD2 = 0x18                                                                                                                                                         # runtime/autogen/libc.py:4185
                          R_ARC_S13_PCREL = 0x19                                                                                                                                                         # runtime/autogen/libc.py:4186
                          R_ARC_W = 0x1A                                                                                                                                                                 # runtime/autogen/libc.py:4187
                          R_ARC_32_ME = 0x1B                                                                                                                                                             # runtime/autogen/libc.py:4188
                          R_ARC_N32_ME = 0x1C                                                                                                                                                            # runtime/autogen/libc.py:4189
                          R_ARC_SECTOFF_ME = 0x1D                                                                                                                                                        # runtime/autogen/libc.py:4190
                          R_ARC_SDA32_ME = 0x1E                                                                                                                                                          # runtime/autogen/libc.py:4191
                          R_ARC_W_ME = 0x1F                                                                                                                                                              # runtime/autogen/libc.py:4192
                          R_ARC_H30_ME = 0x20                                                                                                                                                            # runtime/autogen/libc.py:4193
                          R_ARC_SECTOFF_U8 = 0x21                                                                                                                                                        # runtime/autogen/libc.py:4194
                          R_ARC_SECTOFF_S9 = 0x22                                                                                                                                                        # runtime/autogen/libc.py:4195
                          R_AC_SECTOFF_U8 = 0x23                                                                                                                                                         # runtime/autogen/libc.py:4196
                          R_AC_SECTOFF_U8_1 = 0x24                                                                                                                                                       # runtime/autogen/libc.py:4197
                          R_AC_SECTOFF_U8_2 = 0x25                                                                                                                                                       # runtime/autogen/libc.py:4198
                          R_AC_SECTOFF_S9 = 0x26                                                                                                                                                         # runtime/autogen/libc.py:4199
                          R_AC_SECTOFF_S9_1 = 0x27                                                                                                                                                       # runtime/autogen/libc.py:4200
                          R_AC_SECTOFF_S9_2 = 0x28                                                                                                                                                       # runtime/autogen/libc.py:4201
                          R_ARC_SECTOFF_ME_1 = 0x29                                                                                                                                                      # runtime/autogen/libc.py:4202
                          R_ARC_SECTOFF_ME_2 = 0x2A                                                                                                                                                      # runtime/autogen/libc.py:4203
                          R_ARC_SECTOFF_1 = 0x2B                                                                                                                                                         # runtime/autogen/libc.py:4204
                          R_ARC_SECTOFF_2 = 0x2C                                                                                                                                                         # runtime/autogen/libc.py:4205
                          R_ARC_PC32 = 0x32                                                                                                                                                              # runtime/autogen/libc.py:4206
                          R_ARC_GOTPC32 = 0x33                                                                                                                                                           # runtime/autogen/libc.py:4207
                          R_ARC_PLT32 = 0x34                                                                                                                                                             # runtime/autogen/libc.py:4208
                          R_ARC_COPY = 0x35                                                                                                                                                              # runtime/autogen/libc.py:4209
                          R_ARC_GLOB_DAT = 0x36                                                                                                                                                          # runtime/autogen/libc.py:4210
                          R_ARC_JUMP_SLOT = 0x37                                                                                                                                                         # runtime/autogen/libc.py:4211
                          R_ARC_RELATIVE = 0x38                                                                                                                                                          # runtime/autogen/libc.py:4212
                          R_ARC_GOTOFF = 0x39                                                                                                                                                            # runtime/autogen/libc.py:4213
                          R_ARC_GOTPC = 0x3A                                                                                                                                                             # runtime/autogen/libc.py:4214
                          R_ARC_GOT32 = 0x3B                                                                                                                                                             # runtime/autogen/libc.py:4215
                          R_ARC_TLS_DTPMOD = 0x42                                                                                                                                                        # runtime/autogen/libc.py:4216
                          R_ARC_TLS_DTPOFF = 0x43                                                                                                                                                        # runtime/autogen/libc.py:4217
                          R_ARC_TLS_TPOFF = 0x44                                                                                                                                                         # runtime/autogen/libc.py:4218
                          R_ARC_TLS_GD_GOT = 0x45                                                                                                                                                        # runtime/autogen/libc.py:4219
                          R_ARC_TLS_GD_LD = 0x46                                                                                                                                                         # runtime/autogen/libc.py:4220
                          R_ARC_TLS_GD_CALL = 0x47                                                                                                                                                       # runtime/autogen/libc.py:4221
                          R_ARC_TLS_IE_GOT = 0x48                                                                                                                                                        # runtime/autogen/libc.py:4222
                          R_ARC_TLS_DTPOFF_S9 = 0x4a                                                                                                                                                     # runtime/autogen/libc.py:4223
                          R_ARC_TLS_LE_S9 = 0x4a                                                                                                                                                         # runtime/autogen/libc.py:4224
                          R_ARC_TLS_LE_32 = 0x4b                                                                                                                                                         # runtime/autogen/libc.py:4225
                          R_OR1K_NONE = 0                                                                                                                                                                # runtime/autogen/libc.py:4226
                          R_OR1K_32 = 1                                                                                                                                                                  # runtime/autogen/libc.py:4227
                          R_OR1K_16 = 2                                                                                                                                                                  # runtime/autogen/libc.py:4228
                          R_OR1K_8 = 3                                                                                                                                                                   # runtime/autogen/libc.py:4229
                          R_OR1K_LO_16_IN_INSN = 4                                                                                                                                                       # runtime/autogen/libc.py:4230
                          R_OR1K_HI_16_IN_INSN = 5                                                                                                                                                       # runtime/autogen/libc.py:4231
                          R_OR1K_INSN_REL_26 = 6                                                                                                                                                         # runtime/autogen/libc.py:4232
                          R_OR1K_GNU_VTENTRY = 7                                                                                                                                                         # runtime/autogen/libc.py:4233
                          R_OR1K_GNU_VTINHERIT = 8                                                                                                                                                       # runtime/autogen/libc.py:4234
                          R_OR1K_32_PCREL = 9                                                                                                                                                            # runtime/autogen/libc.py:4235
                          R_OR1K_16_PCREL = 10                                                                                                                                                           # runtime/autogen/libc.py:4236
                          R_OR1K_8_PCREL = 11                                                                                                                                                            # runtime/autogen/libc.py:4237
                          R_OR1K_GOTPC_HI16 = 12                                                                                                                                                         # runtime/autogen/libc.py:4238
                          R_OR1K_GOTPC_LO16 = 13                                                                                                                                                         # runtime/autogen/libc.py:4239
                          R_OR1K_GOT16 = 14                                                                                                                                                              # runtime/autogen/libc.py:4240
                          R_OR1K_PLT26 = 15                                                                                                                                                              # runtime/autogen/libc.py:4241
                          R_OR1K_GOTOFF_HI16 = 16                                                                                                                                                        # runtime/autogen/libc.py:4242
                          R_OR1K_GOTOFF_LO16 = 17                                                                                                                                                        # runtime/autogen/libc.py:4243
                          R_OR1K_COPY = 18                                                                                                                                                               # runtime/autogen/libc.py:4244
                          R_OR1K_GLOB_DAT = 19                                                                                                                                                           # runtime/autogen/libc.py:4245
                          R_OR1K_JMP_SLOT = 20                                                                                                                                                           # runtime/autogen/libc.py:4246
                          R_OR1K_RELATIVE = 21                                                                                                                                                           # runtime/autogen/libc.py:4247
                          R_OR1K_TLS_GD_HI16 = 22                                                                                                                                                        # runtime/autogen/libc.py:4248
                          R_OR1K_TLS_GD_LO16 = 23                                                                                                                                                        # runtime/autogen/libc.py:4249
                          R_OR1K_TLS_LDM_HI16 = 24                                                                                                                                                       # runtime/autogen/libc.py:4250
                          R_OR1K_TLS_LDM_LO16 = 25                                                                                                                                                       # runtime/autogen/libc.py:4251
                          R_OR1K_TLS_LDO_HI16 = 26                                                                                                                                                       # runtime/autogen/libc.py:4252
                          R_OR1K_TLS_LDO_LO16 = 27                                                                                                                                                       # runtime/autogen/libc.py:4253
                          R_OR1K_TLS_IE_HI16 = 28                                                                                                                                                        # runtime/autogen/libc.py:4254
                          R_OR1K_TLS_IE_LO16 = 29                                                                                                                                                        # runtime/autogen/libc.py:4255
                          R_OR1K_TLS_LE_HI16 = 30                                                                                                                                                        # runtime/autogen/libc.py:4256
                          R_OR1K_TLS_LE_LO16 = 31                                                                                                                                                        # runtime/autogen/libc.py:4257
                          R_OR1K_TLS_TPOFF = 32                                                                                                                                                          # runtime/autogen/libc.py:4258
                          R_OR1K_TLS_DTPOFF = 33                                                                                                                                                         # runtime/autogen/libc.py:4259
                          R_OR1K_TLS_DTPMOD = 34                                                                                                                                                         # runtime/autogen/libc.py:4260

                          MAP_LOCKED, MAP_POPULATE = 0 if OSX else 0x2000, getattr(mmap, "MAP_POPULATE", 0 if OSX else 0x008000)                                                                         # runtime/ops_disk.py:16

                          class DiskDevice(Compiled):                                                                                                                                                    # runtime/ops_disk.py:68
                            _tried_io_uring_init = False                                                                                                                                                 # runtime/ops_disk.py:69

                            class DiskDevice(Compiled):                                                                                                                                                  # runtime/ops_disk.py:68
                              def __init__(self, device:str):                                                                                                                                            # runtime/ops_disk.py:71
                                if not DiskDevice._tried_io_uring_init: self._iouring_setup()                                                                                                            # runtime/ops_disk.py:72

                                  class DiskDevice(Compiled):                                                                                                                                            # runtime/ops_disk.py:68
                                    def _iouring_setup(self):                                                                                                                                            # runtime/ops_disk.py:100
                                      DiskDevice._tried_io_uring_init = True                                                                                                                             # runtime/ops_disk.py:101
                                      if platform.system() != 'Linux' or hasattr(sys, "getandroidapilevel"): return                                                                                      # runtime/ops_disk.py:103
                                      fd = libc.syscall(io_uring.NR_io_uring_setup, 4096, ctypes.byref(p:=io_uring.struct_io_uring_params()))                                                            # runtime/ops_disk.py:105

                                        class Structure(ctypes.Structure, AsDictMixin):                                                                                                                  # runtime/autogen/io_uring.py:54
                                            def __init__(self, *args, **kwds):                                                                                                                           # runtime/autogen/io_uring.py:56
                                                args = dict(zip(self.__class__._field_names_(), args))                                                                                                   # runtime/autogen/io_uring.py:59

                                                  class Structure(ctypes.Structure, AsDictMixin):                                                                                                        # runtime/autogen/io_uring.py:54
                                                      @classmethod                                                                                                                                       # runtime/autogen/io_uring.py:64
                                                      def _field_names_(cls):
                                                          if hasattr(cls, '_fields_'):                                                                                                                   # runtime/autogen/io_uring.py:65
                                                              return (f[0] for f in cls._fields_ if not f[0].startswith('PADDING'))                                                                      # runtime/autogen/io_uring.py:66

                                                args.update(kwds)                                                                                                                                        # runtime/autogen/io_uring.py:60
                                                super(Structure, self).__init__(**args)                                                                                                                  # runtime/autogen/io_uring.py:61

                                      if fd < 0: return                                                                                                                                                  # runtime/ops_disk.py:106
                                      sq_ptr = libc.mmap(0, p.sq_off.array + p.sq_entries * 4, mmap.PROT_READ | mmap.PROT_WRITE, mmap.MAP_SHARED | MAP_POPULATE, fd, 0)                                  # runtime/ops_disk.py:108
                                      cq_ptr = libc.mmap(0, p.cq_off.cqes + p.cq_entries * ctypes.sizeof(io_uring.struct_io_uring_cqe),                                                                  # runtime/ops_disk.py:109
                                                         mmap.PROT_READ | mmap.PROT_WRITE, mmap.MAP_SHARED | MAP_POPULATE, fd, io_uring.IORING_OFF_CQ_RING)
                                      sqes = libc.mmap(0, p.sq_entries * ctypes.sizeof(io_uring.struct_io_uring_sqe),                                                                                    # runtime/ops_disk.py:111
                                                       mmap.PROT_READ | mmap.PROT_WRITE, mmap.MAP_SHARED | MAP_POPULATE, fd, io_uring.IORING_OFF_SQES)
                                      sqdesc = io_uring.struct_io_uring_sq(khead=u32ptr(sq_ptr+p.sq_off.head), ktail=u32ptr(sq_ptr+p.sq_off.tail), array=u32ptr(sq_ptr+p.sq_off.array),                  # runtime/ops_disk.py:115
                                        kring_mask=u32ptr(sq_ptr+p.sq_off.ring_mask), sqes=ctypes.cast(sqes, ctypes.POINTER(io_uring.struct_io_uring_sqe)))

                                          def _iouring_setup(self):                                                                                                                                      # runtime/ops_disk.py:100
                                        class DiskDevice(Compiled):                                                                                                                                      # runtime/ops_disk.py:68
                                            def u32ptr(val): return ctypes.cast(val, ctypes.POINTER(ctypes.c_uint32))                                                                                    # runtime/ops_disk.py:114

                                      cqdesc = io_uring.struct_io_uring_cq(khead=u32ptr(cq_ptr+p.cq_off.head), ktail=u32ptr(cq_ptr+p.cq_off.tail),                                                       # runtime/ops_disk.py:118
                                        kring_mask=u32ptr(sq_ptr+p.cq_off.ring_mask), cqes=ctypes.cast(cq_ptr+p.cq_off.cqes, ctypes.POINTER(io_uring.struct_io_uring_cqe)))

                                      DiskDevice.io_uring = io_uring.struct_io_uring(ring_fd=fd, sq=sqdesc, cq=cqdesc) # type: ignore                                                                    # runtime/ops_disk.py:121

                                self.size: Optional[int] = None                                                                                                                                          # runtime/ops_disk.py:74
                                self.count = 0                                                                                                                                                           # runtime/ops_disk.py:75
                                super().__init__(device, DiskAllocator(self), None, None, None)                                                                                                          # runtime/ops_disk.py:76

                                  class DiskAllocator(Allocator):                                                                                                                                        # runtime/ops_disk.py:17
                                    def __init__(self, device:DiskDevice): self.device = device                                                                                                          # runtime/ops_disk.py:18

                            # TODO: size, dest, src are the same type. can we enforce this?                                                                                                              # device.py:133
                            class Allocator:
                              def alloc(self, size:int, options:Optional[BufferOptions]=None):                                                                                                           # device.py:134
                                assert not isinstance(size, int) or size > 0, f"alloc size must be positve, getting {size}"                                                                              # device.py:135
                                return self._alloc(size, options if options is not None else BufferOptions())                                                                                            # device.py:136

                                  class DiskAllocator(Allocator):                                                                                                                                        # runtime/ops_disk.py:17
                                    def _alloc(self, size:int, options):                                                                                                                                 # runtime/ops_disk.py:19
                                      self.device._might_open(size)                                                                                                                                      # runtime/ops_disk.py:20

                                        class DiskDevice(Compiled):                                                                                                                                      # runtime/ops_disk.py:68
                                          def _might_open(self, size):                                                                                                                                   # runtime/ops_disk.py:77
                                            self.count += 1                                                                                                                                              # runtime/ops_disk.py:78
                                            assert self.size is None or size <= self.size, f"can't reopen Disk tensor with larger size, opened with {self.size}, tried to open with {size}"              # runtime/ops_disk.py:79
                                            if self.size is not None: return                                                                                                                             # runtime/ops_disk.py:80
                                            filename = self.dname[len("disk:"):]                                                                                                                         # runtime/ops_disk.py:81
                                            self.size = size                                                                                                                                             # runtime/ops_disk.py:82
                                            if filename.startswith("shm:"):                                                                                                                              # runtime/ops_disk.py:84
                                              try: self.fd = os.open(filename, os.O_RDWR|os.O_CREAT|(0 if OSX else os.O_DIRECT))                                                                         # runtime/ops_disk.py:89
                                              if os.fstat(self.fd).st_size < self.size: os.ftruncate(self.fd, self.size)                                                                                 # runtime/ops_disk.py:91
                                              self.mem = mmap.mmap(self.fd, self.size)                                                                                                                   # runtime/ops_disk.py:92
                                            if (hp := getattr(mmap, "MADV_HUGEPAGE", None)) is not None:                                                                                                 # runtime/ops_disk.py:93
                                              with contextlib.suppress(OSError): self.mem.madvise(hp) # some systems have transparent_hugepage disabled                                                  # runtime/ops_disk.py:94

                                      return DiskBuffer(self.device, size)                                                                                                                               # runtime/ops_disk.py:21

                                        class DiskBuffer:                                                                                                                                                # runtime/ops_disk.py:8
                                          def __init__(self, device:DiskDevice, size:int, offset=0):                                                                                                     # runtime/ops_disk.py:9
                                            self.device, self.size, self.offset = device, size, offset                                                                                                   # runtime/ops_disk.py:10

                            et = self.prg(bufs, var_vals if var_vals is not None else {}, wait=wait or DEBUG >= 2)                                                                                       # engine/realize.py:172

                              class EmptyOp(Runner):                                                                                                                                                     # engine/realize.py:111
                                def __call__(self, rawbufs:List[Buffer], var_vals:Dict[Variable, int], wait=False): pass                                                                                 # engine/realize.py:113

                            if do_update_stats:                                                                                                                                                          # engine/realize.py:173
                              GlobalCounters.kernel_count += 1                                                                                                                                           # engine/realize.py:174
                              GlobalCounters.global_ops += (op_est:=sym_infer(self.prg.op_estimate, var_vals))                                                                                           # engine/realize.py:175

                                def sym_infer(a: Union[Node, int], var_vals: Optional[Dict[Variable, int]]) -> int:                                                                                      # shape/symbolic.py:297
                                  if isinstance(a, (int, float)): return a                                                                                                                               # shape/symbolic.py:298

                              GlobalCounters.global_mem += (mem_est:=sym_infer(self.prg.mem_estimate, var_vals))                                                                                         # engine/realize.py:176

                              if et is not None: GlobalCounters.time_sum_s += et                                                                                                                         # engine/realize.py:177
                              if DEBUG >= 2:                                                                                                                                                             # engine/realize.py:178

                              self.prg.first_run = False                                                                                                                                                 # engine/realize.py:184
                            return et                                                                                                                                                                    # engine/realize.py:185

                    def lower_schedule_item(si:ScheduleItem) -> ExecItem:                                                                                                                                # engine/realize.py:187
                      assert len(set(x.device for x in si.bufs)) == 1 or si.ast.op is MetaOps.COPY or getenv("USE_COPY_KERNEL")                                                                    # OLD # engine/realize.py:188
                      if si.ast.op is MetaOps.KERNEL:                                                                                                                                              # OLD # engine/realize.py:189
                      out = si.outputs[0]                                                                                                                                                          # OLD # engine/realize.py:192
                      if si.ast.op is MetaOps.COPY:                                                                                                                                                # OLD # engine/realize.py:193
                      if si.ast.op is MetaOps.CUSTOM: return ExecItem(CustomOp(si.ast.arg), list(si.bufs))                                                                                         # OLD # engine/realize.py:198
                      if si.ast.op is MetaOps.EMPTY: return ExecItem(EmptyOp(out), list(si.bufs))                                                                                                  # OLD # engine/realize.py:199
                      if si.ast.op is MetaOps.VIEW: return ExecItem(ViewOp(out), list(si.bufs))                                                                                                          # engine/realize.py:200

                        class ViewOp(Runner):                                                                                                                                                            # engine/realize.py:115
                          def __init__(self, buf:Buffer): super().__init__(colored(f"view {buf.nbytes:8d} @ {buf.offset:<10d}", "yellow"), buf.device)                                                   # engine/realize.py:116

                    class Buffer:                                                                                                                                                                        # device.py:53
                      def allocate(self, opaque=None) -> Buffer:                                                                                                                                         # device.py:79
                        assert not hasattr(self, '_buf'), "can't allocate already allocated buffer"                                                                                                # OLD # device.py:80
                        self.allocator = Device[self.device].allocator                                                                                                                             # OLD # device.py:81
                        if self._base is not None:                                                                                                                                                 # OLD # device.py:82
                          self._base.ensure_allocated()                                                                                                                                                  # device.py:83

                          assert hasattr(self.allocator, "offset"), "offset function required for view"                                                                                                  # device.py:84
                          self._buf: Any = self.allocator.offset(self.base._buf, self.nbytes, self.offset)                                                                                               # device.py:85

                            class DiskAllocator(Allocator):                                                                                                                                              # runtime/ops_disk.py:17
                              def offset(self, buf:DiskBuffer, size:int, offset:int): return DiskBuffer(buf.device, size, offset)                                                                        # runtime/ops_disk.py:66

                    class ViewOp(Runner):                                                                                                                                                                # engine/realize.py:115
                      def __call__(self, rawbufs:List[Buffer], var_vals:Dict[Variable, int], wait=False):                                                                                                # engine/realize.py:117
                        assert rawbufs[0]._base is not None and rawbufs[0]._base == rawbufs[1].base, f"must be base {rawbufs}"                                                                           # engine/realize.py:118

                    def lower_schedule_item(si:ScheduleItem) -> ExecItem:                                                                                                                                # engine/realize.py:187
                      assert len(set(x.device for x in si.bufs)) == 1 or si.ast.op is MetaOps.COPY or getenv("USE_COPY_KERNEL")                                                                    # OLD # engine/realize.py:188
                      if si.ast.op is MetaOps.KERNEL:                                                                                                                                              # OLD # engine/realize.py:189
                      out = si.outputs[0]                                                                                                                                                          # OLD # engine/realize.py:192
                      if si.ast.op is MetaOps.COPY:                                                                                                                                                # OLD # engine/realize.py:193
                        kernel_type = BufferCopy                                                                                                                                                         # engine/realize.py:194
                        if hasattr(Device[out.device].allocator, 'transfer') and out.device.split(":")[0] == si.inputs[0].device.split(":")[0]:                                                          # engine/realize.py:195

                    import ctypes, subprocess, pathlib, tempfile                                                                                                                                         # runtime/ops_clang.py:1
                    from tinygrad.device import Compiled, Compiler, MallocAllocator                                                                                                                      # runtime/ops_clang.py:2
                    from tinygrad.helpers import cpu_time_execution, DEBUG, cpu_objdump                                                                                                                  # runtime/ops_clang.py:3
                    from tinygrad.renderer.cstyle import ClangRenderer                                                                                                                                   # runtime/ops_clang.py:4
                    from typing import Dict, List, Optional, Tuple, Union, DefaultDict, cast, Literal, Callable                                                                                          # renderer/cstyle.py:1
                    import os, math                                                                                                                                                                      # renderer/cstyle.py:2
                    from collections import defaultdict, Counter                                                                                                                                         # renderer/cstyle.py:3
                    from tinygrad.ops import UnaryOps, BinaryOps, TernaryOps                                                                                                                             # renderer/cstyle.py:4
                    from tinygrad.helpers import strip_parens, getenv, prod, dedup                                                                                                                       # renderer/cstyle.py:5
                    from tinygrad.dtype import ImageDType, dtypes, DType, PtrDType, ConstType                                                                                                            # renderer/cstyle.py:6
                    from tinygrad.codegen.uops import UOps, UOp                                                                                                                                          # renderer/cstyle.py:7
                    from tinygrad.renderer import Renderer, TensorCore                                                                                                                                   # renderer/cstyle.py:8

                    class CStyleLanguage(Renderer):                                                                                                                                                      # renderer/cstyle.py:10
                      kernel_prefix: str = ""                                                                                                                                                            # renderer/cstyle.py:11
                      buffer_prefix: str = ""                                                                                                                                                            # renderer/cstyle.py:12
                      buffer_suffix: str = ""                                                                                                                                                            # renderer/cstyle.py:13
                      smem_align: str = ""                                                                                                                                                               # renderer/cstyle.py:14
                      smem_prefix: str = ""                                                                                                                                                              # renderer/cstyle.py:15
                      smem_prefix_for_cast: bool = True                                                                                                                                                  # renderer/cstyle.py:16
                      arg_int_prefix: str = "const int"                                                                                                                                                  # renderer/cstyle.py:17
                      barrier: str = ""                                                                                                                                                                  # renderer/cstyle.py:18
                      code_for_workitem: Dict[Union[Literal["g"], Literal["l"], Literal["i"]], Callable] = {}                                                                                            # renderer/cstyle.py:19
                      extra_args: List[str] = []                                                                                                                                                         # renderer/cstyle.py:20
                      float4: Optional[str] = None                                                                                                                                                       # renderer/cstyle.py:21
                      uses_vload: bool = False                                                                                                                                                           # renderer/cstyle.py:22
                      uses_ptr_arithmetic: bool = False                                                                                                                                                  # renderer/cstyle.py:23
                      type_map: Dict[DType, str] = {}                                                                                                                                                    # renderer/cstyle.py:24
                      code_for_op: Dict = {                                                                                                                                                              # renderer/cstyle.py:25
                        UnaryOps.NEG: lambda x,dtype: f"(!{x})" if dtype == dtypes.bool else f"(-{x})", UnaryOps.SQRT: lambda x,dtype: f"sqrt({x})",
                        UnaryOps.RECIP: lambda x,dtype: f"(1/{x})",
                        UnaryOps.EXP2: lambda x,dtype: f"exp2({x})", UnaryOps.LOG2: lambda x,dtype: f"log2({x})", UnaryOps.SIN: lambda x,dtype: f"sin({x})",
                        BinaryOps.ADD: lambda a,b,dtype: f"({a}+{b})", BinaryOps.MAX: lambda a,b,dtype: f"max({a},{b})",
                        BinaryOps.IDIV: lambda a,b,dtype: f"({a}/{b})", BinaryOps.MUL: lambda a,b,dtype: f"({a}*{b})", BinaryOps.MOD: lambda a,b,dtype: f"({a}%{b})",
                        BinaryOps.CMPLT: lambda a,b,dtype: f"({a}<{b})", BinaryOps.CMPNE: lambda a,b,dtype: f"({a}!={b})", BinaryOps.XOR: lambda a,b,dtype: f"({a}^{b})",
                        BinaryOps.AND: lambda a,b,dtype: f"({a}&{b})", BinaryOps.OR: lambda a,b,dtype: f"({a}|{b})",
                        TernaryOps.WHERE: lambda a,b,c,dtype: f"({a}?{b}:{c})"}

                    class ClangRenderer(CStyleLanguage):                                                                                                                                                 # renderer/cstyle.py:189
                      device = "CLANG"                                                                                                                                                                   # renderer/cstyle.py:190
                      supports_float4 = False                                                                                                                                                            # renderer/cstyle.py:191
                      has_local = False                                                                                                                                                                  # renderer/cstyle.py:192
                      global_max = None                                                                                                                                                                  # renderer/cstyle.py:193
                      buffer_suffix = " restrict"                                                                                                                                                        # renderer/cstyle.py:196
                      type_map = {dtypes.bool:"_Bool", dtypes.half:"__fp16"}                                                                                                                             # renderer/cstyle.py:197
                      code_for_op = {**CStyleLanguage().code_for_op, BinaryOps.MAX: lambda a,b,dtype: f"(({a}>{b})?{a}:{b})"}                                                                            # renderer/cstyle.py:198

                    class OpenCLRenderer(CStyleLanguage):                                                                                                                                                # renderer/cstyle.py:200
                      device = "GPU"                                                                                                                                                                     # renderer/cstyle.py:201
                      kernel_prefix = "__kernel "                                                                                                                                                        # renderer/cstyle.py:204
                      buffer_prefix = "__global "                                                                                                                                                        # renderer/cstyle.py:205
                      smem_align = "__attribute__ ((aligned (16))) "                                                                                                                                     # renderer/cstyle.py:206
                      smem_prefix = "__local "                                                                                                                                                           # renderer/cstyle.py:207
                      barrier = "barrier(CLK_LOCAL_MEM_FENCE);"                                                                                                                                          # renderer/cstyle.py:208
                      float4 = "(float4)"                                                                                                                                                                # renderer/cstyle.py:209
                      code_for_workitem = {"g": lambda x: f"get_group_id({x})", "l": lambda x: f"get_local_id({x})", "i": lambda x: f"get_global_id({x})"}                                               # renderer/cstyle.py:210
                      uses_vload = True                                                                                                                                                                  # renderer/cstyle.py:211
                      type_map = { dtypes.uint8: "uchar", dtypes.uint32: "uint", dtypes.uint16: "ushort", dtypes.uint64: "ulong" }                                                                       # renderer/cstyle.py:212

                    class MetalRenderer(CStyleLanguage):                                                                                                                                                 # renderer/cstyle.py:220
                      device = "METAL"                                                                                                                                                                   # renderer/cstyle.py:221
                      shared_max = 32768                                                                                                                                                                 # renderer/cstyle.py:222
                      tensor_cores = [TensorCore(dims=(8,8,8), threads=[(0,2),(1,4),(0,2),(1,2)], dtype_in=di, dtype_out=do) for (di, do) in [(dtypes.float, dtypes.float), (dtypes.half, dtypes.float), (dtypes.half, dtypes.half)]] # noqa: E501 # renderer/cstyle.py:223
                      kernel_prefix = "kernel "                                                                                                                                                          # renderer/cstyle.py:227
                      buffer_prefix = "device "                                                                                                                                                          # renderer/cstyle.py:228
                      smem_prefix = "threadgroup "                                                                                                                                                       # renderer/cstyle.py:229
                      arg_int_prefix = "constant int&"                                                                                                                                                   # renderer/cstyle.py:230
                      barrier = "threadgroup_barrier(mem_flags::mem_threadgroup);"                                                                                                                       # renderer/cstyle.py:231
                      float4 = "float4"                                                                                                                                                                  # renderer/cstyle.py:232
                      uses_ptr_arithmetic = True                                                                                                                                                         # renderer/cstyle.py:233
                      code_for_workitem = {"g": lambda x: f"gid.{chr(120+int(x))}", "l": lambda x: f"lid.{chr(120+int(x))}"}                                                                             # renderer/cstyle.py:234
                      extra_args = ['uint3 gid [[threadgroup_position_in_grid]]', 'uint3 lid [[thread_position_in_threadgroup]]']                                                                        # renderer/cstyle.py:236
                      type_map = {dtypes.bfloat16: "bfloat"}                                                                                                                                             # renderer/cstyle.py:237
                      code_for_op = {**CStyleLanguage().code_for_op,                                                                                                                                     # renderer/cstyle.py:238
                        BinaryOps.MAX: lambda a,b,dtype: f"(bfloat)max((float){a},(float){b})" if dtype == dtypes.bfloat16 else f"max({a},{b})",
                        UnaryOps.SQRT: lambda x,dtype: f"(bfloat)sqrt({x})" if dtype == dtypes.bfloat16 else f"sqrt({x})",
                        UnaryOps.EXP2: lambda x,dtype: f"(bfloat)exp2({x})" if dtype == dtypes.bfloat16 else f"exp2({x})",
                        UnaryOps.LOG2: lambda x,dtype: f"(bfloat)log2({x})" if dtype == dtypes.bfloat16 else f"log2({x})",
                        UnaryOps.SIN: lambda x,dtype: f"(bfloat)precise::sin({x})" if dtype == dtypes.bfloat16 else f"precise::sin({x})",}

                    code_for_op_half = {UnaryOps.RECIP: lambda x,dtype: f"hrcp({x})" if dtype in (dtypes.half, dtypes.bfloat16) else f"1/{x}",                                                           # renderer/cstyle.py:256
                                        BinaryOps.MAX: lambda a,b,dtype: f"__hmax({a},{b})" if dtype in (dtypes.half, dtypes.bfloat16) else f"max({a},{b})",
                                        UnaryOps.SQRT: lambda x,dtype: f"hsqrt({x})" if dtype in (dtypes.half, dtypes.bfloat16) else f"sqrt({x})",
                                        UnaryOps.SIN: lambda x,dtype: f"hsin({x})" if dtype in (dtypes.half, dtypes.bfloat16) else f"sin({x})",
                                        UnaryOps.LOG2: lambda x,dtype: f"hlog2({x})" if dtype in (dtypes.half, dtypes.bfloat16) else f"log2({x})",
                                        UnaryOps.EXP2: lambda x,dtype: f"hexp2({x})" if dtype in (dtypes.half, dtypes.bfloat16) else f"exp2({x})",}
                    _nms = "xyzwabcdefghijkl"                                                                                                                                                            # renderer/cstyle.py:263

                    class CUDARenderer(CStyleLanguage):                                                                                                                                                  # renderer/cstyle.py:268
                      device = "CUDA"                                                                                                                                                                    # renderer/cstyle.py:269
                      global_max = (2147483647, 65535, 65535)                                                                                                                                            # renderer/cstyle.py:270
                      local_max = (1024, 1024, 64)                                                                                                                                                       # renderer/cstyle.py:271
                      shared_max = 49152                                                                                                                                                                 # renderer/cstyle.py:272
                      tensor_cores = [TensorCore(dims=(8,16,16), threads=[(0,2),(0,2),(1,2),(1,2),(1,2)], dtype_in=di, dtype_out=do) for (di, do) in ([(dtypes.half, dtypes.float), (dtypes.bfloat16, dtypes.float)])]  # noqa: E501 # renderer/cstyle.py:273
                      kernel_prefix = "extern \"C\" __global__ "                                                                                                                                         # renderer/cstyle.py:277
                      smem_prefix = "__shared__ "                                                                                                                                                        # renderer/cstyle.py:278
                      smem_prefix_for_cast = False                                                                                                                                                       # renderer/cstyle.py:279
                      barrier = "__syncthreads();"                                                                                                                                                       # renderer/cstyle.py:280
                      float4 = "make_float4"                                                                                                                                                             # renderer/cstyle.py:281
                      code_for_workitem = {"g": lambda x: f"blockIdx.{chr(120+int(x))}", "l": lambda x: f"threadIdx.{chr(120+int(x))}",                                                                  # renderer/cstyle.py:282
                                           "i": lambda x: f"(blockIdx.{chr(120+int(x))}*blockDim.{chr(120+x)}+threadIdx.{chr(120+int(x))})"}
                      code_for_op = {**CStyleLanguage().code_for_op, **code_for_op_half}                                                                                                                 # renderer/cstyle.py:284
                      type_map = {dtypes.bfloat16: "nv_bfloat16"}                                                                                                                                        # renderer/cstyle.py:285

                    code_for_op_hip = { UnaryOps.SQRT: lambda x,dtype: f"__ocml_sqrt_f{ {dtypes.half:16, dtypes.double:64}.get(dtype, 32)}({x})",                                                        # renderer/cstyle.py:314
                                        UnaryOps.SIN: lambda x,dtype: f"__ocml_sin_f{ {dtypes.half:16, dtypes.double:64}.get(dtype, 32)}({x})",
                                        UnaryOps.LOG2: lambda x,dtype: f"__ocml_log2_f{ {dtypes.half:16, dtypes.double:64}.get(dtype, 32)}({x})",
                                        UnaryOps.EXP2: lambda x,dtype: f"__ocml_exp2_f{ {dtypes.half:16, dtypes.double:64}.get(dtype, 32)}({x})",
                                        # TODO: MAX with int uses fmax_f32?
                                        BinaryOps.MAX: lambda a,b,dtype: f"__ocml_fmax_f{ {dtypes.half:16, dtypes.double:64}.get(dtype, 32) }({a},{b})",}

                    class AMDRenderer(CStyleLanguage):                                                                                                                                                   # renderer/cstyle.py:336
                      device = "AMD"                                                                                                                                                                     # renderer/cstyle.py:337
                      shared_max = 65536                                                                                                                                                                 # renderer/cstyle.py:338
                      tensor_cores = [TensorCore(dims=(16,16,16), threads=[(0,8),(0,2),(1,2)], dtype_in=di, dtype_out=do) for (di, do) in [(dtypes.half, dtypes.float), (dtypes.half, dtypes.half)]] # noqa: E501 # renderer/cstyle.py:339
                      kernel_prefix = """extern "C" __attribute__((device)) __attribute__((const)) size_t __ockl_get_local_id(unsigned int);                                                             # renderer/cstyle.py:342
                    extern "C" __attribute__((device)) __attribute__((const)) size_t __ockl_get_group_id(unsigned int);
                    extern "C" __attribute__((device)) __attribute__((const)) size_t __ockl_get_local_size(unsigned int);
                    extern "C" {\n""" + "".join([
                    f"""  __attribute__((device)) __attribute__((const)) {dt} __ocml_fmax_f{n}({dt}, {dt});
                      __attribute__((device)) __attribute__((pure)) {dt} __ocml_exp2_f{n}({dt});
                      __attribute__((device)) __attribute__((pure)) {dt} __ocml_log2_f{n}({dt});
                      __attribute__((device)) __attribute__((const)) {dt} __ocml_sqrt_f{n}({dt});
                      __attribute__((device)) {dt} __ocml_sin_f{n}({dt});\n""" for dt,n in [("float",32), ("double",64), ("_Float16",16)]]) +\
                    '}\nextern "C" __attribute__((global))'
                      code_for_workitem = {"g": lambda x: f"__ockl_get_group_id({x})", "l": lambda x: f"__ockl_get_local_id({x})",                                                                       # renderer/cstyle.py:352
                                           "i": lambda x: f"(__ockl_get_group_id({x})*__ockl_get_local_size({x})+__ockl_get_local_id({x}))"}
                      code_for_op = _make_hip_code_for_op()                                                                                                                                              # renderer/cstyle.py:354

                        def _make_hip_code_for_op():                                                                                                                                                     # renderer/cstyle.py:321
                          return { k:wrapper(k,v) for k,v in {**CStyleLanguage().code_for_op, **code_for_op_hip}.items() }                                                                               # renderer/cstyle.py:329

                          def _make_hip_code_for_op():                                                                                                                                                   # renderer/cstyle.py:321
                            def wrapper(key, func):                                                                                                                                                      # renderer/cstyle.py:322
                              return cast_bf16                                                                                                                                                           # renderer/cstyle.py:328

                      smem_prefix = "__attribute__((shared))"                                                                                                                                            # renderer/cstyle.py:355
                      barrier = '__builtin_amdgcn_fence(__ATOMIC_RELEASE, "workgroup");' + '__builtin_amdgcn_s_barrier();' + \                                                                           # renderer/cstyle.py:356
                                '__builtin_amdgcn_fence(__ATOMIC_ACQUIRE, "workgroup");'
                      float4 = "make_float4"                                                                                                                                                             # renderer/cstyle.py:358
                      uses_ptr_arithmetic = False  # NOTE: this fixes TestLinearizerOverflowAlt                                                                                                          # renderer/cstyle.py:359
                      type_map = {dtypes.bfloat16: "hip_bfloat16"}                                                                                                                                       # renderer/cstyle.py:360

                    class NVRenderer(CUDARenderer): device = "NV"                                                                                                                                        # renderer/cstyle.py:404

                    class HIPRenderer(AMDRenderer): device = "HIP"                                                                                                                                       # renderer/cstyle.py:405

                      class ClangDevice(Compiled):                                                                                                                                                       # runtime/ops_clang.py:25
                        def __init__(self, device:str):                                                                                                                                                  # runtime/ops_clang.py:26
                          from tinygrad.runtime.graph.clang import ClangGraph                                                                                                                            # runtime/ops_clang.py:27
                      from typing import List, Dict, cast                                                                                                                                                # runtime/graph/clang.py:1
                      import ctypes                                                                                                                                                                      # runtime/graph/clang.py:2
                      from tinygrad.helpers import dedup, cpu_time_execution, DEBUG                                                                                                                      # runtime/graph/clang.py:3
                      from tinygrad.engine.jit import GraphRunner, GraphException                                                                                                                        # runtime/graph/clang.py:4
                      from tinygrad.device import Buffer, Device                                                                                                                                         # runtime/graph/clang.py:5
                      from tinygrad.engine.realize import ExecItem, CompiledRunner                                                                                                                       # runtime/graph/clang.py:6
                      from tinygrad.shape.symbolic import Variable                                                                                                                                       # runtime/graph/clang.py:7
                      from tinygrad.runtime.ops_clang import ClangProgram                                                                                                                                # runtime/graph/clang.py:8
                      from tinygrad.renderer.cstyle import ClangRenderer                                                                                                                                 # runtime/graph/clang.py:9
                      render_dtype = ClangRenderer().render_dtype                                                                                                                                        # runtime/graph/clang.py:10

                          super().__init__(device, MallocAllocator, ClangRenderer(), ClangCompiler("compile_clang"), ClangProgram, ClangGraph)                                                           # runtime/ops_clang.py:28

                        return ExecItem(kernel_type(si.ast.arg, out.device, si.inputs[0].device), list(si.bufs))                                                                                         # engine/realize.py:197

                          @dataclass(frozen=True)                                                                                                                                                        # engine/schedule.py:25
                          class ScheduleItem:
                            @property                                                                                                                                                                    # engine/schedule.py:34
                            def inputs(self) -> Tuple[Buffer, ...]:
                              return self.bufs[len(self.ast.src):] if self.ast.op is MetaOps.KERNEL else self.bufs[1:]                                                                                   # engine/schedule.py:36

                          class BufferCopy(Runner):                                                                                                                                                      # engine/realize.py:120
                            def __init__(self, total_sz, dest_device, src_device):                                                                                                                       # engine/realize.py:121
                              if total_sz >= 1e6: name = f"{type(self).__name__[6:].lower()} {total_sz/1e6:7.2f}M, {dest_device[:7]:>7s} <- {src_device[:7]:7s}"                                         # engine/realize.py:122
                              super().__init__(colored(name, "yellow"), dest_device, 0, total_sz)                                                                                                        # engine/realize.py:124

                    class LRUAllocator(Allocator):  # pylint: disable=abstract-method                                                                                                                    # device.py:144
                      def alloc(self, size:int, options:Optional[BufferOptions]=None):                                                                                                                   # device.py:150
                        if len(c := self.cache[(size, options)]): return c.pop()                                                                                                                         # device.py:151
                        try: return super().alloc(size, options)                                                                                                                                         # device.py:152

                      class _MallocAllocator(LRUAllocator):                                                                                                                                              # device.py:164
                        def _alloc(self, size:int, options:BufferOptions): return (ctypes.c_uint8 * size)()                                                                                              # device.py:165

                    class BufferCopy(Runner):                                                                                                                                                            # engine/realize.py:120
                      def __call__(self, rawbufs:List[Buffer], var_vals:Dict[Variable, int], wait=False):                                                                                                # engine/realize.py:134
                        dest, src = rawbufs[0:2]                                                                                                                                                         # engine/realize.py:135
                        assert dest.size == src.size and dest.dtype == src.dtype, f"buffer copy mismatch, {dest.size} != {src.size}, {dest.dtype} != {src.dtype}"                                        # engine/realize.py:136
                        st = time.perf_counter()                                                                                                                                                         # engine/realize.py:137
                        self.copy(dest, src)                                                                                                                                                             # engine/realize.py:138

                          class BufferCopy(Runner):                                                                                                                                                      # engine/realize.py:120
                            def copy(self, dest, src):                                                                                                                                                   # engine/realize.py:125
                              disk_supports_fast_copyout = src.device.startswith("DISK") and hasattr(src.allocator.device, 'io_uring') and hasattr(src.allocator.device, 'fd')                           # engine/realize.py:126
                              if src.device.startswith("DISK") and hasattr(dest.allocator, 'copy_from_disk') and disk_supports_fast_copyout and src.nbytes >= 4096:                                      # engine/realize.py:127
                              elif src.device.startswith("DISK") and hasattr(dest.allocator, 'as_buffer'):                                                                                               # engine/realize.py:129
                                src.allocator.copyout(dest.allocator.as_buffer(dest._buf), src._buf)                                                                                                     # engine/realize.py:131

                                  class _MallocAllocator(LRUAllocator):                                                                                                                                  # device.py:164
                                    def as_buffer(self, src) -> memoryview: return flat_mv(memoryview(src))                                                                                              # device.py:166

                                      def flat_mv(mv:memoryview): return mv if len(mv) == 0 else mv.cast("B", shape=(mv.nbytes,))                                                                        # helpers.py:303

                                  class DiskAllocator(Allocator):                                                                                                                                        # runtime/ops_disk.py:17
                                    def copyout(self, dest:memoryview, src:DiskBuffer):                                                                                                                  # runtime/ops_disk.py:25
                                      if OSX and hasattr(self.device, 'fd'):                                                                                                                             # runtime/ops_disk.py:26
                                        dest[:] = src._buf()                                                                                                                                             # runtime/ops_disk.py:32

                                          class DiskBuffer:                                                                                                                                              # runtime/ops_disk.py:8
                                            def _buf(self) -> memoryview:                                                                                                                                # runtime/ops_disk.py:12
                                              assert self.device.mem is not None, "DiskBuffer wasn't opened"                                                                                             # runtime/ops_disk.py:13
                                              return memoryview(self.device.mem)[self.offset:self.offset+self.size]                                                                                      # runtime/ops_disk.py:14

                        if wait:                                                                                                                                                                         # engine/realize.py:139

                return self                                                                                                                                                                              # tensor.py:205

                if consume: del state_dict[k]                                                                                                                                                            # nn/state.py:130
                self.update(1)                                                                                                                                                                           # helpers.py:315

            class BufferCopy(Runner):                                                                                                                                                                    # engine/realize.py:120
              def __init__(self, total_sz, dest_device, src_device):                                                                                                                                     # engine/realize.py:121
                if total_sz >= 1e6: name = f"{type(self).__name__[6:].lower()} {total_sz/1e6:7.2f}M, {dest_device[:7]:>7s} <- {src_device[:7]:7s}"                                                 # OLD # engine/realize.py:122
                else: name = f"{type(self).__name__[6:].lower()} {total_sz:8d}, {dest_device[:7]:>7s} <- {src_device[:7]:7s}"                                                                            # engine/realize.py:123

              self.update(close=True)                                                                                                                                                                    # helpers.py:316

                  class Timing(contextlib.ContextDecorator):                                                                                                                                             # helpers.py:136
                    def __exit__(self, *exc):                                                                                                                                                            # helpers.py:139
                      self.et = time.perf_counter_ns() - self.st                                                                                                                                         # helpers.py:140
                      if self.enabled: print(f"{self.prefix}{self.et*1e-6:6.2f} ms"+(self.on_exit(self.et) if self.on_exit else ""))                                                                     # helpers.py:141

          class Buffer:                                                                                                                                                                                  # device.py:53
            def __del__(self):                                                                                                                                                                           # device.py:101
              if not hasattr(self, '_buf'): return                                                                                                                                                       # device.py:102

        if HALF:                                                                                                                                                                                         # test.py:146
        return GPT2(model, tokenizer)                                                                                                                                                                    # test.py:150

          class GPT2:                                                                                                                                                                                    # test.py:129
            def __init__(self, model, tokenizer):                                                                                                                                                        # test.py:152
              self.model = model                                                                                                                                                                         # test.py:153
              self.tokenizer = tokenizer                                                                                                                                                                 # test.py:154

    class Buffer:                                                                                                                                                                                        # device.py:53
      def __del__(self):                                                                                                                                                                                 # device.py:101
        if not hasattr(self, '_buf'): return                                                                                                                                                       # OLD # device.py:102
        if self._base is None:                                                                                                                                                                           # device.py:103

  if args.benchmark != -1:                                                                                                                                                                               # test.py:202
    texts = gpt2.generate(args.prompt, args.count, args.temperature, timing=args.timing, batch_size=args.batch_size)                                                                                     # test.py:205

      class GPT2:                                                                                                                                                                                        # test.py:129
        def generate(self, prompt:str, max_length:int, temperature:float, timing:bool=False, batch_size:int=1):                                                                                          # test.py:156
          prompt_tokens = self.tokenizer.encode(prompt, allowed_special={"<|endoftext|>"})                                                                                                               # test.py:157
          toks = [prompt_tokens[:] for _ in range(batch_size)]                                                                                                                                           # test.py:158
          start_pos = 0                                                                                                                                                                                  # test.py:159
          for _ in trange(max_length, disable=(timing==True)):                                                                                                                                           # test.py:160

            class trange(tqdm):                                                                                                                                                                          # helpers.py:333
              def __init__(self, n:int, **kwargs): super().__init__(iterable=range(n), total=n, **kwargs)                                                                                                # helpers.py:334

            GlobalCounters.reset()                                                                                                                                                                       # test.py:161

              class GlobalCounters:                                                                                                                                                                      # helpers.py:125
                @staticmethod                                                                                                                                                                            # helpers.py:132
                def reset(): GlobalCounters.global_ops, GlobalCounters.global_mem, GlobalCounters.time_sum_s, GlobalCounters.kernel_count = 0,0,0.0,0

            if timing: print("")                                                                                                                                                                         # test.py:162
            st = GlobalCounters.time_sum_s                                                                                                                                                               # test.py:163
            with Timing("ran model in ", on_exit=(lambda et: (f", {(GlobalCounters.time_sum_s-st)*1e3:.2f} ms on GPU" if DEBUG>=2 else "")+                                                              # test.py:164
                        f", {GlobalCounters.global_ops*1e-9:.2f} GOPS, {GlobalCounters.global_mem*1e-9:.2f} GB"+
                        (f", {GlobalCounters.global_mem*1e-9/(GlobalCounters.time_sum_s-st):.2f} GB/s" if DEBUG>=2 else "")) if DEBUG else None, enabled=timing):

              if batch_size == 1 and len(toks[0][start_pos:]) == 1:                                                                                                                                      # test.py:167
                tokens = Tensor([x[start_pos:] for x in toks])                                                                                                                                           # test.py:170

                  class Tensor:                                                                                                                                                                          # tensor.py:92
                    def __init__(self, data:Union[None, ConstType, List, Tuple, LazyBuffer, np.ndarray, bytes, MultiLazyBuffer, Variable],                                                               # tensor.py:108
                                 device:Optional[Union[str, tuple, list]]=None, dtype:Optional[DTypeLike]=None, requires_grad:Optional[bool]=None):
                      if dtype is not None: dtype = to_dtype(dtype)                                                                                                                                # OLD # tensor.py:110
                      assert dtype is None or isinstance(dtype, DType), f"invalid dtype {dtype}"                                                                                                   # OLD # tensor.py:111
                      device = tuple(Device.canonicalize(x) for x in device) if isinstance(device, (tuple, list)) else Device.canonicalize(device)                                                 # OLD # tensor.py:112
                      self.grad: Optional[Tensor] = None                                                                                                                                           # OLD # tensor.py:115
                      self.requires_grad: Optional[bool] = requires_grad                                                                                                                           # OLD # tensor.py:119
                      self._ctx: Optional[Function] = None                                                                                                                                         # OLD # tensor.py:122
                      if isinstance(data, LazyBuffer): assert dtype is None or dtype == data.dtype, "dtype doesn't match, and casting isn't supported"                                             # OLD # tensor.py:125
                      elif isinstance(data, get_args(ConstType)): data = _metaop(MetaOps.CONST, tuple(), dtype or dtypes.from_py(data), device, data)                                              # OLD # tensor.py:126
                      elif isinstance(data, Variable): data = _metaop(MetaOps.CONST, tuple(), dtype or dtypes.from_py(data.unbind()[1]), device, data)                                             # OLD # tensor.py:127
                      elif isinstance(data, bytes): data = _frompy(data, dtypes.uint8 if dtype is None else dtype)                                                                                 # OLD # tensor.py:128
                      elif isinstance(data, (list, tuple)):                                                                                                                                        # OLD # tensor.py:129
                        if dtype is None:                                                                                                                                                          # OLD # tensor.py:130
                          if (d := fully_flatten(data)) and all(isinstance(s, bool) for s in d): dtype = dtypes.bool                                                                                     # tensor.py:131

                            def fully_flatten(l): return [item for sublist in l for item in (fully_flatten(sublist) if isinstance(sublist, (tuple, list)) else [sublist])]                               # helpers.py:34

                          else: dtype = dtypes.default_int if d and all_int(d) else dtypes.default_float                                                                                                 # tensor.py:132

              tok = self.model(tokens, Variable("start_pos", 1 if start_pos else 0, MAX_CONTEXT).bind(start_pos), temperature).numpy().tolist()                                                          # test.py:171

                class Variable(Node):                                                                                                                                                                    # shape/symbolic.py:110
                  def __new__(cls, *args):                                                                                                                                                               # shape/symbolic.py:111
                    expr, nmin, nmax = args                                                                                                                                                              # shape/symbolic.py:112
                    assert nmin >= 0 and nmin <= nmax, f"invalid Variable {expr=} {nmin=} {nmax=}"                                                                                                       # shape/symbolic.py:113
                    if nmin == nmax: return NumNode(nmin)                                                                                                                                                # shape/symbolic.py:114
                    return super().__new__(cls)                                                                                                                                                          # shape/symbolic.py:115

                class Variable(Node):                                                                                                                                                                    # shape/symbolic.py:110
                  def __init__(self, expr:str, nmin:int, nmax:sint):                                                                                                                                     # shape/symbolic.py:119
                    self.expr, self.min, self.max = expr, nmin, nmax                                                                                                                                     # shape/symbolic.py:120
                    self._val: Optional[int] = None                                                                                                                                                      # shape/symbolic.py:121

                class Variable(Node):                                                                                                                                                                    # shape/symbolic.py:110
                  def bind(self, val):                                                                                                                                                                   # shape/symbolic.py:126
                    assert self._val is None and self.min<=val<=self.max, f"cannot bind {val} to {self}"                                                                                                 # shape/symbolic.py:127
                    self._val = val                                                                                                                                                                      # shape/symbolic.py:128
                    return self                                                                                                                                                                          # shape/symbolic.py:129

                class Transformer:                                                                                                                                                                       # test.py:75
                  def __call__(self, tokens:Tensor, start_pos:Variable, temperature:float=0.0) -> Tensor:                                                                                                # test.py:117
                    forward = (self.forward_jit if JIT and (isinstance(tokens, Variable) or tokens.shape[1] == 1) else self.forward)                                                                     # test.py:118

                    return forward(tokens, start_pos, temperature)                                                                                                                                       # test.py:119

                      class Transformer:                                                                                                                                                                 # test.py:75
                        def forward(self, tokens:Union[Tensor,Variable], start_pos:Variable, temperature:float=0.0):                                                                                     # test.py:85
                          if not hasattr(self, 'allpos'): self.allpos = Tensor.arange(0, MAX_CONTEXT).reshape(1, -1).realize()                                                                           # test.py:86

                        class Tensor:                                                                                                                                                                    # tensor.py:92
                          @staticmethod                                                                                                                                                                  # tensor.py:496
                          def arange(start, stop=None, step=1, **kwargs):
                            if stop is None: stop, start = start, 0                                                                                                                                      # tensor.py:520
                            assert all(isinstance(s, (int, float)) for s in (start, stop, step)), f"symbolic arange not supported {start=}, {stop=}, {step=}"                                            # tensor.py:521
                            dtype = kwargs.pop("dtype", dtypes.default_float if any(isinstance(x, float) for x in (start, stop, step)) else dtypes.default_int)                                          # tensor.py:522
                            if (stop-start)/step <= 0: return Tensor([], dtype=dtype, **kwargs)                                                                                                          # tensor.py:524
                            return (Tensor.full((math.ceil((stop-start)/step),), step, dtype=dtype, **kwargs)._cumsum() + (start - step)).cast(dtype)                                                    # tensor.py:525

                          class Tensor:                                                                                                                                                                  # tensor.py:92
                            def _cumsum(self, axis:int=0, _first_zero=False) -> Tensor:                                                                                                                  # tensor.py:1859
                              assert self.shape[axis] != 0                                                                                                                                               # tensor.py:1860

                              pl_sz = self.shape[axis] - int(not _first_zero)                                                                                                                            # tensor.py:1861

                              return self.transpose(axis,-1).pad2d((pl_sz,-int(_first_zero)))._pool((self.shape[axis],)).sum(-1).transpose(axis,-1)                                                      # tensor.py:1862

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def pad2d(self, padding:Sequence[int], value:float=0.0) -> Tensor:                                                                                                         # tensor.py:1230
                                slc = [(-p0, s+p1) for p0,p1,s in zip(padding[::2], padding[1::2], self.shape[::-1])][::-1]                                                                              # tensor.py:1243

                                return self._slice([(0,s) for s in self.shape[:-(len(padding)//2)]] + slc, value=value)                                                                                  # tensor.py:1244

                              class Tensor:                                                                                                                                                              # tensor.py:92
                                # NOTE: using _slice is discouraged and things should migrate to pad and shrink                                                                                          # tensor.py:1047
                                def _slice(self, arg:Sequence[Optional[Tuple[int, sint]]], value:float=0) -> Tensor:
                                  arg_ = tuple(a if a is not None else (0, s) for s,a in zip(self.shape, arg))                                                                                           # tensor.py:1048

                                  padding = tuple((max(0, -l), max(0, r-s)) for s,(l,r) in zip(self.shape, arg_))                                                                                        # tensor.py:1049

                                  return self.pad(padding, value=value).shrink(tuple((l + pl, r + pl) for (l,r),(pl,_) in zip(arg_, padding)))                                                           # tensor.py:1050

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def pad(self, arg:Tuple[Optional[Tuple[sint, sint]], ...], value:float=0.0) -> Tensor:                                                                                 # tensor.py:874
                                    if all(x is None or x == (0,0) for x in arg): return self                                                                                                            # tensor.py:892
                                    ret = F.Pad.apply(self, arg=(narg:=tuple(x if x is not None else (0,0) for x in arg)))                                                                               # tensor.py:893

                                  class Pad(Function):                                                                                                                                                   # function.py:201
                                    def forward(self, x:LazyBuffer, arg:Tuple[Tuple[int, int], ...]) -> LazyBuffer:                                                                                      # function.py:202
                                      self.narg = tuple([(p[0], s+p[0]) for s,p in zip(x.shape, arg)])                                                                                                   # function.py:203
                                      return x.pad(arg)                                                                                                                                                  # function.py:204

                                        class LazyBuffer:                                                                                                                                                # lazy.py:26
                                          def pad(self, arg:Tuple[Tuple[sint, sint], ...]): return self._view(self.st.pad(arg))                                                                          # lazy.py:215

                                            @dataclass(frozen=True)                                                                                                                                      # shape/shapetracker.py:10
                                            class ShapeTracker:
                                              def pad(self, arg: Tuple[Tuple[sint, sint], ...]) -> ShapeTracker: return ShapeTracker(self.views[0:-1] + (self.views[-1].pad(arg), ))                     # shape/shapetracker.py:104

                                                @dataclass(frozen=True)                                                                                                                                  # shape/view.py:85
                                                class View:
                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                       # shape/view.py:225
                                                  def pad(self, arg: Tuple[Tuple[sint, sint], ...]) -> View:
                                                    assert all((b>=0 and e>=0) for b,e in arg) and len(arg) == len(self.shape), f"{self.shape=}, {arg=}"                                                 # shape/view.py:226
                                                    if any(b or e for b, e in arg):                                                                                                                      # shape/view.py:227
                                                      zvarg = tuple([(-b,s+e) for s,(b,e) in zip(self.shape, arg)])                                                                                      # shape/view.py:228
                                                      mask = tuple([(b,s+b) for s,(b,_) in zip(self.shape, arg)])                                                                                        # shape/view.py:229
                                                      return self.__unsafe_resize(zvarg, mask=mask)                                                                                                      # shape/view.py:230

                                    return ret if 0 == value else ret + F.Pad.apply(Tensor.ones_like(self), arg=narg).where(0, value)                                                                    # tensor.py:894

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def _pool(self, k_:Tuple[sint, ...], stride:Union[Tuple[int, ...], int]=1, dilation:Union[Tuple[int, ...], int]=1) -> Tensor:                                              # tensor.py:1672
                                assert len(self.shape) >= len(k_), f"can't pool {self.shape} with {k_}"                                                                                                  # tensor.py:1673

                                assert all_int(self.shape) and all_int(k_), f"does not support symbolic {self.shape=}, {k_=}"                                                                            # tensor.py:1674

                                s_, d_ = make_pair(stride, len(k_)), make_pair(dilation, len(k_))                                                                                                        # tensor.py:1675

                                  def make_pair(x:Union[int, Tuple[int, ...]], cnt=2) -> Tuple[int, ...]: return (x,)*cnt if isinstance(x, int) else x                                                   # helpers.py:32

                                assert len(k_) == len(s_) == len(d_), f"stride/dilation mismatch kernel:{k_} stride:{s_} dilation:{d_}"                                                                  # tensor.py:1676
                                noop_, i_ = [None] * len(self.shape[:-len(k_)]), self.shape[-len(k_):]                                                                                                   # tensor.py:1677

                                o_ = [math.ceil((i - d * (k-1))/s) for i,d,k,s in zip(i_, d_, k_, s_)]                                                                                                   # tensor.py:1678
                                if any(k > s for k,s in zip(k_, s_)) or any(d != 1 for d in d_):                                                                                                         # tensor.py:1679
                                  xup = self.repeat([1]*len(noop_) + [math.ceil(k*(i+d) / i) for k,i,d in zip(k_, i_, d_)])                                                                              # tensor.py:1681

                              class Tensor:                                                                                                                                                              # tensor.py:92
                                def repeat(self, repeats, *args) -> Tensor:                                                                                                                              # tensor.py:1121
                                  repeats = argfix(repeats, *args)                                                                                                                                       # tensor.py:1134

                                  base_shape = (1,) * (len(repeats) - self.ndim) + self.shape                                                                                                            # tensor.py:1135

                                  new_shape = [x for b in base_shape for x in [1, b]]                                                                                                                    # tensor.py:1136
                                  expand_shape = [x for rs in zip(repeats, base_shape) for x in rs]                                                                                                      # tensor.py:1137
                                  final_shape = [r*s for r,s in zip(repeats, base_shape)]                                                                                                                # tensor.py:1138
                                  return self.reshape(new_shape).expand(expand_shape).reshape(final_shape)                                                                                               # tensor.py:1139

                                @dataclass(frozen=True)                                                                                                                                                  # shape/view.py:85
                                class View:
                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                       # shape/view.py:267
                                  def reshape(self, new_shape: Tuple[sint, ...]) -> Optional[View]:
                                    if self.shape == new_shape: return self                                                                                                                        # OLD # shape/view.py:268
                                    assert all(x >= 0 for x in new_shape), f"shape can't contain negative numbers {new_shape}"                                                                     # OLD # shape/view.py:270
                                    if 0 in self.shape:                                                                                                                                            # OLD # shape/view.py:271
                                    if (self_all_int := all_int(self.shape)):                                                                                                                      # OLD # shape/view.py:275
                                      assert all(isinstance(s, (int, Variable)) for s in new_shape), f"{self.shape=} -> {new_shape=} contains non (int, Variable) dim"                             # OLD # shape/view.py:276
                                      if prod(self.shape) != prod([s if isinstance(s, int) else cast(Variable,s).val for s in new_shape]):                                                         # OLD # shape/view.py:277
                                    if new_shape == () and self.mask and any(mx==my for (mx,my) in self.mask): return None                                                                         # OLD # shape/view.py:280
                                    if self.contiguous: return View.create(new_shape)                                                                                                              # OLD # shape/view.py:283
                                    if self_all_int and not all_int(new_shape):                                                                                                                          # shape/view.py:286

                                    strides, r_new_shape = [], reversed(new_shape)                                                                                                                       # shape/view.py:297
                                    for merged_dim, new_stride, real_dim in reversed(_merge_dims(self.shape, self.strides, self.mask)):                                                                  # shape/view.py:298

                                      @functools.lru_cache(maxsize=None)                                                                                                                                 # shape/view.py:19
                                      def _merge_dims(shape:Tuple[int, ...], strides:Tuple[int, ...], mask:Optional[Tuple[Tuple[int, int], ...]]=None) -> Tuple[Tuple[int, int, int], ...]:
                                        if not shape: return ()                                                                                                                                          # shape/view.py:21
                                        assert len(shape) == len(strides) and (mask is None or len(shape) == len(mask))                                                                                  # shape/view.py:22
                                        ret = [(shape[0], strides[0], shape[0] if strides[0] else 0)]                                                                                                    # shape/view.py:23
                                        merging = (mask[0][1] - mask[0][0] == 1) if mask is not None else shape[0] == 1                                                                                  # shape/view.py:25
                                        for i, (s, st) in enumerate(zip(shape[1:], strides[1:]), start=1):                                                                                               # shape/view.py:26
                                        return tuple(ret)                                                                                                                                                # shape/view.py:35

                                      acc = 1                                                                                                                                                            # shape/view.py:299
                                      while acc <= merged_dim and acc != merged_dim and (new_dim := next(r_new_shape, None)):                                                                            # shape/view.py:301
                                        strides.append(new_stride)                                                                                                                                       # shape/view.py:302
                                        if new_dim != 1: new_stride *= (new_dim if (acc :=  acc * new_dim) < real_dim else 0)                                                                            # shape/view.py:303
                                      if acc != merged_dim: break                                                                                                                                        # shape/view.py:304
                                      strides += [0,] * (len(new_shape) - len(strides))                                                                                                                  # shape/view.py:306
                                      new_mask = _reshape_mask(self.mask, self.shape, new_shape)                                                                                                         # shape/view.py:307
                                  if any(not isinstance(m[0], int) or not isinstance(m[1], int) for m in _mask): return None                                                                             # shape/view.py:42
                                  if any(m[1] - m[0] < 1 for m in _mask): return ((0, 0),) * len(new_shape)  # zero mask                                                                                 # shape/view.py:43

                                      if new_mask is not None:                                                                                                                                           # shape/view.py:308
                                        new_strides = canonicalize_strides(tuple(e-b for b,e in new_mask), tuple(reversed(strides)))                                                                     # shape/view.py:309

                                        extra_offset = (sum(m[0] * s for m,s in zip(self.mask, self.strides)) if self.mask else 0) - \                                                                   # shape/view.py:310
                                                       (sum(m[0] * s for m,s in zip(new_mask, new_strides)))
                                        return View.create(new_shape, new_strides, self.offset + extra_offset, new_mask)                                                                                 # shape/view.py:312

                                          @dataclass(frozen=True)                                                                                                                                        # shape/view.py:85
                                          class View:
                                            @staticmethod                                                                                                                                                # shape/view.py:101
                                            @functools.lru_cache(maxsize=None)
                                            def create(shape:Tuple[sint, ...], strides:Optional[Tuple[sint, ...]]=None, offset:sint=0, mask:Optional[Tuple[Tuple[sint, sint], ...]]=None):
                                              if not all(s >= 0 for s in shape): raise ValueError(f"Trying to create View with negative dimension: {shape=}")                                      # OLD # shape/view.py:102
                                              strides = canonicalize_strides(shape, strides) if strides else strides_for_shape(shape)                                                              # OLD # shape/view.py:103
                                              if 0 in shape: return View(shape, (0,) * len(shape), offset=0, mask=None, contiguous=True)                                                           # OLD # shape/view.py:105
                                              if mask is not None and all(m == (0,s) for m,s in zip(mask, shape)): mask = None                                                                     # OLD # shape/view.py:107
                                              if mask and any(elim := [not (b+1 < e) for b,e in mask]):                                                                                            # OLD # shape/view.py:111
                                                if any(not (b < e) for b,e in mask):                                                                                                                     # shape/view.py:112
                                                offset += sum((strides[i] * mask[i][0]) if e else 0 for i, e in enumerate(elim))                                                                         # shape/view.py:114
                                                strides = tuple(0 if e else st for st,e in zip(strides, elim))                                                                                           # shape/view.py:115

                                @functools.lru_cache(maxsize=None)                                                                                                                                       # shape/view.py:19
                                def _merge_dims(shape:Tuple[int, ...], strides:Tuple[int, ...], mask:Optional[Tuple[Tuple[int, int], ...]]=None) -> Tuple[Tuple[int, int, int], ...]:
                                  if not shape: return ()                                                                                                                                          # OLD # shape/view.py:21
                                  assert len(shape) == len(strides) and (mask is None or len(shape) == len(mask))                                                                                  # OLD # shape/view.py:22
                                  ret = [(shape[0], strides[0], shape[0] if strides[0] else 0)]                                                                                                    # OLD # shape/view.py:23
                                  merging = (mask[0][1] - mask[0][0] == 1) if mask is not None else shape[0] == 1                                                                                  # OLD # shape/view.py:25
                                  for i, (s, st) in enumerate(zip(shape[1:], strides[1:]), start=1):                                                                                               # OLD # shape/view.py:26
                                    last_s, last_st, last_pre_expand_s = ret[-1]                                                                                                                         # shape/view.py:27
                                    if s == 1: continue                                                                                                                                                  # shape/view.py:29
                                    if merging or last_st == s * st: ret[-1] = (last_s * s, st, (s if merging else last_pre_expand_s * s) if st else 0)                                                  # shape/view.py:31
                                    merging = (mask[i][1] - mask[i][0] == 1) if mask is not None else s == 1                                                                                             # shape/view.py:34

                                @dataclass(frozen=True)                                                                                                                                                  # shape/view.py:85
                                class View:
                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                       # shape/view.py:267
                                  def reshape(self, new_shape: Tuple[sint, ...]) -> Optional[View]:
                                    if self.shape == new_shape: return self                                                                                                                        # OLD # shape/view.py:268
                                    assert all(x >= 0 for x in new_shape), f"shape can't contain negative numbers {new_shape}"                                                                     # OLD # shape/view.py:270
                                    if 0 in self.shape:                                                                                                                                            # OLD # shape/view.py:271
                                    if (self_all_int := all_int(self.shape)):                                                                                                                      # OLD # shape/view.py:275
                                      assert all(isinstance(s, (int, Variable)) for s in new_shape), f"{self.shape=} -> {new_shape=} contains non (int, Variable) dim"                             # OLD # shape/view.py:276
                                      if prod(self.shape) != prod([s if isinstance(s, int) else cast(Variable,s).val for s in new_shape]):                                                         # OLD # shape/view.py:277
                                    if new_shape == () and self.mask and any(mx==my for (mx,my) in self.mask): return None                                                                         # OLD # shape/view.py:280
                                    if self.contiguous: return View.create(new_shape)                                                                                                              # OLD # shape/view.py:283
                                    if self_all_int and not all_int(new_shape):                                                                                                                    # OLD # shape/view.py:286
                                    strides, r_new_shape = [], reversed(new_shape)                                                                                                                 # OLD # shape/view.py:297
                                    for merged_dim, new_stride, real_dim in reversed(_merge_dims(self.shape, self.strides, self.mask)):                                                            # OLD # shape/view.py:298
                                      acc = 1                                                                                                                                                      # OLD # shape/view.py:299
                                      while acc <= merged_dim and acc != merged_dim and (new_dim := next(r_new_shape, None)):                                                                      # OLD # shape/view.py:301
                                        strides.append(new_stride)                                                                                                                                 # OLD # shape/view.py:302
                                        if new_dim != 1: new_stride *= (new_dim if (acc :=  acc * new_dim) < real_dim else 0)                                                                      # OLD # shape/view.py:303
                                      if acc != merged_dim: break                                                                                                                                  # OLD # shape/view.py:304
                                      strides += [0,] * (len(new_shape) - len(strides))                                                                                                            # OLD # shape/view.py:306
                                      new_mask = _reshape_mask(self.mask, self.shape, new_shape)                                                                                                   # OLD # shape/view.py:307
                                      if new_mask is not None:                                                                                                                                     # OLD # shape/view.py:308
                                        new_strides = canonicalize_strides(tuple(e-b for b,e in new_mask), tuple(reversed(strides)))                                                               # OLD # shape/view.py:309
                                        extra_offset = (sum(m[0] * s for m,s in zip(self.mask, self.strides)) if self.mask else 0) - \                                                             # OLD # shape/view.py:310
                                                       (sum(m[0] * s for m,s in zip(new_mask, new_strides)))
                                        return View.create(new_shape, new_strides, self.offset + extra_offset, new_mask)                                                                           # OLD # shape/view.py:312
                                    return None                                                                                                                                                          # shape/view.py:314

                                @dataclass(frozen=True)                                                                                                                                                  # shape/shapetracker.py:10
                                class ShapeTracker:
                                  def reshape(self, new_shape: Tuple[sint, ...]) -> ShapeTracker:                                                                                                        # shape/shapetracker.py:110
                                    if getenv("MERGE_VIEW", 1) and (new_view := self.views[-1].reshape(new_shape)) is not None: return ShapeTracker(self.views[0:-1] + (new_view,))                # OLD # shape/shapetracker.py:111
                                    return ShapeTracker(self.views + (View.create(new_shape), ))                                                                                                         # shape/shapetracker.py:112

                                  xup = xup.shrink(tuple(noop_ + [(0,k*(i+d)) for k,i,d in zip(k_, i_, d_)])).reshape(noop_ + flatten((k,i+d) for k,i,d in zip(k_, i_, d_)))                             # tensor.py:1683

                                  xup = xup.shrink(noop_ + flatten(((0,k), (0,o*s)) for k,o,s in zip(k_, o_, s_))).reshape(noop_ + flatten((k,o,s) for k,o,s in zip(k_, o_, s_)))                        # tensor.py:1685

                              @functools.lru_cache(maxsize=None)                                                                                                                                         # shape/view.py:19
                              def _merge_dims(shape:Tuple[int, ...], strides:Tuple[int, ...], mask:Optional[Tuple[Tuple[int, int], ...]]=None) -> Tuple[Tuple[int, int, int], ...]:
                                if not shape: return ()                                                                                                                                            # OLD # shape/view.py:21
                                assert len(shape) == len(strides) and (mask is None or len(shape) == len(mask))                                                                                    # OLD # shape/view.py:22
                                ret = [(shape[0], strides[0], shape[0] if strides[0] else 0)]                                                                                                      # OLD # shape/view.py:23
                                merging = (mask[0][1] - mask[0][0] == 1) if mask is not None else shape[0] == 1                                                                                    # OLD # shape/view.py:25
                                for i, (s, st) in enumerate(zip(shape[1:], strides[1:]), start=1):                                                                                                 # OLD # shape/view.py:26
                                  else: ret.append((s, st, s if st else 0))                                                                                                                              # shape/view.py:32

                              if _mask is None: return tuple((0, s) for s in new_shape)                                                                                                                  # shape/view.py:41

                                  xup = xup.shrink(noop_ + flatten(((0,k), (0,o), (0,1)) for k,o in zip(k_, o_))).reshape(noop_ + flatten((k,o) for k,o in zip(k_, o_)))                                 # tensor.py:1686

                                  return xup.permute(*range(len(noop_)), *[len(noop_)+i*2+1 for i in range(len(i_))], *[len(noop_)+i*2 for i in range(len(i_))])                                         # tensor.py:1688

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def sum(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False, acc_dtype:Optional[DTypeLike]=None):                                                           # tensor.py:1312
                                ret = self.cast(acc_dtype or sum_acc_dtype(self.dtype))._reduce(F.Sum, axis, keepdim)                                                                                    # tensor.py:1336

                                  def sum_acc_dtype(dt:DType):                                                                                                                                           # dtype.py:122
                                    if dtypes.is_unsigned(dt): return least_upper_dtype(dt, dtypes.uint)                                                                                                 # dtype.py:124

                                    if dtypes.is_int(dt) or dt == dtypes.bool: return least_upper_dtype(dt, dtypes.int)                                                                                  # dtype.py:125

                                      @functools.lru_cache(None)                                                                                                                                         # dtype.py:113
                                      def least_upper_dtype(*ds:DType) -> DType:
                                        return min(set.intersection(*[_get_recursive_parents(d) for d in ds])) if not (images:=[d for d in ds if isinstance(d, ImageDType)]) else images[0]              # dtype.py:114

                                        @functools.lru_cache(None)                                                                                                                                       # dtype.py:110
                                        def _get_recursive_parents(dtype:DType) -> Set[DType]:
                                          return set.union(*[_get_recursive_parents(d) for d in promo_lattice[dtype]], {dtype}) if dtype != dtypes.float64 else {dtypes.float64}                         # dtype.py:111

                              class Tensor:                                                                                                                                                              # tensor.py:92
                                def _reduce(self, fxn:Type[Function], axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False) -> Tensor:                                                           # tensor.py:1303
                                  if self.ndim == 0:                                                                                                                                                     # tensor.py:1304

                                  axis_: Tuple[int, ...] = tuple(range(len(self.shape))) if axis is None else ((axis,) if isinstance(axis, int) else tuple(axis))                                        # tensor.py:1307
                                  axis_ = tuple(self._resolve_dim(x) for x in axis_)                                                                                                                     # tensor.py:1308

                                  ret = fxn.apply(self, axis=axis_)                                                                                                                                      # tensor.py:1309

                                class Sum(Function):                                                                                                                                                     # function.py:157
                                  def forward(self, x:LazyBuffer, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                                   # function.py:158
                                    self.input_shape = x.shape                                                                                                                                           # function.py:159
                                    return x.r(ReduceOps.SUM, axis)                                                                                                                                      # function.py:160

                                      class LazyBuffer:                                                                                                                                                  # lazy.py:26
                                        def r(self, op:ReduceOps, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                                   # lazy.py:176
                                          new_shape = reduce_st(self.st, axis)                                                                                                                           # lazy.py:177

                                            def reduce_st(st:ShapeTracker, axis:Tuple[int, ...]) -> Tuple[sint, ...]: return tuple(1 if i in axis else s for i,s in enumerate(st.shape))                 # ops.py:136

                                          if 0 in self.shape and 0 not in new_shape: return self.const({ReduceOps.SUM: 0.0, ReduceOps.MAX: dtypes.min(self.dtype)}[op], new_shape)                       # lazy.py:179
                                          if self.is_unrealized_unmasked_const() and all_int(self.shape):                                                                                                # lazy.py:183

                                          if not SPLIT_REDUCEOP or not all_int(self.shape) or (0 in self.shape) or \                                                                                     # lazy.py:187
                                            prod(self.shape) // prod(new_shape) < getenv("REDUCEOP_SPLIT_THRESHOLD", 32768):

                                            return self._reduce_op(op, axis)                                                                                                                             # lazy.py:189

                                              class LazyBuffer:                                                                                                                                          # lazy.py:26
                                                def _reduce_op(self, op:ReduceOps, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                  # lazy.py:170
                                                  assert all(0 <= x < len(self.shape) for x in axis), f"axis args {axis} out of range for shape {self.shape}"                                            # lazy.py:171
                                                  axis = tuple(sorted([x for x in axis if self.shape[x] != 1]))                                                                                          # lazy.py:172
                                                  if len(axis) == 0: return self                                                                                                                         # lazy.py:173
                                                  return create_lazybuffer(self.device, ShapeTracker.from_shape(reduce_st(self.st, axis)), self.dtype, op, axis, (self,))                                # lazy.py:174

                                  return ret if keepdim else ret.reshape(tuple(s for i,s in enumerate(self.shape) if i not in axis_))                                                                    # tensor.py:1310

                                return ret.cast(self.dtype) if acc_dtype is None and self.dtype in (dtypes.float16, dtypes.bfloat16) else ret                                                            # tensor.py:1337

                        def _recurse_lb(buf:LazyBuffer, realizes:Dict[LazyBuffer, None], allbufs:Dict[LazyBuffer, None], simple_pads:Dict[LazyBuffer, None],\                                            # engine/schedule.py:165
                            children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]], assign_targets:Dict[LazyBuffer, LazyBuffer],\
                            double_reduces:Dict[LazyBuffer, None], scheduled=False):
                          if buf in allbufs or buf.base.realized is not None: return                                                                                                               # OLD # engine/schedule.py:169
                          if GRAPH: log_lazybuffer(buf, scheduled)                                                                                                                                 # OLD # engine/schedule.py:170
                          if buf is not buf.base:                                                                                                                                                  # OLD # engine/schedule.py:172
                              if buf.base.op is UnaryOps.CAST and isinstance(buf.base.srcs[0].dtype, ImageDType) and isinstance(buf.base.arg, ImageDType):                                               # engine/schedule.py:180

                              else: realizes[buf.base] = None                                                                                                                                            # engine/schedule.py:182

                        def _graph_schedule(outs:List[LazyBuffer], seen:Set[LazyBuffer]):                                                                                                                # engine/schedule.py:238
                          realizes: Dict[LazyBuffer, None] = {x.base:None for x in outs if x.base.realized is None}                                                                                # OLD # engine/schedule.py:241
                          allbufs: Dict[LazyBuffer, None] = {}                                                                                                                                     # OLD # engine/schedule.py:242
                          simple_pads: Dict[LazyBuffer, None] = {}                                                                                                                                 # OLD # engine/schedule.py:243
                          children: DefaultDict[LazyBuffer, Dict[LazyBuffer, None]] = defaultdict(dict)                                                                                            # OLD # engine/schedule.py:244
                          assign_targets: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                                        # OLD # engine/schedule.py:245
                          double_reduces: Dict[LazyBuffer, None] = {}                                                                                                                              # OLD # engine/schedule.py:246
                          for out in outs: _recurse_lb(out.base, realizes, allbufs, simple_pads, children, assign_targets, double_reduces, scheduled=True)                                         # OLD # engine/schedule.py:247
                          for p in simple_pads:                                                                                                                                                    # OLD # engine/schedule.py:250
                          reduce_for_op: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                                         # OLD # engine/schedule.py:255
                          reduce_of_const: List[LazyBuffer] = []                                                                                                                                   # OLD # engine/schedule.py:256
                          for r in allbufs:                                                                                                                                                        # OLD # engine/schedule.py:257
                            if r.op not in ReduceOps or r in realizes: continue                                                                                                                    # OLD # engine/schedule.py:258
                            group: Dict[LazyBuffer, None] = {}                                                                                                                                           # engine/schedule.py:260
                            _recursive_group(r, r.st, r, children, realizes, reduce_for_op, group, cache=set())                                                                                          # engine/schedule.py:261

                              def _recursive_group(tr:LazyBuffer, st:ShapeTracker, r:LazyBuffer, children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]],                                               # engine/schedule.py:207
                                                   realizes:Dict[LazyBuffer, None], reduce_for_op:Dict[LazyBuffer, LazyBuffer], group:Dict[LazyBuffer, None], cache:Set):
                                if (tr, st) in cache: return                                                                                                                                             # engine/schedule.py:210
                                cache.add((tr, st))                                                                                                                                                      # engine/schedule.py:211
                                if tr in realizes and tr is not r:                                                                                                                                       # engine/schedule.py:212
                                for tr_next in children[tr]:                                                                                                                                             # engine/schedule.py:217
                                  if tr_next.op in ReduceOps: return group.setdefault(r)                                                                                                                 # engine/schedule.py:219
                                  if len(st_childs:=dedup(s for s in tr_next.srcs if s.base == tr)) > 1: return group.setdefault(r)                                                                      # engine/schedule.py:221

                                  _recursive_group(tr_next, st+st_childs[0].st, r, children, realizes, reduce_for_op, group, cache)                                                                      # engine/schedule.py:222

                                    @dataclass(frozen=True)                                                                                                                                              # shape/shapetracker.py:10
                                    class ShapeTracker:
                                      def __add__(self, st:ShapeTracker) -> ShapeTracker:                                                                                                                # shape/shapetracker.py:13
                                        ret = self                                                                                                                                                       # shape/shapetracker.py:14
                                        for v in st.views: ret = ShapeTracker(ret.views + (v,)).simplify() # one view at a time = better simplification                                                  # shape/shapetracker.py:15

                                          @dataclass(frozen=True)                                                                                                                                        # shape/shapetracker.py:10
                                          class ShapeTracker:
                                            def simplify(self) -> ShapeTracker:                                                                                                                          # shape/shapetracker.py:97
                                              if len(self.views) >= 2 and (new_view := self.views[-2] + self.views[-1]) is not None:                                                                     # shape/shapetracker.py:98

                                                @dataclass(frozen=True)                                                                                                                                  # shape/view.py:85
                                                class View:
                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                       # shape/view.py:136
                                                  def __add__(self, vm1:View) -> Optional[View]:
                                                    vm2 = self                                                                                                                                           # shape/view.py:137
                                                    if vm2.contiguous: return vm1                                                                                                                        # shape/view.py:138

                                                return ShapeTracker(self.views[:-2] + (new_view,)).simplify()                                                                                            # shape/shapetracker.py:99

                                                  @dataclass(frozen=True)                                                                                                                                # shape/shapetracker.py:10
                                                  class ShapeTracker:
                                                    def simplify(self) -> ShapeTracker:                                                                                                                  # shape/shapetracker.py:97
                                                      if len(self.views) >= 2 and (new_view := self.views[-2] + self.views[-1]) is not None:                                                       # OLD # shape/shapetracker.py:98
                                                        return ShapeTracker(self.views[:-2] + (new_view,)).simplify()                                                                              # OLD # shape/shapetracker.py:99
                                                      return self                                                                                                                                        # shape/shapetracker.py:100

                                        return ret                                                                                                                                                       # shape/shapetracker.py:16

                                    def _recursive_group(tr:LazyBuffer, st:ShapeTracker, r:LazyBuffer, children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]],                                         # engine/schedule.py:207
                                                         realizes:Dict[LazyBuffer, None], reduce_for_op:Dict[LazyBuffer, LazyBuffer], group:Dict[LazyBuffer, None], cache:Set):
                                      if (tr, st) in cache: return                                                                                                                                 # OLD # engine/schedule.py:210
                                      cache.add((tr, st))                                                                                                                                          # OLD # engine/schedule.py:211
                                      if tr in realizes and tr is not r:                                                                                                                           # OLD # engine/schedule.py:212
                                        if not st.contiguous or st.size != r.st.size or tr in reduce_for_op: group.setdefault(r)                                                                         # engine/schedule.py:215

                                        return group.setdefault(tr)                                                                                                                                      # engine/schedule.py:216

                            can_chase = all(tr not in reduce_for_op for tr in group)                                                                                                                     # engine/schedule.py:263
                            forced_realize = r in group                                                                                                                                                  # engine/schedule.py:265
                            if not forced_realize and len(group) > 1:                                                                                                                                    # engine/schedule.py:266
                            if not forced_realize and any(x.op is MetaOps.ASSIGN for x in group):                                                                                                        # engine/schedule.py:269
                            if forced_realize or not group:                                                                                                                                              # engine/schedule.py:276
                            else: reduce_for_op.update((tr, r) for tr in group)                                                                                                                          # engine/schedule.py:294
                            if FUSE_ARANGE and r.op is ReduceOps.SUM and r.srcs[0].base.op is MetaOps.CONST: reduce_of_const.append(r)                                                                   # engine/schedule.py:295

                          def _lower_lazybuffer(outs:List[LazyBuffer], realizes:Dict[LazyBuffer, None]):                                                                                                 # engine/schedule.py:128
                            if (out:=outs[0]).op is MetaOps.COPY and getenv("USE_COPY_KERNEL") and out.device.split(":")[0] == out.srcs[0].device.split(":")[0]:                                   # OLD # engine/schedule.py:130
                            if out.op in {MetaOps.CUSTOM, MetaOps.COPY, MetaOps.EMPTY, MetaOps.VIEW}: return LazyOp(out.op, (), out.arg), [x.base for x in out.srcs], {}, []                       # OLD # engine/schedule.py:133
                            reduce_info: Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]] = {}                                                                                # engine/schedule.py:135
                            seen_ops: Dict[Tuple[LazyBuffer, ShapeTracker], None] = {}                                                                                                                   # engine/schedule.py:136
                            for out in outs: _recurse_reduceops(out, out.st, realizes, outs, reduce_info, seen_ops)                                                                                      # engine/schedule.py:137

                              def _recurse_reduceops(buf:LazyBuffer, st:ShapeTracker, realizes:Dict[LazyBuffer, None], outs:List[LazyBuffer],\                                                           # engine/schedule.py:92
                                  reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> Optional[Tuple[LazyBuffer, ShapeTracker]]:
                                if buf.base.realized is not None or (buf.base in realizes and buf.base not in outs) or (buf, st) in cache: return None                                                   # engine/schedule.py:94

                                cache.setdefault((buf, st))                                                                                                                                              # engine/schedule.py:95
                                if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                                    # engine/schedule.py:96

                                input_st = ShapeTracker.from_shape(buf.srcs[0].shape) if buf.op in ReduceOps else st                                                                                     # engine/schedule.py:97
                                reduce_srcs = [r for x in buf.srcs if (r:=_recurse_reduceops(x, input_st, realizes, outs, reduce_info, cache)) is not None]                                              # engine/schedule.py:98

                                def _recurse_reduceops(buf:LazyBuffer, st:ShapeTracker, realizes:Dict[LazyBuffer, None], outs:List[LazyBuffer],\                                                         # engine/schedule.py:92
                                    reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> Optional[Tuple[LazyBuffer, ShapeTracker]]:
                                  if buf.base.realized is not None or (buf.base in realizes and buf.base not in outs) or (buf, st) in cache: return None                                           # OLD # engine/schedule.py:94
                                  cache.setdefault((buf, st))                                                                                                                                      # OLD # engine/schedule.py:95
                                  if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                            # OLD # engine/schedule.py:96
                                  input_st = ShapeTracker.from_shape(buf.srcs[0].shape) if buf.op in ReduceOps else st                                                                             # OLD # engine/schedule.py:97
                                  reduce_srcs = [r for x in buf.srcs if (r:=_recurse_reduceops(x, input_st, realizes, outs, reduce_info, cache)) is not None]                                      # OLD # engine/schedule.py:98
                                  top_reduce = reduce_srcs[-1] if len(reduce_srcs) != 0 else None                                                                                                        # engine/schedule.py:99
                                  if buf.op in ReduceOps:                                                                                                                                                # engine/schedule.py:100
                                    axis = buf.arg                                                                                                                                                       # engine/schedule.py:101
                                    if not st.contiguous:                                                                                                                                                # engine/schedule.py:102

                                    elif top_reduce is not None:                                                                                                                                         # engine/schedule.py:115
                                    st = st.reshape(reduce_st(input_st, axis))                                                                                                                           # engine/schedule.py:123

                                    reduce_info[(buf, st)] = (input_st, axis)                                                                                                                            # engine/schedule.py:124
                                    return (buf, st)                                                                                                                                                     # engine/schedule.py:125

                                top_reduce = reduce_srcs[-1] if len(reduce_srcs) != 0 else None                                                                                                    # OLD # engine/schedule.py:99
                                if buf.op in ReduceOps:                                                                                                                                            # OLD # engine/schedule.py:100
                                  axis = buf.arg                                                                                                                                                   # OLD # engine/schedule.py:101
                                  if not st.contiguous:                                                                                                                                            # OLD # engine/schedule.py:102
                                  elif top_reduce is not None:                                                                                                                                     # OLD # engine/schedule.py:115
                                  st = st.reshape(reduce_st(input_st, axis))                                                                                                                       # OLD # engine/schedule.py:123
                                  reduce_info[(buf, st)] = (input_st, axis)                                                                                                                        # OLD # engine/schedule.py:124
                                  return (buf, st)                                                                                                                                                 # OLD # engine/schedule.py:125
                                return top_reduce                                                                                                                                                        # engine/schedule.py:126

                            shape_dims = [sorted(dedup(dims)) for dims in zip(*[input_st.shape for input_st,_ in reduce_info.values()])]                                                                 # engine/schedule.py:139

                            for i,dims in enumerate(shape_dims):                                                                                                                                         # engine/schedule.py:140
                              if len(dims) == 1 or (len(dims) == 2 and dims[0] == 1): continue                                                                                                           # engine/schedule.py:141
                            var_vals = merge_dicts([out.st.var_vals.copy() for out in outs])                                                                                                             # engine/schedule.py:147

                            @dataclass(frozen=True)                                                                                                                                                      # shape/shapetracker.py:10
                            class ShapeTracker:
                              @property                                                                                                                                                                  # shape/shapetracker.py:53
                              def var_vals(self) -> Dict[Variable, int]: return merge_dicts([dict([v.unbind()]) for v in self.vars()])

                                @dataclass(frozen=True)                                                                                                                                                  # shape/shapetracker.py:10
                                class ShapeTracker:
                                  def vars(self) -> Set[Variable]: return set().union(*[v.vars() for v in self.views])                                                                                   # shape/shapetracker.py:50

                                  @dataclass(frozen=True)                                                                                                                                                # shape/view.py:85
                                  class View:
                                    @functools.lru_cache(None)  # pylint: disable=method-cache-max-size-none                                                                                             # shape/view.py:120
                                    def vars(self) -> Set[Variable]:
                                      flatten_mask = tuple(x for m in self.mask for x in m) if self.mask is not None else tuple()                                                                        # shape/view.py:121
                                      return functools.reduce(operator.or_, [x.vars() for x in self.shape+self.strides+(self.offset,)+flatten_mask if isinstance(x, Node)], set())                       # shape/view.py:122

                            assign_targets = {x.srcs[1]:x for x in outs if x.op is MetaOps.ASSIGN}                                                                                                       # engine/schedule.py:148
                            cache: Dict[Tuple[LazyBuffer, ShapeTracker], LazyOp] = {}                                                                                                                    # engine/schedule.py:149
                            ast: List[LazyOp] = []                                                                                                                                                       # engine/schedule.py:150
                            inputs: Dict[LazyBuffer, int] = {}                                                                                                                                           # engine/schedule.py:151
                            for i, out in enumerate(outs):                                                                                                                                               # engine/schedule.py:152
                              output_st = ShapeTracker.from_shape(reduce_st(*deque(reduce_info.values(), 1).pop()) if reduce_info else out.shape)                                                        # engine/schedule.py:153

                              lop = _recursive_lazyop(out, inputs, tuple(outs), var_vals, output_st, realizes, assign_targets, reduce_info, cache=cache)                                                 # engine/schedule.py:154

                                def _recursive_lazyop(buf:LazyBuffer, inputs:Dict[LazyBuffer, int], outputs:Tuple[LazyBuffer, ...], var_vals:Dict[Variable, int], st:ShapeTracker,                       # engine/schedule.py:40
                                                      realizes:Dict[LazyBuffer, None], assign_targets:Dict[LazyBuffer, LazyBuffer],
                                                      reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> LazyOp:
                                  if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                                  # engine/schedule.py:44

                                  if (buf, st) in cache: return cache[(buf, st)]                                                                                                                         # engine/schedule.py:45
                                  arg = buf.arg                                                                                                                                                          # engine/schedule.py:46
                                  if buf.op is MetaOps.CONST:                                                                                                                                            # engine/schedule.py:49
                                  if buf.realized is not None or (buf in realizes and buf not in outputs):                                                                                               # engine/schedule.py:59

                                  if buf.op in {MetaOps.CONTIGUOUS, MetaOps.ASSIGN}:                                                                                                                     # engine/schedule.py:72
                                  if buf.op in ReduceOps:                                                                                                                                                # engine/schedule.py:77
                                  return cache.setdefault((buf, st), LazyOp(cast(Op,buf.op), tuple(_recursive_lazyop(x, inputs, outputs, var_vals, st, realizes, assign_targets, \                       # engine/schedule.py:84
                                      reduce_info, cache) for x in buf.srcs), arg))

                                  def _recursive_lazyop(buf:LazyBuffer, inputs:Dict[LazyBuffer, int], outputs:Tuple[LazyBuffer, ...], var_vals:Dict[Variable, int], st:ShapeTracker,                     # engine/schedule.py:40
                                                        realizes:Dict[LazyBuffer, None], assign_targets:Dict[LazyBuffer, LazyBuffer],
                                                        reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> LazyOp:
                                    if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                          # OLD # engine/schedule.py:44
                                    if (buf, st) in cache: return cache[(buf, st)]                                                                                                                 # OLD # engine/schedule.py:45
                                    arg = buf.arg                                                                                                                                                  # OLD # engine/schedule.py:46
                                    if buf.op is MetaOps.CONST:                                                                                                                                    # OLD # engine/schedule.py:49
                                    if buf.realized is not None or (buf in realizes and buf not in outputs):                                                                                       # OLD # engine/schedule.py:59
                                    if buf.op in {MetaOps.CONTIGUOUS, MetaOps.ASSIGN}:                                                                                                             # OLD # engine/schedule.py:72
                                    if buf.op in ReduceOps:                                                                                                                                        # OLD # engine/schedule.py:77
                                      if (buf, st) not in reduce_info:                                                                                                                                   # engine/schedule.py:79
                                      st, arg = reduce_info[(buf, st)]                                                                                                                                   # engine/schedule.py:81

                                    @dataclass(frozen=True)                                                                                                                                              # shape/view.py:85
                                    class View:
                                      @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                   # shape/view.py:136
                                      def __add__(self, vm1:View) -> Optional[View]:
                                        vm2 = self                                                                                                                                                 # OLD # shape/view.py:137
                                        if vm2.contiguous: return vm1                                                                                                                              # OLD # shape/view.py:138
                                        if vm1.contiguous and vm1.shape == vm2.shape: return vm2                                                                                                         # shape/view.py:139

                                    @dataclass(frozen=True)                                                                                                                                              # shape/view.py:85
                                    class View:
                                      @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                   # shape/view.py:136
                                      def __add__(self, vm1:View) -> Optional[View]:
                                        vm2 = self                                                                                                                                                 # OLD # shape/view.py:137
                                        if vm2.contiguous: return vm1                                                                                                                              # OLD # shape/view.py:138
                                        if vm1.contiguous and vm1.shape == vm2.shape: return vm2                                                                                                   # OLD # shape/view.py:139
                                        if vm1.contiguous and vm1.size() == vm2.size() and (ret := vm2.reshape(vm1.shape)) is not None: return ret                                                       # shape/view.py:140
                                        if vm1.mask:                                                                                                                                                     # shape/view.py:141
                                        origin = un1d(vm2.shape, vm1.offset)                                                                                                                             # shape/view.py:147

                                          def un1d(shape:Tuple[sint, ...], offs:sint) -> List[sint]:                                                                                                     # shape/view.py:75
                                            strides = strides_for_shape(shape)                                                                                                                           # shape/view.py:76

                                            result = []                                                                                                                                                  # shape/view.py:77
                                            for stride in strides:                                                                                                                                       # shape/view.py:78
                                              here = offs // stride if stride else 0                                                                                                                     # shape/view.py:79
                                              result.append(here)                                                                                                                                        # shape/view.py:80
                                              offs -= here * stride                                                                                                                                      # shape/view.py:81
                                            return result                                                                                                                                                # shape/view.py:82

                                        terms: List[List[Tuple[int, sint]]] = [[] for _ in origin]                                                                                                       # shape/view.py:148
                                        strides: List[sint] = [0] * len(vm1.shape)                                                                                                                       # shape/view.py:149
                                        for d1, st in enumerate(vm1.strides):                                                                                                                            # shape/view.py:150
                                          if st == 0: continue                                                                                                                                           # shape/view.py:151
                                          for d2, (o, s1) in enumerate(zip(origin, un1d(vm2.shape, vm1.offset + st))):                                                                                   # shape/view.py:152

                                            if (s1 := s1 - o) == 0: continue                                                                                                                             # shape/view.py:153
                                            terms[d2].append((d1, s1))                                                                                                                                   # shape/view.py:154
                                            strides[d1] += s1 * vm2.strides[d2]                                                                                                                          # shape/view.py:155

                                        idxs: List[Node] = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(vm1.shape)]                                                                                 # shape/view.py:159

                                        merged_size, merged_term = 1, NumNode(0)                                                                                                                         # shape/view.py:160

                                          class NumNode(Node):                                                                                                                                           # shape/symbolic.py:136
                                            def __init__(self, num:int):                                                                                                                                 # shape/symbolic.py:137
                                              assert isinstance(num, int), f"{num} is not an int"                                                                                                        # shape/symbolic.py:138
                                              self.b:int = num                                                                                                                                           # shape/symbolic.py:139
                                              self.min, self.max = num, num                                                                                                                              # shape/symbolic.py:140

                                        extents: List[Tuple[sint, Node]] = []                                                                                                                            # shape/view.py:161
                                        for term, s, o in zip(reversed(terms), reversed(vm2.shape), reversed(origin)):                                                                                   # shape/view.py:162
                                          merged_term += Variable.sum([idxs[d1] * (s1 * merged_size) for d1, s1 in term]) + o * merged_size                                                              # shape/view.py:163

                                      class Node:                                                                                                                                                        # shape/symbolic.py:10
                                        def __mul__(self, b:Union[Node, int]):                                                                                                                           # shape/symbolic.py:41
                                          if b == 0: return NumNode(0)                                                                                                                                   # shape/symbolic.py:42
                                          if b == 1: return self                                                                                                                                         # shape/symbolic.py:43

                                            class Node:                                                                                                                                                  # shape/symbolic.py:10
                                              @staticmethod                                                                                                                                              # shape/symbolic.py:83
                                              def sum(nodes:List[Node]) -> Node:
                                                nodes = [x for x in nodes if x.max or x.min]                                                                                                             # shape/symbolic.py:84
                                                if not nodes: return NumNode(0)                                                                                                                          # shape/symbolic.py:85
                                                if len(nodes) == 1: return nodes[0]                                                                                                                      # shape/symbolic.py:86
                                                mul_groups: Dict[Node, int] = {}                                                                                                                         # shape/symbolic.py:88
                                                num_node_sum = 0                                                                                                                                         # shape/symbolic.py:89
                                                for node in SumNode(nodes).flat_components:                                                                                                              # shape/symbolic.py:90

                                                  class RedNode(Node):                                                                                                                                   # shape/symbolic.py:230
                                                    def __init__(self, nodes:List[Node]):                                                                                                                # shape/symbolic.py:231
                                                      self.nodes = nodes                                                                                                                                 # shape/symbolic.py:232
                                                      self.min, self.max = self.get_bounds()                                                                                                             # shape/symbolic.py:233

                                                        class SumNode(RedNode):                                                                                                                          # shape/symbolic.py:237
                                                          def get_bounds(self) -> Tuple[int, sint]: return sum([x.min for x in self.nodes]), sum([x.max for x in self.nodes])                            # shape/symbolic.py:238

                                                  class SumNode(RedNode):                                                                                                                                # shape/symbolic.py:237
                                                    # recursively expand sumnode components                                                                                                              # shape/symbolic.py:289
                                                    # TODO: can remove this if there's no SumNode inside SumNode
                                                    @property
                                                    def flat_components(self): return [y for x in self.nodes for y in (x.flat_components if isinstance(x, SumNode) else [x])]

                                                  if node.__class__ is NumNode: num_node_sum += node.b                                                                                                   # shape/symbolic.py:91
                                                  elif node.__class__ is MulNode: mul_groups[node.a] = mul_groups.get(node.a, 0) + node.b                                                                # shape/symbolic.py:92
                                                  else: mul_groups[node] = mul_groups.get(node, 0) + 1                                                                                                   # shape/symbolic.py:93

                                                    class Node:                                                                                                                                          # shape/symbolic.py:10
                                                      def __hash__(self): return hash(self.key)                                                                                                          # shape/symbolic.py:27

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          @functools.cached_property                                                                                                                     # shape/symbolic.py:24
                                                          def key(self) -> str: return self.render(ctx="DEBUG")

                                                            class Node:                                                                                                                                  # shape/symbolic.py:10
                                                              def render(self, ops=None, ctx=None) -> Any:                                                                                               # shape/symbolic.py:14
                                                                if ops is None: ops = render_python                                                                                                      # shape/symbolic.py:15
                                                                assert self.__class__ in (Variable, NumNode) or self.min != self.max                                                                     # shape/symbolic.py:16
                                                                return ops[type(self)](self, ops, ctx)                                                                                                   # shape/symbolic.py:17

                                                new_nodes = [MulNode(a, b_sum) if b_sum != 1 else a for a, b_sum in mul_groups.items() if b_sum != 0]                                                    # shape/symbolic.py:94
                                                if num_node_sum: new_nodes.append(NumNode(num_node_sum))                                                                                                 # shape/symbolic.py:95
                                                return create_node(SumNode(new_nodes)) if len(new_nodes) > 1 else new_nodes[0] if len(new_nodes) == 1 else NumNode(0)                                    # shape/symbolic.py:96

                                                  def create_node(ret:Node):                                                                                                                             # shape/symbolic.py:149
                                                    assert ret.min <= ret.max, f"min greater than max! {ret.min} {ret.max} when creating {type(ret)} {ret}"                                              # shape/symbolic.py:150
                                                    if ret.min == ret.max: return NumNode(ret.min)                                                                                                       # shape/symbolic.py:151
                                                    return ret                                                                                                                                           # shape/symbolic.py:152

                                            class Node:                                                                                                                                                  # shape/symbolic.py:10
                                              def __add__(self, b:Union[Node,int]): return Node.sum([self, NumNode(b) if isinstance(b, int) else b])                                                     # shape/symbolic.py:33

                                          merged_size *= s                                                                                                                                               # shape/view.py:164
                                          if not (merged_term >= merged_size) and not (merged_term < 0):                                                                                                 # shape/view.py:165

                                            class Node:                                                                                                                                                  # shape/symbolic.py:10
                                              def __ge__(self, b:Union[Node,int]): return (-self) < (-b+1)                                                                                               # shape/symbolic.py:39

                                                class Node:                                                                                                                                              # shape/symbolic.py:10
                                                  def __neg__(self): return self*-1                                                                                                                      # shape/symbolic.py:32

                                                    class SumNode(RedNode):                                                                                                                              # shape/symbolic.py:237
                                                      @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                   # shape/symbolic.py:240
                                                      def __mul__(self, b: Union[Node, int]): return Node.sum([x*b for x in self.nodes]) # distribute mul into sum

                                                      class Node:                                                                                                                                        # shape/symbolic.py:10
                                                        def __mul__(self, b:Union[Node, int]):                                                                                                           # shape/symbolic.py:41
                                                          if b == 0: return NumNode(0)                                                                                                             # OLD # shape/symbolic.py:42
                                                          if b == 1: return self                                                                                                                   # OLD # shape/symbolic.py:43
                                                          return create_node(MulNode(self, b.b)) if isinstance(b, NumNode) else create_node(MulNode(self, b))                                            # shape/symbolic.py:44

                                                            class OpNode(Node):                                                                                                                          # shape/symbolic.py:182
                                                              def __init__(self, a:Node, b:Union[Node, int]):                                                                                            # shape/symbolic.py:183
                                                                self.a, self.b = a, b                                                                                                                    # shape/symbolic.py:184
                                                                self.min, self.max = self.get_bounds()                                                                                                   # shape/symbolic.py:185

                                                                  class MulNode(OpNode):                                                                                                                 # shape/symbolic.py:197
                                                                    def get_bounds(self) -> Tuple[int, sint]:                                                                                            # shape/symbolic.py:204
                                                                      assert self.a.min >= 0                                                                                                             # shape/symbolic.py:205
                                                                      if isinstance(self.b, int): return (self.a.min*self.b, self.a.max*self.b) if self.b >= 0 else (self.a.max*self.b, self.a.min*self.b) # shape/symbolic.py:206

                                                class Node:                                                                                                                                              # shape/symbolic.py:10
                                                  def __lt__(self, b:Union[Node,int]): return create_node(LtNode(self, b))                                                                               # shape/symbolic.py:40

                                                  class LtNode(OpNode):                                                                                                                                  # shape/symbolic.py:189
                                                    def get_bounds(self) -> Tuple[int, int]:                                                                                                             # shape/symbolic.py:190
                                                      if self.a == self.b: return (0, 0)                                                                                                                 # shape/symbolic.py:191

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          def __eq__(self, other:object) -> bool:                                                                                                        # shape/symbolic.py:29
                                                            if not isinstance(other, Node): return NotImplemented                                                                                        # shape/symbolic.py:30

                                                      if isinstance(self.b, int): return (1, 1) if self.a.max < self.b else (0, 0) if self.a.min >= self.b else (0, 1)                                   # shape/symbolic.py:192

                                            class Node:                                                                                                                                                  # shape/symbolic.py:10
                                              def __bool__(self): return not (self.max == self.min == 0)                                                                                                 # shape/symbolic.py:28

                                            extents.append((merged_size, merged_term))                                                                                                                   # shape/view.py:166
                                            merged_size, merged_term = 1, NumNode(0)                                                                                                                     # shape/view.py:167

                                        if merged_term: return None                                                                                                                                      # shape/view.py:168

                                        if (vm2_shape := tuple(s for s,_ in reversed(extents))) != vm2.shape:                                                                                            # shape/view.py:169
                                        if vm2.mask:                                                                                                                                                     # shape/view.py:172
                                          newb, newe, bad = [0] * len(vm1.shape), list(vm1.shape), False                                                                                                 # shape/view.py:174
                                          for d2, ((b, e), o, (_, t)) in enumerate(zip(vm2.mask, origin, reversed(extents))):                                                                            # shape/view.py:175
                                            if not (t.min < b or t.max >= e): continue                                                                                                                   # shape/view.py:176
                                            if not isinstance(o, int) or not isinstance(b, int) or not isinstance(e, int):                                                                               # shape/view.py:177
                                            term = terms[d2]                                                                                                                                             # shape/view.py:180
                                            if len(term) != 1:                                                                                                                                           # shape/view.py:181
                                              if not term and newe: newe[0] = 0                                                                                                                          # shape/view.py:182
                                              else: bad = True                                                                                                                                           # shape/view.py:183
                                              continue                                                                                                                                                   # shape/view.py:184
                                          for b, e, s in zip(newb, newe, vm1.shape):                                                                                                                     # shape/view.py:193
                                            if b != 0 or e != s:                                                                                                                                         # shape/view.py:194
                                          if bad: return None                                                                                                                                            # shape/view.py:197

                                    def _recursive_lazyop(buf:LazyBuffer, inputs:Dict[LazyBuffer, int], outputs:Tuple[LazyBuffer, ...], var_vals:Dict[Variable, int], st:ShapeTracker,                   # engine/schedule.py:40
                                                          realizes:Dict[LazyBuffer, None], assign_targets:Dict[LazyBuffer, LazyBuffer],
                                                          reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> LazyOp:
                                      if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                        # OLD # engine/schedule.py:44
                                      if (buf, st) in cache: return cache[(buf, st)]                                                                                                               # OLD # engine/schedule.py:45
                                      arg = buf.arg                                                                                                                                                # OLD # engine/schedule.py:46
                                      if buf.op is MetaOps.CONST:                                                                                                                                  # OLD # engine/schedule.py:49
                                        unbound_st, st_var_vals = st.simplify().unbind()                                                                                                                 # engine/schedule.py:50

                                          @dataclass(frozen=True)                                                                                                                                        # shape/shapetracker.py:10
                                          class ShapeTracker:
                                            def unbind(self) -> Tuple[ShapeTracker, Dict[Variable, int]]:                                                                                                # shape/shapetracker.py:55
                                              unbound_views, var_vals = zip(*[v.unbind() for v in self.views])                                                                                           # shape/shapetracker.py:56

                                            @dataclass(frozen=True)                                                                                                                                      # shape/view.py:85
                                            class View:
                                              @functools.lru_cache(None)  # pylint: disable=method-cache-max-size-none                                                                                   # shape/view.py:125
                                              def unbind(self) -> Tuple[View, Dict[Variable, int]]:
                                                var_unboundvar_val = [(v, v.unbind()) for v in self.vars()]                                                                                              # shape/view.py:126

                                                unbound_vars = {v:uv for v,(uv,_) in var_unboundvar_val}                                                                                                 # shape/view.py:127
                                                new_shape = tuple(map(substitute, self.shape))                                                                                                           # shape/view.py:129

                                                    @functools.lru_cache(None)  # pylint: disable=method-cache-max-size-none                                                                             # shape/view.py:125
                                                    def unbind(self) -> Tuple[View, Dict[Variable, int]]:
                                                  @dataclass(frozen=True)                                                                                                                                # shape/view.py:85
                                                  class View:
                                                      def substitute(x): return x if isinstance(x, int) else x.substitute(unbound_vars)                                                                  # shape/view.py:128

                                                new_strides = tuple(map(substitute, self.strides))                                                                                                       # shape/view.py:130

                                                new_offset = substitute(self.offset)                                                                                                                     # shape/view.py:131

                                                new_mask = tuple((substitute(x[0]), substitute(x[1])) for x in self.mask) if self.mask is not None else None                                             # shape/view.py:132

                                                return View.create(new_shape, new_strides, new_offset, new_mask), dict(x[1] for x in var_unboundvar_val)                                                 # shape/view.py:133

                                              return ShapeTracker(tuple(unbound_views)), merge_dicts(var_vals)                                                                                           # shape/shapetracker.py:57

                                        var_vals.update(st_var_vals)                                                                                                                                     # engine/schedule.py:51
                                        if isinstance(arg, Variable):                                                                                                                                    # engine/schedule.py:52
                                        else: assert isinstance(arg, get_args(ConstType)), f"cannot create ConstBuffer with value {arg}"                                                                 # engine/schedule.py:55
                                        return LazyOp(BufferOps.CONST, (), ConstBuffer(arg, buf.dtype, unbound_st))                                                                                      # engine/schedule.py:56

                              if out.op is MetaOps.ASSIGN and out.arg:                                                                                                                                   # engine/schedule.py:155
                              output_st, vv = output_st.simplify().unbind()                                                                                                                              # engine/schedule.py:158

                              if vv: var_vals.update(vv)                                                                                                                                                 # engine/schedule.py:159
                              ast.append(LazyOp(BufferOps.STORE, (lop,), MemBuffer(i, out.dtype, output_st)))                                                                                            # engine/schedule.py:160
                            return LazyOp(MetaOps.KERNEL, tuple(ast)), list(inputs), var_vals, dedup([x[0].metadata for x in cache if x[0].metadata and x[0] not in inputs])                             # engine/schedule.py:161

                            @dataclass(frozen=True)                                                                                                                                                      # helpers.py:114
                            class Metadata:
                              def __hash__(self): return hash(self.name)                                                                                                                                 # helpers.py:118

                        def lower_schedule_item(si:ScheduleItem) -> ExecItem:                                                                                                                            # engine/realize.py:187
                          assert len(set(x.device for x in si.bufs)) == 1 or si.ast.op is MetaOps.COPY or getenv("USE_COPY_KERNEL")                                                                # OLD # engine/realize.py:188
                          if si.ast.op is MetaOps.KERNEL:                                                                                                                                          # OLD # engine/realize.py:189
                            runner = get_runner(si.outputs[0].device, si.ast)                                                                                                                            # engine/realize.py:190

                              def get_runner(dname:str, ast:LazyOp) -> CompiledRunner:                                                                                                                   # engine/realize.py:149
                                ckey = (dname, ast, BEAM.value, False)                                                                                                                                   # engine/realize.py:150
                                if cret:=method_cache.get(ckey): return cret                                                                                                                             # engine/realize.py:151

                                  @dataclass(frozen=True, eq=False)                                                                                                                                      # ops.py:55
                                  class LazyOp:
                                    def __hash__(self): return self.hash                                                                                                                                 # ops.py:82

                                      @dataclass(frozen=True, eq=False)                                                                                                                                  # ops.py:55
                                      class LazyOp:
                                        @functools.cached_property                                                                                                                                       # ops.py:81
                                        def hash(self): return hash((self.op, self.src, self.arg))

                                bkey = (dname.split(":")[0], ast, BEAM.value, True)                                                                                                                      # engine/realize.py:152
                                if bret:=method_cache.get(bkey):                                                                                                                                         # engine/realize.py:153

                                  prg: Program = get_kernel(Device[dname].renderer, ast).to_program()                                                                                                    # engine/realize.py:156

                                    def get_kernel(renderer:Renderer, ast:LazyOp) -> Kernel:                                                                                                             # engine/realize.py:16
                                      if DEBUG >= 5:                                                                                                                                                     # engine/realize.py:17

                                      k = Kernel(ast, opts=renderer).required_optimizations()                                                                                                            # engine/realize.py:19

                                        class Kernel:                                                                                                                                                    # codegen/kernel.py:54
                                          def __init__(self, *ast:LazyOp, opts:Optional[Renderer]=None):                                                                                                 # codegen/kernel.py:55
                                            if len(ast) > 1 or ast[0].op is BufferOps.STORE:                                                                                                             # codegen/kernel.py:56
                                              assert len(ast) == 1 and ast[0].op is MetaOps.KERNEL                                                                                                       # codegen/kernel.py:60
                                              self.ast = ast[0]                                                                                                                                          # codegen/kernel.py:61
                                            self.opts = opts if opts is not None else Device[Device.DEFAULT].renderer                                                                                    # codegen/kernel.py:63
                                            try: lazyop_sts_map = verify_lazyop(self.ast)                                                                                                                # codegen/kernel.py:64

                                              # the living definition of LazyOps                                                                                                                         # ops.py:139
                                              def verify_lazyop(ast:LazyOp) -> Dict[LazyOp, ShapeTracker]:
                                                assert ast.op is MetaOps.KERNEL, "must be SINK"                                                                                                          # ops.py:140
                                                sts: Dict[LazyOp, ShapeTracker] = {}                                                                                                                     # ops.py:141
                                                for i, out in enumerate(ast.src):                                                                                                                        # ops.py:163
                                                  assert out.arg.idx == i, f"unexpected output buffer idx {out.arg.idx} != {i}"                                                                          # ops.py:164
                                                  assert out.op is BufferOps.STORE, f"kernels must have stores as the output, got {out.op}"                                                              # ops.py:165
                                                  assert out.arg.st.size == ast.src[-1].arg.st.size, f"outputs must have the same size, got {out.arg.st.size}"                                           # ops.py:166

                                                  assert_valid(out, out.arg.st)                                                                                                                          # ops.py:167

                                                    # the living definition of LazyOps                                                                                                                   # ops.py:139
                                                    def verify_lazyop(ast:LazyOp) -> Dict[LazyOp, ShapeTracker]:
                                                      def assert_valid(op:LazyOp, st:ShapeTracker):                                                                                                      # ops.py:142
                                                        if op in sts: return                                                                                                                             # ops.py:143

                                                        if op.op is BufferOps.LOAD and op.arg.idx < 0:                                                                                                   # ops.py:145
                                                        for x in op.src: assert_valid(x, st)                                                                                                             # ops.py:148

                                                      # the living definition of LazyOps                                                                                                                 # ops.py:139
                                                      def verify_lazyop(ast:LazyOp) -> Dict[LazyOp, ShapeTracker]:
                                                        def assert_valid(op:LazyOp, st:ShapeTracker):                                                                                                    # ops.py:142
                                                          if op in sts: return                                                                                                                     # OLD # ops.py:143
                                                          if op.op is BufferOps.LOAD and op.arg.idx < 0:                                                                                           # OLD # ops.py:145
                                                          for x in op.src: assert_valid(x, st)                                                                                                     # OLD # ops.py:148
                                                          if op.op in ReduceOps:                                                                                                                         # ops.py:150
                                                            st = op.arg.st if op.op in BufferOps else sts[op.src[0]]                                                                                     # ops.py:157
                                                            for x in op.src:                                                                                                                             # ops.py:158
                                                          sts[op] = st                                                                                                                                   # ops.py:162

                                                      # the living definition of LazyOps                                                                                                                 # ops.py:139
                                                      def verify_lazyop(ast:LazyOp) -> Dict[LazyOp, ShapeTracker]:
                                                        def assert_valid(op:LazyOp, st:ShapeTracker):                                                                                                    # ops.py:142
                                                          if op in sts: return                                                                                                                     # OLD # ops.py:143
                                                          if op.op is BufferOps.LOAD and op.arg.idx < 0:                                                                                           # OLD # ops.py:145
                                                          for x in op.src: assert_valid(x, st)                                                                                                     # OLD # ops.py:148
                                                          if op.op in ReduceOps:                                                                                                                   # OLD # ops.py:150
                                                            axis = op.arg[-1] if op.op is ReduceOps.WMMA else op.arg                                                                                     # ops.py:151
                                                            assert isinstance(axis, tuple) and all(isinstance(i, int) for i in axis), f"reduceop must have axis {op.arg}"                                # ops.py:152
                                                            st = ShapeTracker.from_shape(reduce_st(sts[op.src[0]], axis))                                                                                # ops.py:153

                                                          # the living definition of LazyOps                                                                                                             # ops.py:139
                                                          def verify_lazyop(ast:LazyOp) -> Dict[LazyOp, ShapeTracker]:
                                                            def assert_valid(op:LazyOp, st:ShapeTracker):                                                                                                # ops.py:142
                                                              if op in sts: return                                                                                                                 # OLD # ops.py:143
                                                              if op.op is BufferOps.LOAD and op.arg.idx < 0:                                                                                       # OLD # ops.py:145
                                                              for x in op.src: assert_valid(x, st)                                                                                                 # OLD # ops.py:148
                                                              if op.op in ReduceOps:                                                                                                               # OLD # ops.py:150
                                                                st = op.arg.st if op.op in BufferOps else sts[op.src[0]]                                                                           # OLD # ops.py:157
                                                                for x in op.src:                                                                                                                   # OLD # ops.py:158
                                                                  if sts[x].shape != st.shape:                                                                                                           # ops.py:159

                                                shape_dims = [sorted(dedup(dims)) for dims in zip(*[x.shape for x in sts.values()])]                                                                     # ops.py:168

                                                assert all(len(x) == 1 or (len(x) == 2 and x[0] == 1) for x in shape_dims), f"shapes must have either 1 or n in each dimension, {shape_dims}"            # ops.py:169
                                                return sts                                                                                                                                               # ops.py:170

                                            self.reduceops = dedup([x for x in ordered_lazyops(self.ast) if x.op in ReduceOps])                                                                          # codegen/kernel.py:72

                                                def __init__(self, *ast:LazyOp, opts:Optional[Renderer]=None):                                                                                           # codegen/kernel.py:55
                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                  @functools.lru_cache(None)                                                                                                                             # codegen/kernel.py:71
                                                  def ordered_lazyops(op): return dedup([item for x in op.src for item in ordered_lazyops(x)] + [op])

                                            self.vars = self.ast.vars()                                                                                                                                  # codegen/kernel.py:74

                                              @dataclass(frozen=True, eq=False)                                                                                                                          # ops.py:55
                                              class LazyOp:
                                                def vars(self) -> List[Variable]:                                                                                                                        # ops.py:85
                                                  extract_vars = [x.arg.st.vars() for x in self.lazyops if x.op in BufferOps]                                                                            # ops.py:86

                                                    @dataclass(frozen=True, eq=False)                                                                                                                    # ops.py:55
                                                    class LazyOp:
                                                      @functools.cached_property                                                                                                                         # ops.py:84
                                                      def lazyops(self) -> List[LazyOp]: return dedup([self] + [item for x in self.src for item in x.lazyops])

                                                  const_vars = [x.arg.val for x in self.lazyops if x.op is BufferOps.CONST and isinstance(x.arg.val, Variable)]                                          # ops.py:87
                                                  return sorted(set.union(*extract_vars, set(const_vars)), key=lambda v: v.expr)                                                                         # ops.py:88

                                            self.bufs: List[Union[MemBuffer, ConstBuffer]] = dedup([x.arg for x in self.ast.lazyops if x.op in BufferOps])                                               # codegen/kernel.py:75

                                            earlybufs = [x.arg for reduceop in self.reduceops for x in reduceop.lazyops if x.op in BufferOps]                                                            # codegen/kernel.py:78
                                            self.full_buf_index: int = self.bufs.index(earlybufs[0]) if earlybufs else 0                                                                                 # codegen/kernel.py:79
                                            self.sts: List[ShapeTracker] = [x.st for x in self.bufs]                                                                                                     # codegen/kernel.py:83
                                            for x in self.reduceops:                                                                                                                                     # codegen/kernel.py:87
                                              self.sts.append(lazyop_sts_map[x])                                                                                                                         # codegen/kernel.py:88

                                              self.sts.append(lazyop_sts_map[x.src[0]])                                                                                                                  # codegen/kernel.py:89

                                            reduce = list(enumerate(zip(self.full_shape, self.output_shape)))                                                                                            # codegen/kernel.py:92

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                @property                                                                                                                                                # codegen/kernel.py:157
                                                def full_shape(self) -> Tuple[sint, ...]: return self.sts[self.full_buf_index].shape

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                @property                                                                                                                                                # codegen/kernel.py:154
                                                def output_shape(self) -> Tuple[sint, ...]: return self.sts[0].shape

                                            permute = tuple([i for i,(s,n) in reduce if s == n] + [i for i,(s,n) in reduce if s != n])                                                                   # codegen/kernel.py:93
                                            self.reshape_and_permute(None, permute)                                                                                                                      # codegen/kernel.py:94

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                # apply reshape and permute to all shapetrackers                                                                                                         # codegen/kernel.py:204
                                                def reshape_and_permute(self, new_shape_fxn, axis):
                                                  new_sts = []                                                                                                                                           # codegen/kernel.py:205
                                                  for st in self.sts:                                                                                                                                    # codegen/kernel.py:206
                                                    if new_shape_fxn is not None: st = st.reshape(tuple(new_shape_fxn(st.shape)))                                                                        # codegen/kernel.py:207
                                                    if axis is not None: st = st.permute(tuple(axis))                                                                                                    # codegen/kernel.py:208

                                                    new_sts.append(st)                                                                                                                                   # codegen/kernel.py:209

                                                  self.sts = new_sts                                                                                                                                     # codegen/kernel.py:210

                                            self.applied_opts: List[Opt] = []                                                                                                                            # codegen/kernel.py:97
                                            self.group_for_reduces: int = 0                                                                                                                              # codegen/kernel.py:98
                                            self.upcasted: int = 0                                                                                                                                       # codegen/kernel.py:99
                                            self.local_dims: int = 0                                                                                                                                     # codegen/kernel.py:100
                                            self.tensor_core: Optional[TensorCore] = None                                                                                                                # codegen/kernel.py:101
                                            self.tensor_core_opts: Optional[TensorCoreOptions] = None                                                                                                    # codegen/kernel.py:102
                                            self.use_tensor_cores: int = 0                                                                                                                               # codegen/kernel.py:103
                                            self.bufs_for_tensor_core: Dict[LazyOp, Tuple[int, int]] = {}                                                                                                # codegen/kernel.py:105
                                            self.dont_use_locals: bool = False                                                                                                                           # codegen/kernel.py:106
                                            self.simplify_ones()                                                                                                                                         # codegen/kernel.py:109

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                def simplify_ones(self) -> bool:                                                                                                                         # codegen/kernel.py:231
                                                  if self.shape_len == 0: return False                                                                                                                   # codegen/kernel.py:234

                                                    class Kernel:                                                                                                                                        # codegen/kernel.py:54
                                                      @property                                                                                                                                          # codegen/kernel.py:163
                                                      def shape_len(self) -> int: return len(self.sts[0].shape)

                                                  all_ones = [s==1 for s in self.full_shape]                                                                                                             # codegen/kernel.py:235

                                                  self.local_dims -= sum(all_ones[self.first_reduce-self.local_dims:self.first_reduce])                                                                  # codegen/kernel.py:236

                                                    class Kernel:                                                                                                                                        # codegen/kernel.py:54
                                                      @property                                                                                                                                          # codegen/kernel.py:144
                                                      def first_reduce(self) -> int:
                                                        return [x!=y for x,y in zip(self.sts[0].shape[:self.first_upcast]+(0,), self.full_shape[:self.first_upcast]+(1,))].index(True)                   # codegen/kernel.py:145

                                                          class Kernel:                                                                                                                                  # codegen/kernel.py:54
                                                            @property                                                                                                                                    # codegen/kernel.py:148
                                                            def first_upcast(self) -> int: return self.shape_len-self.upcasted

                                                  self.upcasted -= sum(all_ones[self.first_upcast:]) # TODO: no necessary since upcasted axis can't be un-upcasted                                       # codegen/kernel.py:237

                                                  self.reshape_and_permute(lambda shape: [x for i,x in enumerate(shape) if not all_ones[i]], None)                                                       # codegen/kernel.py:238

                                                  return any(all_ones)                                                                                                                                   # codegen/kernel.py:239

                                            self.simplify_merge_adjacent()                                                                                                                               # codegen/kernel.py:110

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                def simplify_merge_adjacent(self):                                                                                                                       # codegen/kernel.py:241
                                                  if self.shape_len == 0: return                                                                                                                         # codegen/kernel.py:242

                                                  shapes, strides = [x.shape for x in self.sts], [x.real_strides() for x in self.sts]                                                                    # codegen/kernel.py:243

                                                @dataclass(frozen=True)                                                                                                                                  # shape/shapetracker.py:10
                                                class ShapeTracker:
                                                  # NOTE: if a stride is not always valid, it will be None                                                                                               # shape/shapetracker.py:60
                                                  def real_strides(self, ignore_valid=False) -> Tuple[Optional[sint], ...]:
                                                    if len(self.views) == 1 and self.views[-1].mask is None: return self.views[-1].strides                                                               # shape/shapetracker.py:61

                                                @dataclass(frozen=True)                                                                                                                                  # shape/shapetracker.py:10
                                                class ShapeTracker:
                                                  # NOTE: if a stride is not always valid, it will be None                                                                                               # shape/shapetracker.py:60
                                                  def real_strides(self, ignore_valid=False) -> Tuple[Optional[sint], ...]:
                                                    if len(self.views) == 1 and self.views[-1].mask is None: return self.views[-1].strides                                                         # OLD # shape/shapetracker.py:61
                                                    idxs: List[Node] = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(self.shape)]                                                                    # shape/shapetracker.py:62

                                                    idx, valid = self.expr_idxs(idxs)                                                                                                                    # shape/shapetracker.py:63

                                                      @dataclass(frozen=True)                                                                                                                            # shape/shapetracker.py:10
                                                      class ShapeTracker:
                                                        def expr_idxs(self, idxs:Optional[Iterable[Node]]=None) -> Tuple[Node, Node]:                                                                    # shape/shapetracker.py:78
                                                          idxs = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(self.shape)] if idxs is None else list(idxs)                                          # shape/shapetracker.py:79
                                                          idx, valid = self.views[-1].expr(idxs)                                                                                                         # shape/shapetracker.py:80

                                                            @dataclass(frozen=True)                                                                                                                      # shape/view.py:85
                                                            class View:
                                                              def expr(self, idxs:List[Node], valid:Optional[Node]=None) -> Tuple[Node, Node]:                                                           # shape/view.py:316
                                                                assert len(idxs) == len(self.shape), f"need an idx for all dimensions {idxs} vs {self.shape}"                                            # shape/view.py:317
                                                                iexpr: List[Node] = [NumNode(self.offset) if isinstance(self.offset, int) else self.offset]                                              # shape/view.py:318

                                                                vexpr: List[Node] = [valid] if valid is not None else []                                                                                 # shape/view.py:319
                                                                for idx,sh,st,m in zip(idxs, self.shape, self.strides, self.mask if self.mask is not None else [None]*len(self.shape)):                  # shape/view.py:320
                                                                  if sh != 1 and st != 0: iexpr.append(idx*st)                                                                                           # shape/view.py:321

                                                                  if m is not None: vexpr += [create_ge_node(idx, m[0]), create_lt_node(idx, m[1])]  # idx >= m[0], idx < m[1]                           # shape/view.py:322

                                                                return Node.sum(iexpr), Node.ands(vexpr)                                                                                                 # shape/view.py:323

                                                                  class Node:                                                                                                                            # shape/symbolic.py:10
                                                                    @staticmethod                                                                                                                        # shape/symbolic.py:99
                                                                    def ands(nodes:List[Node]) -> Node:
                                                                      if not nodes: return NumNode(1)                                                                                                    # shape/symbolic.py:100

                                                          for view in reversed(self.views[0:-1]):                                                                                                        # shape/shapetracker.py:81
                                                            if valid.max == 0: return NumNode(-1), valid                                                                                                 # shape/shapetracker.py:82
                                                            view = view.minify()                                                                                                                         # shape/shapetracker.py:83

                                                              @dataclass(frozen=True)                                                                                                                    # shape/view.py:85
                                                              class View:
                                                                @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                         # shape/view.py:209
                                                                def minify(self):
                                                                  min_shape = tuple(x[0] for x in _merge_dims(self.shape, self.strides, self.mask))                                                      # shape/view.py:210
                                                                  return nv if (nv := self.reshape(min_shape)) else self                                                                                 # shape/view.py:211

                                                            acc, idxs = 1, []                                                                                                                            # shape/shapetracker.py:84
                                                            for d in reversed(view.shape):                                                                                                               # shape/shapetracker.py:85
                                                              idxs.append((idx//acc)%d)                                                                                                                  # shape/shapetracker.py:86

                                                        def render_mulnode(node:MulNode, ops, ctx):                                                                                                      # shape/symbolic.py:306
                                                          if isinstance(node.a,Variable) and isinstance(node.b,Variable) and node.a.expr and node.b.expr and node.b.expr < node.a.expr:                  # shape/symbolic.py:308
                                                          return f"({node.a.render(ops,ctx)}*{sym_render(node.b,ops,ctx)})"                                                                              # shape/symbolic.py:310

                                                            def sym_render(a: Union[Node, int], ops=None, ctx=None) -> str: return str(a) if isinstance(a, int) else a.render(ops, ctx)                  # shape/symbolic.py:296

                                                                class SumNode(RedNode):                                                                                                                  # shape/symbolic.py:237
                                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                       # shape/symbolic.py:242
                                                                  def __floordiv__(self, b: Union[Node, sint], factoring_allowed=True):
                                                                    if self == b: return NumNode(1)                                                                                                      # shape/symbolic.py:243

                                                                    fully_divided: List[Node] = []                                                                                                       # shape/symbolic.py:244
                                                                    rest: List[Node] = []                                                                                                                # shape/symbolic.py:245
                                                                    if isinstance(b, Node):                                                                                                              # shape/symbolic.py:246
                                                                    if b == 1: return self                                                                                                               # shape/symbolic.py:252

                                                                class SumNode(RedNode):                                                                                                                  # shape/symbolic.py:237
                                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                       # shape/symbolic.py:277
                                                                  def __mod__(self, b: Union[Node, int]):
                                                                    if self == b: return NumNode(0)                                                                                                      # shape/symbolic.py:278

                                                                    if isinstance(b, Node) and (b - self).min > 0: return self # b - self simplifies the node                                            # shape/symbolic.py:279
                                                                    new_sum = Node.sum([node%b if node.__class__ in (NumNode, MulNode) else node for node in self.nodes])                                # shape/symbolic.py:280

                                                                  class MulNode(OpNode):                                                                                                                 # shape/symbolic.py:197
                                                                    def __mod__(self, b: Union[Node, int]): return Node.__mod__(self.a * (self.b%b), b)                                                  # shape/symbolic.py:203

                                                                      class Node:                                                                                                                        # shape/symbolic.py:10
                                                                        def __mod__(self, b:Union[Node,int]):                                                                                            # shape/symbolic.py:69
                                                                          if isinstance(b, Node):                                                                                                        # shape/symbolic.py:70
                                                                          assert b > 0                                                                                                                   # shape/symbolic.py:75
                                                                          if b == 1: return NumNode(0)                                                                                                   # shape/symbolic.py:76
                                                                          if isinstance(self.max, int) and isinstance(self.min, int):                                                                    # shape/symbolic.py:77
                                                                            if (self.min//b) == (self.max//b): return self - (b*(self.min//b))                                                           # shape/symbolic.py:78

                                                                              class Node:                                                                                                                # shape/symbolic.py:10
                                                                                def __sub__(self, b:Union[Node,int]): return self+-b                                                                     # shape/symbolic.py:35

                                                                    return Node.__mod__(new_sum, b)                                                                                                      # shape/symbolic.py:281

                                                              acc *= d                                                                                                                                   # shape/shapetracker.py:87

                                                                class SumNode(RedNode):                                                                                                                  # shape/symbolic.py:237
                                                                  @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                       # shape/symbolic.py:242
                                                                  def __floordiv__(self, b: Union[Node, sint], factoring_allowed=True):
                                                                    if self == b: return NumNode(1)                                                                                                # OLD # shape/symbolic.py:243
                                                                    fully_divided: List[Node] = []                                                                                                 # OLD # shape/symbolic.py:244
                                                                    rest: List[Node] = []                                                                                                          # OLD # shape/symbolic.py:245
                                                                    if isinstance(b, Node):                                                                                                        # OLD # shape/symbolic.py:246
                                                                    if b == 1: return self                                                                                                         # OLD # shape/symbolic.py:252
                                                                    if not factoring_allowed: return Node.__floordiv__(self, b, factoring_allowed)                                                       # shape/symbolic.py:253
                                                                    _gcd = b                                                                                                                             # shape/symbolic.py:254
                                                                    divisor = 1                                                                                                                          # shape/symbolic.py:255
                                                                    for x in self.flat_components:                                                                                                       # shape/symbolic.py:256

                                                                      if x.__class__ in (NumNode, MulNode):                                                                                              # shape/symbolic.py:257
                                                                        rest.append(x)                                                                                                                   # shape/symbolic.py:270
                                                                        _gcd = 1                                                                                                                         # shape/symbolic.py:271
                                                                        if x.b % b == 0: fully_divided.append(x // b)                                                                                    # shape/symbolic.py:258
                                                                          if x.__class__ is NumNode and (div := x.b // b):                                                                               # shape/symbolic.py:260
                                                                          rest.append(x)                                                                                                                 # shape/symbolic.py:263
                                                                          if isinstance(x.b, int):                                                                                                       # shape/symbolic.py:264
                                                                            _gcd = gcd(_gcd, x.b)                                                                                                        # shape/symbolic.py:265
                                                                            if x.__class__ == MulNode and divisor == 1 and b % x.b == 0: divisor = x.b                                                   # shape/symbolic.py:266
                                                                        rest.append(x)                                                                                                             # OLD # shape/symbolic.py:270
                                                                        _gcd = 1                                                                                                                   # OLD # shape/symbolic.py:271
                                                                    if _gcd > 1: return Node.sum(fully_divided) + Node.sum(rest).__floordiv__(_gcd) // (b//_gcd)                                         # shape/symbolic.py:272
                                                                    if divisor > 1: return Node.sum(fully_divided) + Node.sum(rest).__floordiv__(divisor) // (b//divisor)                                # shape/symbolic.py:273
                                                                    return Node.sum(fully_divided) + Node.__floordiv__(Node.sum(rest), b)                                                                # shape/symbolic.py:274

                                                                      class Node:                                                                                                                        # shape/symbolic.py:10
                                                                        def __floordiv__(self, b:Union[Node,int], factoring_allowed=True):                                                               # shape/symbolic.py:51
                                                                          if isinstance(b, Node):                                                                                                        # shape/symbolic.py:52
                                                                          assert b != 0                                                                                                                  # shape/symbolic.py:57
                                                                          if b < 0: return (self*-1).__floordiv__(-b, factoring_allowed)                                                                 # shape/symbolic.py:58
                                                                          if b == 1: return self                                                                                                         # shape/symbolic.py:59
                                                                          if self.min < 0:                                                                                                               # shape/symbolic.py:62
                                                                          return create_node(DivNode(self, b))                                                                                           # shape/symbolic.py:66

                                                                        class DivNode(OpNode):                                                                                                           # shape/symbolic.py:211
                                                                          def get_bounds(self) -> Tuple[int, sint]:                                                                                      # shape/symbolic.py:213
                                                                            assert self.a.min >= 0 and isinstance(self.b, int)                                                                           # shape/symbolic.py:214
                                                                            return self.a.min//self.b, self.a.max//self.b                                                                                # shape/symbolic.py:215

                                                            idx, valid = view.expr(idxs[::-1], valid)                                                                                                    # shape/shapetracker.py:88

                                                        def create_ge_node(lhs:Node, b:Union[Node, int]): return create_lt_node(-lhs, -b+1)                                                              # shape/symbolic.py:180

                                                          def create_lt_node(lhs:Node, b:Union[Node, int]):                                                                                              # shape/symbolic.py:154
                                                            if isinstance(lhs, SumNode):                                                                                                                 # shape/symbolic.py:155
                                                            if isinstance(lhs, MulNode):                                                                                                                 # shape/symbolic.py:174
                                                              if isinstance(b, Node) or isinstance(lhs.b, Node) or lhs.b == -1: return create_node(LtNode(lhs, b))                                       # shape/symbolic.py:175

                                                        def create_lt_node(lhs:Node, b:Union[Node, int]):                                                                                                # shape/symbolic.py:154
                                                          if isinstance(lhs, SumNode):                                                                                                             # OLD # shape/symbolic.py:155
                                                          if isinstance(lhs, MulNode):                                                                                                             # OLD # shape/symbolic.py:174
                                                            if isinstance(b, Node) or isinstance(lhs.b, Node) or lhs.b == -1: return create_node(LtNode(lhs, b))                                   # OLD # shape/symbolic.py:175
                                                          return create_node(LtNode(lhs, b))                                                                                                             # shape/symbolic.py:178

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          def __eq__(self, other:object) -> bool:                                                                                                        # shape/symbolic.py:29
                                                            if not isinstance(other, Node): return NotImplemented                                                                                  # OLD # shape/symbolic.py:30
                                                            return self.key == other.key                                                                                                                 # shape/symbolic.py:31

                                                        def create_lt_node(lhs:Node, b:Union[Node, int]):                                                                                                # shape/symbolic.py:154
                                                          if isinstance(lhs, SumNode):                                                                                                             # OLD # shape/symbolic.py:155
                                                            if isinstance(b, int):                                                                                                                       # shape/symbolic.py:156
                                                              new_sum = []                                                                                                                               # shape/symbolic.py:157
                                                              for x in lhs.nodes:                                                                                                                        # shape/symbolic.py:158
                                                                if isinstance(x, NumNode): b -= x.b                                                                                                      # shape/symbolic.py:160
                                                                else: new_sum.append(x)                                                                                                                  # shape/symbolic.py:161
                                                              lhs = Node.sum(new_sum)                                                                                                                    # shape/symbolic.py:162

                                                              nodes = lhs.nodes if isinstance(lhs, SumNode) else [lhs]                                                                                   # shape/symbolic.py:163
                                                              assert all(not isinstance(node, MulNode) or isinstance(node.b, int) for node in nodes), "not supported"                                    # shape/symbolic.py:164
                                                              muls, others = partition(nodes, lambda x: isinstance(x, MulNode) and x.b > 0 and x.max >= b)                                               # shape/symbolic.py:165

                                                                def partition(lst:List[T], fxn:Callable[[T],bool]) -> Tuple[List[T], List[T]]:                                                           # helpers.py:43
                                                                  a:List[T] = []                                                                                                                         # helpers.py:44
                                                                  b:List[T] = []                                                                                                                         # helpers.py:45
                                                                  for s in lst: (a if fxn(s) else b).append(s)                                                                                           # helpers.py:46
                                                                  return a,b                                                                                                                             # helpers.py:47

                                                              if muls:                                                                                                                                   # shape/symbolic.py:166
                                                            return create_node(LtNode(lhs, b)) if isinstance(lhs, SumNode) else create_lt_node(lhs, b)                                                   # shape/symbolic.py:173

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          @staticmethod                                                                                                                                  # shape/symbolic.py:99
                                                          def ands(nodes:List[Node]) -> Node:
                                                            if not nodes: return NumNode(1)                                                                                                        # OLD # shape/symbolic.py:100
                                                            if len(nodes) == 1: return nodes[0]                                                                                                          # shape/symbolic.py:101
                                                            if any(not x for x in nodes): return NumNode(0)                                                                                              # shape/symbolic.py:102

                                                            nodes = [x for x in nodes if x.min != x.max]                                                                                                 # shape/symbolic.py:105
                                                            return create_node(AndNode(nodes)) if len(nodes) > 1 else (nodes[0] if len(nodes) == 1 else NumNode(1))                                      # shape/symbolic.py:106

                                                          assert not isinstance(idx.min, int) or idx.min >= -2**31, f"idx.min too small. {idx=}, {idx.min=}"                                             # shape/shapetracker.py:89
                                                          assert not isinstance(idx.max, int) or idx.max < 2**31, f"idx.max too big. {idx=}, {idx.max=}"                                                 # shape/shapetracker.py:90
                                                          return idx, valid                                                                                                                              # shape/shapetracker.py:91

                                                    ret: List[Optional[sint]] = [None] * len(self.views[-1].shape)                                                                                       # shape/shapetracker.py:64
                                                    bad_idx_vars: Set[Variable] = set()                                                                                                                  # shape/shapetracker.py:65
                                                    for this_dim in (idx.nodes if isinstance(idx, SumNode) else [idx]):                                                                                  # shape/shapetracker.py:66
                                                      idx_maybe, stride_maybe = (this_dim.a, this_dim.b) if isinstance(this_dim, MulNode) else (this_dim, 1)                                             # shape/shapetracker.py:67
                                                      try: ret[idxs.index(idx_maybe)] = cast(sint, stride_maybe)                                                                                         # shape/shapetracker.py:68

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          def __repr__(self): return self.render(ctx="REPR")                                                                                             # shape/symbolic.py:25

                                                      except ValueError: bad_idx_vars = bad_idx_vars.union(idx_maybe.vars())                                                                             # shape/shapetracker.py:69

                                                        class Node:                                                                                                                                      # shape/symbolic.py:10
                                                          def vars(self) -> Set[Variable]: return set()                                                                                                  # shape/symbolic.py:18

                                                    idx_vars, valid_vars = idx.vars(), valid.vars()                                                                                                      # shape/shapetracker.py:70

                                                      class OpNode(Node):                                                                                                                                # shape/symbolic.py:182
                                                        def vars(self): return self.a.vars() | (self.b.vars() if isinstance(self.b, Node) else set())                                                    # shape/symbolic.py:186

                                                          class RedNode(Node):                                                                                                                           # shape/symbolic.py:230
                                                            def vars(self) -> Set[Variable]: return set().union(*[x.vars() for x in self.nodes])                                                         # shape/symbolic.py:234

                                                            class Variable(Node):                                                                                                                        # shape/symbolic.py:110
                                                              def vars(self): return {self}                                                                                                              # shape/symbolic.py:133

                                                    for i,tidx in enumerate(idxs):                                                                                                                       # shape/shapetracker.py:71
                                                      if tidx in bad_idx_vars or (tidx in valid_vars and not ignore_valid): ret[i] = None                                                                # shape/shapetracker.py:72

                                                    return tuple(ret)                                                                                                                                    # shape/shapetracker.py:74

                                                  if isinstance(self.bufs[0].dtype, ImageDType):                                                                                                         # codegen/kernel.py:246
                                                  rets = [[(s[0], st[0])] for s,st in zip(shapes, strides)]                                                                                              # codegen/kernel.py:262
                                                  for i in range(1, len(shapes[0])):                                                                                                                     # codegen/kernel.py:263
                                                    can_merge = []                                                                                                                                       # codegen/kernel.py:264
                                                    for s,st,ret in zip(shapes, strides, rets):                                                                                                          # codegen/kernel.py:265
                                                      si, sti, last_st = s[i], st[i], ret[-1][1]                                                                                                         # codegen/kernel.py:267
                                                      can_merge.append((sti is not None) and ((sti != 0 and last_st == si*sti) or (sti == 0 and last_st == 0)))                                          # codegen/kernel.py:268
                                                    mergeable = all(can_merge) and i != self.first_reduce                                                                                                # codegen/kernel.py:270
                                                    for j,(s,st) in enumerate(zip(shapes, strides)):                                                                                                     # codegen/kernel.py:271
                                                      if mergeable: rets[j][-1] = (rets[j][-1][0] * s[i], st[i])                                                                                         # codegen/kernel.py:272
                                                      else: rets[j].append((s[i], st[i]))                                                                                                                # codegen/kernel.py:273
                                                  for i,x in enumerate(rets[:len(self.sts)]): self.sts[i] = self.sts[i].reshape(tuple([y[0] for y in x]))                                                # codegen/kernel.py:276

                                        class Kernel:                                                                                                                                                    # codegen/kernel.py:54
                                          def required_optimizations(self) -> Kernel:                                                                                                                    # codegen/kernel.py:483
                                            if self.bufs[0].dtype.__class__ is ImageDType:                                                                                                               # codegen/kernel.py:484
                                            return self                                                                                                                                                  # codegen/kernel.py:489

                                      if not NOOPT:                                                                                                                                                      # engine/realize.py:20

                                        if not (used_tensor_cores:=k.apply_tensor_cores(getenv("TC", 1))): k.hand_coded_optimizations()                                                                  # engine/realize.py:21

                                          class Kernel:                                                                                                                                                  # codegen/kernel.py:54
                                            def apply_tensor_cores(self, use_tensor_cores=1, extra_opts:Optional[List[Opt]]=None, axis:int=0, tc_opt:Optional[int]=None) -> bool:                        # codegen/kernel.py:348
                                              if tc_opt is None: tc_opt = TC_OPT.value                                                                                                                   # codegen/kernel.py:363
                                              if not self.opts.tensor_cores and use_tensor_cores != 2: return False                                                                                      # codegen/kernel.py:364

                                          class Kernel:                                                                                                                                                  # codegen/kernel.py:54
                                            def hand_coded_optimizations(self) -> Kernel:                                                                                                                # codegen/kernel.py:491
                                              self.required_optimizations()                                                                                                                              # codegen/kernel.py:492

                                              MV_BLOCKSIZE, MV_THREADS_PER_ROW, MV_ROWS_PER_THREAD = getenv("MV_BLOCKSIZE", 4), getenv("MV_THREADS_PER_ROW", 8), getenv("MV_ROWS_PER_THREAD", 4)         # codegen/kernel.py:495

                                              if self.opts.has_local and getenv("MV",1) != 0 and (MV_BLOCKSIZE > 1 or MV_THREADS_PER_ROW > 1 or MV_ROWS_PER_THREAD > 1) and  \                           # codegen/kernel.py:496
                                                  self.reduceop is not None and self.reduceop.op is ReduceOps.SUM and len(self.full_shape) >= 2 and self.opts.has_shared and \
                                                  (mulop:=self.reduceop.src[0]).op is BinaryOps.MUL and mulop.src[0].op is BufferOps.LOAD and mulop.src[1].op is BufferOps.LOAD:
                                              if self.opts.has_local and self.opts.has_shared and all_int(self.sts[0].shape[:self.first_reduce]):                                                        # codegen/kernel.py:512
                                              for buf_index,buf in enumerate(self.bufs):                                                                                                                 # codegen/kernel.py:531
                                                unit_stride_axes_mul_4 = [i for i in self.sts[buf_index].unit_stride_axes(ignore_valid=True) if self.sts[buf_index].shape[i]%4 == 0]                     # codegen/kernel.py:532

                                                  @dataclass(frozen=True)                                                                                                                                # shape/shapetracker.py:10
                                                  class ShapeTracker:
                                                    def unit_stride_axes(self, ignore_valid=False) -> List[int]: return [i for i,st in enumerate(self.real_strides(ignore_valid)) if st == 1]            # shape/shapetracker.py:76

                                                if buf.dtype.__class__ is ImageDType:                                                                                                                    # codegen/kernel.py:533

                                            @dataclass(frozen=True)                                                                                                                                      # shape/shapetracker.py:10
                                            class ShapeTracker:
                                              # NOTE: if a stride is not always valid, it will be None                                                                                                   # shape/shapetracker.py:60
                                              def real_strides(self, ignore_valid=False) -> Tuple[Optional[sint], ...]:
                                                if len(self.views) == 1 and self.views[-1].mask is None: return self.views[-1].strides                                                             # OLD # shape/shapetracker.py:61
                                                idxs: List[Node] = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(self.shape)]                                                                  # OLD # shape/shapetracker.py:62
                                                idx, valid = self.expr_idxs(idxs)                                                                                                                  # OLD # shape/shapetracker.py:63
                                                ret: List[Optional[sint]] = [None] * len(self.views[-1].shape)                                                                                     # OLD # shape/shapetracker.py:64
                                                bad_idx_vars: Set[Variable] = set()                                                                                                                # OLD # shape/shapetracker.py:65
                                                for this_dim in (idx.nodes if isinstance(idx, SumNode) else [idx]):                                                                                # OLD # shape/shapetracker.py:66
                                                  idx_maybe, stride_maybe = (this_dim.a, this_dim.b) if isinstance(this_dim, MulNode) else (this_dim, 1)                                           # OLD # shape/shapetracker.py:67
                                                  try: ret[idxs.index(idx_maybe)] = cast(sint, stride_maybe)                                                                                       # OLD # shape/shapetracker.py:68
                                                  except ValueError: bad_idx_vars = bad_idx_vars.union(idx_maybe.vars())                                                                           # OLD # shape/shapetracker.py:69
                                                idx_vars, valid_vars = idx.vars(), valid.vars()                                                                                                    # OLD # shape/shapetracker.py:70
                                                for i,tidx in enumerate(idxs):                                                                                                                     # OLD # shape/shapetracker.py:71
                                                  if tidx in bad_idx_vars or (tidx in valid_vars and not ignore_valid): ret[i] = None                                                              # OLD # shape/shapetracker.py:72
                                                  elif tidx not in idx_vars: ret[i] = 0                                                                                                                  # shape/shapetracker.py:73

                                              if self.group_for_reduces: return self                                                                                                                     # codegen/kernel.py:542
                                              to_upcast: List[int] = []                                                                                                                                  # codegen/kernel.py:551
                                              for axis in range(self.first_reduce):                                                                                                                      # codegen/kernel.py:553

                                                if isinstance(self.full_shape[axis], int) and self.full_shape[axis] <= 7 and any(st.axis_is_masked(axis) for st in self.sts) and \                       # codegen/kernel.py:556
                                                  prod(self.full_shape[self.first_upcast:]) * prod(self.full_shape[j] for j in to_upcast) * self.full_shape[axis] <= 7 * 7:

                                              for axis in to_upcast[::-1]: self.apply_opt(Opt(OptOps.UPCAST, axis, 0))                                                                                   # codegen/kernel.py:560
                                              upcasted_axis = set()                                                                                                                                      # codegen/kernel.py:563
                                              while prod(self.sts[0].shape[:self.first_reduce]) >= 1024:                                                                                                 # codegen/kernel.py:564

                                              if self.first_reduce < self.first_upcast and (prod(self.full_shape[self.first_upcast:]) <= 4 or not any(r for _,_,r in self.upcasted_axis(self.full_buf_index))) and (self.upcasted == 0 or prod(self.full_shape[-self.upcasted:]) < 64):  # noqa: E501 # codegen/kernel.py:578

                                                if (s:=self.full_unupcasted_shape[-1]) <= 32 and isinstance(s, int):  # NOTE: cannot loop unroll symbolic axis                                           # codegen/kernel.py:579

                                                  class Kernel:                                                                                                                                          # codegen/kernel.py:54
                                                    @property                                                                                                                                            # codegen/kernel.py:160
                                                    def full_unupcasted_shape(self) -> Tuple[sint, ...]: return self.full_shape[:self.first_upcast]

                                                  for splits in [4]:                                                                                                                                     # codegen/kernel.py:585
                                                    if self.full_unupcasted_shape[-1]%splits == 0:                                                                                                       # codegen/kernel.py:586

                                                      self.apply_opt(Opt(OptOps.UNROLL, len(self.full_unupcasted_shape)-1-self.first_reduce, splits))                                                    # codegen/kernel.py:587

                                                        class Kernel:                                                                                                                                    # codegen/kernel.py:54
                                                          def apply_opt(self, opt:Opt, append_opt:bool=True):                                                                                            # codegen/kernel.py:389
                                                            check(not self.dont_use_locals or opt.op not in {OptOps.LOCAL, OptOps.GROUP, OptOps.GROUPTOP, OptOps.UPCASTMID}, "not using locals")         # codegen/kernel.py:390

                                                              def check(cond:bool, msg:str=""):                                                                                                          # codegen/kernel.py:27
                                                                if not cond: raise KernelOptError(msg)                                                                                                   # codegen/kernel.py:28

                                                            if opt.op is OptOps.TC:                                                                                                                      # codegen/kernel.py:392
                                                            axis = opt.real_axis(self)                                                                                                                   # codegen/kernel.py:400

                                                              @dataclass(frozen=True, order=True)                                                                                                        # codegen/kernel.py:31
                                                              class Opt:
                                                                def real_axis(self, k:Kernel):                                                                                                           # codegen/kernel.py:36
                                                                  if self.axis is None: return -1                                                                                                        # codegen/kernel.py:37
                                                                  if self.op is OptOps.UNROLL: return k.first_reduce+self.axis                                                                           # codegen/kernel.py:38

                                                            check(axis < len(self.full_shape), "invalid axis")                                                                                           # codegen/kernel.py:401

                                                            if opt.op is OptOps.SWAP: amt = cast(int, opt.amt)  # amt is an axis in the SWAPs                                                            # codegen/kernel.py:403
                                                            elif opt.amt is not None:                                                                                                                    # codegen/kernel.py:404
                                                              amt = opt.amt if opt.amt != 0 else self.full_shape[axis]                                                                                   # codegen/kernel.py:405
                                                              check(isinstance(amt, int) and amt != 1, "shift/padto of amt 1 or Node is meaningless")                                                    # codegen/kernel.py:406

                                                              if opt.op is not OptOps.PADTO: check(self.full_shape[axis] % amt == 0, "no longer valid shift")                                            # codegen/kernel.py:407

                                                            if self.reduceop and (opt.op in {OptOps.GROUP, OptOps.GROUPTOP} or (self.group_for_reduces and opt.op not in {OptOps.NOLOCALS, OptOps.PADTO})): # codegen/kernel.py:410

                                                              class Kernel:                                                                                                                              # codegen/kernel.py:54
                                                                @property                                                                                                                                # codegen/kernel.py:151
                                                                def reduceop(self) -> Optional[LazyOp]: return self.reduceops[0] if len(self.reduceops) > 0 else None

                                                            if opt.op is OptOps.LOCAL:    # cyan                                                                                                         # codegen/kernel.py:417
                                                            elif opt.op in {OptOps.GROUP, OptOps.GROUPTOP}:   # green                                                                                    # codegen/kernel.py:422
                                                            elif opt.op is OptOps.UNROLL:                     # purple                                                                                   # codegen/kernel.py:429
                                                              check(axis < self.first_upcast, "can't upcasted already upcasted")                                                                         # codegen/kernel.py:430

                                                              check(amt <= 32, "don't unroll more than 32")                                                                                              # codegen/kernel.py:431

                                                              if self.full_shape[axis] == amt and axis == self.first_reduce: self.local_dims += 1 # first_reduce will ++, so offset loss in simplify_ones # codegen/kernel.py:435

                                                              if self.full_shape[axis] == amt and axis < self.first_reduce+self.group_for_reduces: self.group_for_reduces -= 1 # fully unrolling a GROUP # codegen/kernel.py:436

                                                              self.shift_to(axis, amt, insert_before=None)                                                                                               # codegen/kernel.py:437

                                                                class Kernel:                                                                                                                            # codegen/kernel.py:54
                                                                  # axis : the axis to pull from                                                                                                         # codegen/kernel.py:221
                                                                  # amount : the amount to take
                                                                  # top : if you want to pull that amount from the top
                                                                  # insert_before : place to insert the new stuff
                                                                  def shift_to(self, axis, amount, top=False, insert_before=None):
                                                                    if insert_before is None: insert_before = self.shape_len                                                                             # codegen/kernel.py:222

                                                                    move_axis = axis if top else axis+1                                                                                                  # codegen/kernel.py:223
                                                                    if move_axis < insert_before: insert_before += 1                                                                                     # codegen/kernel.py:224
                                                                    self.reshape_and_permute(                                                                                                            # codegen/kernel.py:225
                                                                      lambda x: x[0:axis] + (((amount, x[axis]//amount) if top else (x[axis]//amount, amount)) if x[axis] > 1 else (1,1)) + x[axis+1:],
                                                                      [i for i in range(insert_before) if i != move_axis] + [move_axis] + [i for i in range(insert_before, self.shape_len+1) if i != move_axis])

                                                              self.upcast()                                                                                                                              # codegen/kernel.py:438

                                                                class Kernel:                                                                                                                            # codegen/kernel.py:54
                                                                  # drops the final dimension                                                                                                            # codegen/kernel.py:213
                                                                  def upcast(self):
                                                                    check(self.full_shape[-1] != 1, "can't upcast a dimension with size 1")                                                              # codegen/kernel.py:214

                                                                    self.upcasted += 1                                                                                                                   # codegen/kernel.py:215

                                                            if append_opt: self.applied_opts.append(opt)                                                                                                 # codegen/kernel.py:479
                                                            if self.simplify_ones() and self.tensor_core_opts:                                                                                           # codegen/kernel.py:480

                                                      break                                                                                                                                              # codegen/kernel.py:588
                                              for splits in [4]:                                                                                                                                         # codegen/kernel.py:592
                                                if self.upcasted == 0 and self.full_unupcasted_shape and self.full_unupcasted_shape[-1] % splits == 0:                                                   # codegen/kernel.py:593
                                              if self.opts.has_local:                                                                                                                                    # codegen/kernel.py:598
                                              return self                                                                                                                                                # codegen/kernel.py:616

                                        if BEAM >= 1:                                                                                                                                                    # engine/realize.py:22

                                      if logkerns is not None: logkerns.writelines([f"{(k.ast, k.applied_opts)}\n"])                                                                                     # engine/realize.py:61
                                      if DEBUG >= 5: print((k.ast, k.applied_opts)) # print here to show final applied_opts for all kernels instead of just in beam_search                               # engine/realize.py:62

                                      return k                                                                                                                                                           # engine/realize.py:63

                                    class Kernel:                                                                                                                                                        # codegen/kernel.py:54
                                      def to_program(self, name_override:Optional[str]=None) -> Program:                                                                                                 # codegen/kernel.py:737
                                        self.linearize()                                                                                                                                                 # codegen/kernel.py:738

                                          class Kernel:                                                                                                                                                  # codegen/kernel.py:54
                                            def linearize(self) -> Kernel:                                                                                                                               # codegen/kernel.py:722
                                              modified_ast = self.get_optimized_ast()                                                                                                                    # codegen/kernel.py:723

                                                class Kernel:                                                                                                                                            # codegen/kernel.py:54
                                                  def get_optimized_ast(self) -> LazyOp:                                                                                                                 # codegen/kernel.py:633
                                                    return fixup_ast(self.ast)                                                                                                                           # codegen/kernel.py:718

                                                        def get_optimized_ast(self) -> LazyOp:                                                                                                           # codegen/kernel.py:633
                                                      class Kernel:                                                                                                                                      # codegen/kernel.py:54
                                                          # set the shapetrackers to the optimized ones, fixup reduceop                                                                                  # codegen/kernel.py:637
                                                          # transformed to the final LazyOp
                                                          @functools.lru_cache(None)
                                                          def fixup_ast(op:LazyOp, apply_to_st=None) -> LazyOp:
                                                            if op.op in BufferOps:                                                                                                                       # codegen/kernel.py:638
                                                            elif op.op in ReduceOps:                                                                                                                     # codegen/kernel.py:645
                                                            elif op.op is MetaOps.KERNEL:                                                                                                                # codegen/kernel.py:713
                                                              arg = KernelInfo(self.local_dims, self.upcasted, self.dont_use_locals)                                                                     # codegen/kernel.py:714
                                                            return LazyOp(op.op, tuple(fixup_ast(x, apply_to_st) for x in op.src), arg)                                                                  # codegen/kernel.py:717

                                                          def get_optimized_ast(self) -> LazyOp:                                                                                                         # codegen/kernel.py:633
                                                        class Kernel:                                                                                                                                    # codegen/kernel.py:54
                                                            # set the shapetrackers to the optimized ones, fixup reduceop                                                                                # codegen/kernel.py:637
                                                            # transformed to the final LazyOp
                                                            @functools.lru_cache(None)
                                                            def fixup_ast(op:LazyOp, apply_to_st=None) -> LazyOp:
                                                              if op.op in BufferOps:                                                                                                               # OLD # codegen/kernel.py:638
                                                                if isinstance(op.arg, MemBuffer) and op.arg.idx < 0:                                                                                     # codegen/kernel.py:639
                                                                  idx = self.bufs.index(op.arg)                                                                                                          # codegen/kernel.py:643
                                                                  arg = replace(op.arg, st=self.sts[idx] if apply_to_st is None else apply_to_st(self.sts[idx]))                                         # codegen/kernel.py:644

                                                            def get_optimized_ast(self) -> LazyOp:                                                                                                       # codegen/kernel.py:633
                                                          class Kernel:                                                                                                                                  # codegen/kernel.py:54
                                                              # set the shapetrackers to the optimized ones, fixup reduceop                                                                              # codegen/kernel.py:637
                                                              # transformed to the final LazyOp
                                                              @functools.lru_cache(None)
                                                              def fixup_ast(op:LazyOp, apply_to_st=None) -> LazyOp:
                                                                if op.op in BufferOps:                                                                                                             # OLD # codegen/kernel.py:638
                                                                elif op.op in ReduceOps:                                                                                                           # OLD # codegen/kernel.py:645
                                                                elif op.op is MetaOps.KERNEL:                                                                                                      # OLD # codegen/kernel.py:713
                                                                  arg = KernelInfo(self.local_dims, self.upcasted, self.dont_use_locals)                                                           # OLD # codegen/kernel.py:714
                                                                  arg = op.arg                                                                                                                           # codegen/kernel.py:716

                                                              def get_optimized_ast(self) -> LazyOp:                                                                                                     # codegen/kernel.py:633
                                                            class Kernel:                                                                                                                                # codegen/kernel.py:54
                                                                # set the shapetrackers to the optimized ones, fixup reduceop                                                                            # codegen/kernel.py:637
                                                                # transformed to the final LazyOp
                                                                @functools.lru_cache(None)
                                                                def fixup_ast(op:LazyOp, apply_to_st=None) -> LazyOp:
                                                                  if op.op in BufferOps:                                                                                                           # OLD # codegen/kernel.py:638
                                                                  elif op.op in ReduceOps:                                                                                                         # OLD # codegen/kernel.py:645
                                                                    reduce_idx = len(self.bufs) + self.reduceops.index(op)*2                                                                             # codegen/kernel.py:646
                                                                    arg = tuple(i for i in range(self.first_reduce+self.group_for_reduces, self.shape_len)                                               # codegen/kernel.py:647
                                                                                if self.sts[reduce_idx].shape[i] != self.sts[reduce_idx+1].shape[i])

                                                                    if op in self.bufs_for_tensor_core and (tc := self.tensor_core):                                                                     # codegen/kernel.py:649

                                                                    if self.group_for_reduces:                                                                                                           # codegen/kernel.py:705

                                              if DEBUG >= 3:                                                                                                                                             # codegen/kernel.py:725

                                              verify_lazyop(modified_ast)                                                                                                                                # codegen/kernel.py:729

                                              self.uops:UOpGraph = UOpGraph(lazyop_to_uop(modified_ast, self.opts), self.opts)                                                                           # codegen/kernel.py:732

                                                def lazyop_to_uop(ast:LazyOp, opts:Renderer) -> UOp: return IndependentLowerer().lower(ast, opts)                                                        # codegen/lowerer.py:215

                                                  class IndependentLowerer:                                                                                                                              # codegen/lowerer.py:108
                                                    def lower(self, ast:LazyOp, opts:Renderer) -> UOp:                                                                                                   # codegen/lowerer.py:109
                                                      self.output_count = len(ast.src)                                                                                                                   # codegen/lowerer.py:110
                                                      ki = ast.arg if isinstance(ast.arg, KernelInfo) else KernelInfo()                                                                                  # codegen/lowerer.py:112
                                                      full_shape = ast.full_shape                                                                                                                        # codegen/lowerer.py:114

                                                        @dataclass(frozen=True, eq=False)                                                                                                                # ops.py:55
                                                        class LazyOp:
                                                          @functools.cached_property                                                                                                                     # ops.py:74
                                                          def full_shape(self) -> Tuple[sint, ...]:
                                                            if len(self.src) == 0 and self.op in BufferOps: return self.arg.st.shape                                                                     # ops.py:75
                                                            return tuple(max(x) for x in zip(*[x.full_shape for x in self.src]))                                                                         # ops.py:76

                                                      first_upcasted = len(full_shape)-ki.upcasted                                                                                                       # codegen/lowerer.py:115
                                                      first_reduce = [x!=y for x,y in zip(ast.src[0].arg.st.shape[:first_upcasted]+(0,), full_shape[:first_upcasted]+(1,))].index(True)                  # codegen/lowerer.py:117

                                                      local_loads = [x for x in ast.lazyops if x.op is BufferOps.LOAD and x.arg.idx == -1]                                                               # codegen/lowerer.py:118

                                                      group_for_reduces = sum([x!=y for x,y in zip(                                                                                                      # codegen/lowerer.py:120
                                                        local_loads[0].arg.st.shape[first_reduce:first_upcasted], ast.src[0].arg.st.shape[first_reduce:first_upcasted])]) if local_loads else 0
                                                      global_dims = first_reduce-ki.local_dims                                                                                                           # codegen/lowerer.py:122
                                                      if opts.has_local:                                                                                                                                 # codegen/lowerer.py:124
                                                        self.idxs = [UOp(UOps.RANGE, dtypes.bigint, (UOp.const(dtypes.bigint, 0), variable_to_uop(g)), (i, False))                                       # codegen/lowerer.py:134
                                                                     for i,g in enumerate(full_shape[:first_reduce])]

                                                    def variable_to_uop(x, ctx=None) -> UOp: return UOp.const(dtypes.bigint, x) if isinstance(x, int) else x.render(render_ops, ctx)                     # codegen/lowerer.py:14

                                                      self.idxs += [UOp(UOps.RANGE, dtypes.bigint, (UOp.const(dtypes.bigint, 0), variable_to_uop(g)), (i, True))                                         # codegen/lowerer.py:138
                                                        for i,g in enumerate(full_shape[first_reduce+group_for_reduces:first_upcasted], start=first_reduce+group_for_reduces)]

                                                      for i,g in enumerate(full_shape[first_upcasted:], start=first_upcasted):                                                                           # codegen/lowerer.py:142
                                                        assert isinstance(g, int), "needs to be int to upcast/unroll"                                                                                    # codegen/lowerer.py:143
                                                        self.idxs.append(UOp(UOps.EXPAND, dtypes.bigint, tuple(UOp.const(dtypes.bigint, j) for j in range(0, g)), ((i,g),)))                             # codegen/lowerer.py:144

                                                      self.ridxs = self.idxs[:]                                                                                                                          # codegen/lowerer.py:147
                                                      for a in range(first_reduce, first_reduce+group_for_reduces):                                                                                      # codegen/lowerer.py:148
                                                      self.uop_cache: Dict[LazyOp, UOp] = {}                                                                                                             # codegen/lowerer.py:151
                                                      return self.to_uop(ast)                                                                                                                            # codegen/lowerer.py:152

                                                        class IndependentLowerer:                                                                                                                        # codegen/lowerer.py:108
                                                          def to_uop(self, x:LazyOp) -> UOp:                                                                                                             # codegen/lowerer.py:154
                                                            if uop:=self.uop_cache.get(x, None): return uop                                                                                              # codegen/lowerer.py:155

                                                            ret = self._to_uop(x)                                                                                                                        # codegen/lowerer.py:156

                                                              class IndependentLowerer:                                                                                                                  # codegen/lowerer.py:108
                                                                def _to_uop(self, x:LazyOp) -> UOp:                                                                                                      # codegen/lowerer.py:160
                                                                  if x.op in BufferOps:                                                                                                                  # codegen/lowerer.py:161
                                                                  in_uops = tuple(self.to_uop(y) for y in x.src)                                                                                         # codegen/lowerer.py:191

                                                                class IndependentLowerer:                                                                                                                # codegen/lowerer.py:108
                                                                  def _to_uop(self, x:LazyOp) -> UOp:                                                                                                    # codegen/lowerer.py:160
                                                                    if x.op in BufferOps:                                                                                                          # OLD # codegen/lowerer.py:161
                                                                      idx, valid = st_to_uops(x.arg.st, self.ridxs if x.op is BufferOps.LOAD and x.arg.idx == -1 else self.idxs,                         # codegen/lowerer.py:162
                                                                        x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) and (not isinstance(x.arg, MemBuffer) or x.arg.idx == -1) else x.arg.dtype)

                                                                        def st_to_uops(st:ShapeTracker, idxs:List[UOp], dtype:DType) -> Tuple[UOp, UOp]:                                                 # codegen/lowerer.py:65
                                                                          if getenv("SYMBOLIC_DIFF"):                                                                                                    # codegen/lowerer.py:66

                                                                          return st_to_uops_graph(st, idxs, dtype) if getenv("UOP_IS_SYMBOLIC") else st_to_uops_symbolic(st, idxs, dtype)                # codegen/lowerer.py:80

                                                                            # TODO: this is the old one, delete when ready                                                                               # codegen/lowerer.py:51
                                                                            def st_to_uops_symbolic(st:ShapeTracker, idxs:List[UOp], dtype:DType) -> Tuple[UOp, UOp]:
                                                                              fake_idxs = [Variable(f"__idx{i}", 0, s-1) for i,s in enumerate(st.shape)]                                                 # codegen/lowerer.py:52

                                                                              idx, valid = st.expr_idxs(fake_idxs)                                                                                       # codegen/lowerer.py:53

                                                                              ctx = dict(zip(fake_idxs, idxs))                                                                                           # codegen/lowerer.py:54

                                                                                class NumNode(Node):                                                                                                     # shape/symbolic.py:136
                                                                                  def __hash__(self): return hash(self.b)  # needed with __eq__ override                                                 # shape/symbolic.py:146

                                                                                class NumNode(Node):                                                                                                     # shape/symbolic.py:136
                                                                                  def __eq__(self, other): return self.b == other                                                                        # shape/symbolic.py:145

                                                                              uvalid = valid.render(render_ops, ctx)                                                                                     # codegen/lowerer.py:55

                                                                              if isinstance(dtype, ImageDType):                                                                                          # codegen/lowerer.py:56
                                                                                uidx = idx.render(render_ops, ctx)                                                                                       # codegen/lowerer.py:60

                                                                              if uvalid.op is UOps.CONST: uvalid = UOp.const(dtypes.bool, uvalid.arg)                                                    # codegen/lowerer.py:61

                                                                              assert uvalid.dtype == dtypes.bool                                                                                         # codegen/lowerer.py:62
                                                                              return uidx, uvalid                                                                                                        # codegen/lowerer.py:63

                                                                      has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                                    # codegen/lowerer.py:165
                                                                      if x.op is BufferOps.CONST:                                                                                                        # codegen/lowerer.py:166
                                                                      if x.arg.idx < 0:                                                                                                                  # codegen/lowerer.py:169
                                                                        buf = UOp(UOps.DEFINE_GLOBAL, x.arg.dtype if isinstance(x.arg.dtype, ImageDType) else PtrDType(x.arg.dtype), (), x.arg.idx)      # codegen/lowerer.py:173

                                                                          # @dataclass(frozen=True, init=False, repr=False, eq=False)                                                                    # dtype.py:31
                                                                          class PtrDType(DType):
                                                                            def __init__(self, dt:DType): super().__init__(dt.priority, dt.itemsize, dt.name, dt.fmt, dt.count)                          # dtype.py:32

                                                                      if x.op is BufferOps.LOAD:                                                                                                         # codegen/lowerer.py:174
                                                                      if x.arg.idx >= 0:                                                                                                                 # codegen/lowerer.py:185
                                                                        for oidx, ridx in zip(self.idxs, self.ridxs):                                                                                    # codegen/lowerer.py:186
                                                                          if oidx != ridx: valid = valid * oidx.eq(0)                                                                                    # codegen/lowerer.py:187
                                                                        has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                                  # codegen/lowerer.py:188
                                                                      return UOp(UOps.STORE, None, (buf, idx, self.to_uop(x.src[0])) + ((valid,) if has_valid else ()))                                  # codegen/lowerer.py:189

                                                                  class MulNode(OpNode):                                                                                                                 # shape/symbolic.py:197
                                                                    def __mul__(self, b: Union[Node, int]): return self.a*(self.b*b) # two muls in one mul                                               # shape/symbolic.py:198

                                                                  class IndependentLowerer:                                                                                                              # codegen/lowerer.py:108
                                                                    def _to_uop(self, x:LazyOp) -> UOp:                                                                                                  # codegen/lowerer.py:160
                                                                      if x.op in BufferOps:                                                                                                        # OLD # codegen/lowerer.py:161
                                                                          dtype = x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) else x.arg.dtype                                               # codegen/lowerer.py:167
                                                                          return valid.where(UOp.const(dtype, x.arg.val), UOp.const(dtype, 0))                                                           # codegen/lowerer.py:168

                                                                  class IndependentLowerer:                                                                                                              # codegen/lowerer.py:108
                                                                    def to_uop(self, x:LazyOp) -> UOp:                                                                                                   # codegen/lowerer.py:154
                                                                      if uop:=self.uop_cache.get(x, None): return uop                                                                              # OLD # codegen/lowerer.py:155
                                                                      ret = self._to_uop(x)                                                                                                        # OLD # codegen/lowerer.py:156
                                                                      self.uop_cache[x] = ret                                                                                                            # codegen/lowerer.py:157

                                                                      return ret                                                                                                                         # codegen/lowerer.py:158

                                                                  class IndependentLowerer:                                                                                                              # codegen/lowerer.py:108
                                                                    def _to_uop(self, x:LazyOp) -> UOp:                                                                                                  # codegen/lowerer.py:160
                                                                      if x.op in BufferOps:                                                                                                        # OLD # codegen/lowerer.py:161
                                                                      in_uops = tuple(self.to_uop(y) for y in x.src)                                                                               # OLD # codegen/lowerer.py:191
                                                                        idx, valid = st_to_uops(x.arg.st, self.ridxs if x.op is BufferOps.LOAD and x.arg.idx == -1 else self.idxs,                 # OLD # codegen/lowerer.py:162
                                                                          x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) and (not isinstance(x.arg, MemBuffer) or x.arg.idx == -1) else x.arg.dtype)
                                                                        has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                            # OLD # codegen/lowerer.py:165
                                                                        if x.op is BufferOps.CONST:                                                                                                # OLD # codegen/lowerer.py:166
                                                                        if x.arg.idx < 0:                                                                                                          # OLD # codegen/lowerer.py:169
                                                                          buf = UOp(UOps.DEFINE_GLOBAL, x.arg.dtype if isinstance(x.arg.dtype, ImageDType) else PtrDType(x.arg.dtype), (), x.arg.idx) # OLD # codegen/lowerer.py:173
                                                                        if x.op is BufferOps.LOAD:                                                                                                 # OLD # codegen/lowerer.py:174
                                                                        if x.arg.idx >= 0:                                                                                                         # OLD # codegen/lowerer.py:185
                                                                          for oidx, ridx in zip(self.idxs, self.ridxs):                                                                            # OLD # codegen/lowerer.py:186
                                                                            if oidx != ridx: valid = valid * oidx.eq(0)                                                                            # OLD # codegen/lowerer.py:187
                                                                          has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                          # OLD # codegen/lowerer.py:188
                                                                        return UOp(UOps.STORE, None, (buf, idx, self.to_uop(x.src[0])) + ((valid,) if has_valid else ()))                          # OLD # codegen/lowerer.py:189
                                                                          dtype = x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) else x.arg.dtype                                         # OLD # codegen/lowerer.py:167
                                                                          return valid.where(UOp.const(dtype, x.arg.val), UOp.const(dtype, 0))                                                     # OLD # codegen/lowerer.py:168
                                                                      if x.op is MetaOps.KERNEL: return UOp(UOps.SINK, src=in_uops)                                                                      # codegen/lowerer.py:192
                                                                      if x.op is UnaryOps.CAST: return UOp(UOps.CAST, x.arg.scalar(), in_uops)                                                           # codegen/lowerer.py:193
                                                                      if x.op is UnaryOps.BITCAST: return UOp(UOps.BITCAST, x.arg.scalar(), in_uops)                                                     # codegen/lowerer.py:194
                                                                      if x.op in ReduceOps:                                                                                                              # codegen/lowerer.py:195
                                                                        dtype = x.dtype.base if isinstance(x.dtype, ImageDType) else x.dtype                                                             # codegen/lowerer.py:196

                                                                          @dataclass(frozen=True, eq=False)                                                                                              # ops.py:55
                                                                          class LazyOp:
                                                                            @functools.cached_property                                                                                                   # ops.py:68
                                                                            def dtype(self) -> DType:
                                                                              if self.op in BufferOps: return self.arg.dtype                                                                             # ops.py:69
                                                                              if self.op is ReduceOps.WMMA: return self.arg[3]   # WMMA can change the type                                              # ops.py:70
                                                                              if self.op in [UnaryOps.CAST, UnaryOps.BITCAST]: return self.arg                                                           # ops.py:71
                                                                              return dtypes.bool if self.op in {BinaryOps.CMPLT, BinaryOps.CMPNE} else self.src[-1].dtype                                # ops.py:72

                                                                        if x.op is ReduceOps.WMMA:                                                                                                       # codegen/lowerer.py:197
                                                                        reduce_range, reduce_expand = partition([self.ridxs[i] for i in x.arg], lambda y: y.op is UOps.RANGE)                            # codegen/lowerer.py:206

                                                                        alu_op = {ReduceOps.SUM:BinaryOps.ADD, ReduceOps.MAX:BinaryOps.MAX}[cast(ReduceOps, x.op)]                                       # codegen/lowerer.py:207
                                                                        ret = in_uops[0]                                                                                                                 # codegen/lowerer.py:208
                                                                        if len(contract_axis:=flatten(x.arg for x in reduce_expand)):                                                                    # codegen/lowerer.py:209

                                                                          ret = UOp(UOps.CONTRACT, dtype.vec(prod(x[1] for x in contract_axis)), (ret,), tuple(contract_axis))                           # codegen/lowerer.py:210

                                                                          ret = functools.reduce(lambda x,y: x.alu(alu_op, y), [ret.gep(i) for i in range(cast(DType, ret.dtype).count)])                # codegen/lowerer.py:211

                                                                        return UOp(UOps.REDUCE, dtype, (ret,) + tuple(reduce_range), alu_op) if len(reduce_range) else ret                               # codegen/lowerer.py:212

                                                                  class IndependentLowerer:                                                                                                              # codegen/lowerer.py:108
                                                                    def _to_uop(self, x:LazyOp) -> UOp:                                                                                                  # codegen/lowerer.py:160
                                                                      if x.op in BufferOps:                                                                                                        # OLD # codegen/lowerer.py:161
                                                                      in_uops = tuple(self.to_uop(y) for y in x.src)                                                                               # OLD # codegen/lowerer.py:191
                                                                        idx, valid = st_to_uops(x.arg.st, self.ridxs if x.op is BufferOps.LOAD and x.arg.idx == -1 else self.idxs,                 # OLD # codegen/lowerer.py:162
                                                                          x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) and (not isinstance(x.arg, MemBuffer) or x.arg.idx == -1) else x.arg.dtype)
                                                                        has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                            # OLD # codegen/lowerer.py:165
                                                                        if x.op is BufferOps.CONST:                                                                                                # OLD # codegen/lowerer.py:166
                                                                        if x.arg.idx < 0:                                                                                                          # OLD # codegen/lowerer.py:169
                                                                          buf = UOp(UOps.DEFINE_GLOBAL, x.arg.dtype if isinstance(x.arg.dtype, ImageDType) else PtrDType(x.arg.dtype), (), x.arg.idx) # OLD # codegen/lowerer.py:173
                                                                        if x.op is BufferOps.LOAD:                                                                                                 # OLD # codegen/lowerer.py:174
                                                                        if x.arg.idx >= 0:                                                                                                         # OLD # codegen/lowerer.py:185
                                                                          for oidx, ridx in zip(self.idxs, self.ridxs):                                                                            # OLD # codegen/lowerer.py:186
                                                                            if oidx != ridx: valid = valid * oidx.eq(0)                                                                            # OLD # codegen/lowerer.py:187
                                                                          has_valid = valid.op is not UOps.CONST or valid.arg is not True                                                          # OLD # codegen/lowerer.py:188
                                                                        return UOp(UOps.STORE, None, (buf, idx, self.to_uop(x.src[0])) + ((valid,) if has_valid else ()))                          # OLD # codegen/lowerer.py:189
                                                                          dtype = x.arg.dtype.base if isinstance(x.arg.dtype, ImageDType) else x.arg.dtype                                         # OLD # codegen/lowerer.py:167
                                                                          return valid.where(UOp.const(dtype, x.arg.val), UOp.const(dtype, 0))                                                     # OLD # codegen/lowerer.py:168
                                                                      if x.op is MetaOps.KERNEL: return UOp(UOps.SINK, src=in_uops)                                                                # OLD # codegen/lowerer.py:192
                                                                      if x.op is UnaryOps.CAST: return UOp(UOps.CAST, x.arg.scalar(), in_uops)                                                     # OLD # codegen/lowerer.py:193
                                                                      if x.op is UnaryOps.BITCAST: return UOp(UOps.BITCAST, x.arg.scalar(), in_uops)                                               # OLD # codegen/lowerer.py:194
                                                                      if x.op in ReduceOps:                                                                                                        # OLD # codegen/lowerer.py:195
                                                                        dtype = x.dtype.base if isinstance(x.dtype, ImageDType) else x.dtype                                                       # OLD # codegen/lowerer.py:196
                                                                        if x.op is ReduceOps.WMMA:                                                                                                 # OLD # codegen/lowerer.py:197
                                                                        reduce_range, reduce_expand = partition([self.ridxs[i] for i in x.arg], lambda y: y.op is UOps.RANGE)                      # OLD # codegen/lowerer.py:206
                                                                        alu_op = {ReduceOps.SUM:BinaryOps.ADD, ReduceOps.MAX:BinaryOps.MAX}[cast(ReduceOps, x.op)]                                 # OLD # codegen/lowerer.py:207
                                                                        ret = in_uops[0]                                                                                                           # OLD # codegen/lowerer.py:208
                                                                        if len(contract_axis:=flatten(x.arg for x in reduce_expand)):                                                              # OLD # codegen/lowerer.py:209
                                                                          ret = UOp(UOps.CONTRACT, dtype.vec(prod(x[1] for x in contract_axis)), (ret,), tuple(contract_axis))                     # OLD # codegen/lowerer.py:210
                                                                          ret = functools.reduce(lambda x,y: x.alu(alu_op, y), [ret.gep(i) for i in range(cast(DType, ret.dtype).count)])          # OLD # codegen/lowerer.py:211
                                                                        return UOp(UOps.REDUCE, dtype, (ret,) + tuple(reduce_range), alu_op) if len(reduce_range) else ret                         # OLD # codegen/lowerer.py:212
                                                                      return in_uops[0].alu(x.op, *in_uops[1:])                                                                                          # codegen/lowerer.py:213

                                                class UOpGraph:                                                                                                                                          # codegen/uopgraph.py:491
                                                  def __init__(self, sink:Union[UOp, List[UOp]], opts:Optional[Renderer]=None):                                                                          # codegen/uopgraph.py:492
                                                    self.sink: UOp = sink if isinstance(sink, UOp) else UOp(UOps.SINK, None, tuple(sink))                                                                # codegen/uopgraph.py:493
                                                    assert self.sink.op is UOps.SINK, f"sink isn't sink, it's {self.sink.op}"                                                                            # codegen/uopgraph.py:494
                                                    self._uops: Optional[List[UOp]] = None                                                                                                               # codegen/uopgraph.py:496
                                                    self.opts = opts                                                                                                                                     # codegen/uopgraph.py:497
                                                    self.folder = constant_folder                                                                                                                        # codegen/uopgraph.py:498
                                                    if TRANSCENDENTAL >= 2 or (opts is not None and TRANSCENDENTAL >= 1 and opts.device in {"CLANG", "LLVM"}):                                           # codegen/uopgraph.py:499

                                                      self.folder = self.folder + transcendental_folding                                                                                                 # codegen/uopgraph.py:500

                                                        class PatternMatcher:                                                                                                                            # codegen/uops.py:182
                                                          @functools.lru_cache(None)  # pylint: disable=method-cache-max-size-none                                                                       # codegen/uops.py:193
                                                          def __add__(self, more:PatternMatcher): return PatternMatcher(self.patterns+more.patterns)

                                              if DEBUG >= 5: self.uops.print()                                                                                                                           # codegen/kernel.py:733

                                              if getenv("GRAPHUOPS"): self.uops.graph()                                                                                                                  # codegen/kernel.py:734

                                              return self                                                                                                                                                # codegen/kernel.py:735

                                        self.uops.linearize(self.opts.extra_matcher)                                                                                                                     # codegen/kernel.py:739

                                          class UOpGraph:                                                                                                                                                # codegen/uopgraph.py:491
                                            def linearize(self, extra_pm:Optional[PatternMatcher]=None, skip_check=False) -> UOpGraph:                                                                   # codegen/uopgraph.py:518
                                              acc_number = 0                                                                                                                                             # codegen/uopgraph.py:520
                                              sink = graph_rewrite(self.sink, self.folder)                                                                                                               # codegen/uopgraph.py:526

                                                def graph_rewrite(sink:UOp, pm:PatternMatcher) -> UOp:                                                                                                   # codegen/uopgraph.py:480
                                                  nodes: Dict[Tuple, UOp] = {}                                                                                                                           # codegen/uopgraph.py:481
                                                  replace: Dict[UOp, UOp] = {}                                                                                                                           # codegen/uopgraph.py:482
                                                  return __inner_rewrite(sink)                                                                                                                           # codegen/uopgraph.py:489

                                                    def graph_rewrite(sink:UOp, pm:PatternMatcher) -> UOp:                                                                                               # codegen/uopgraph.py:480
                                                      def __inner_rewrite(n:UOp) -> UOp:                                                                                                                 # codegen/uopgraph.py:483
                                                        if n in replace: return replace[n]                                                                                                               # codegen/uopgraph.py:484
                                                        replace_source = (n.op, n.dtype, tuple(__inner_rewrite(y) for y in n.src), n.arg)                                                                # codegen/uopgraph.py:485

                                                      def graph_rewrite(sink:UOp, pm:PatternMatcher) -> UOp:                                                                                             # codegen/uopgraph.py:480
                                                        def __inner_rewrite(n:UOp) -> UOp:                                                                                                               # codegen/uopgraph.py:483
                                                          if n in replace: return replace[n]                                                                                                       # OLD # codegen/uopgraph.py:484
                                                          replace_source = (n.op, n.dtype, tuple(__inner_rewrite(y) for y in n.src), n.arg)                                                        # OLD # codegen/uopgraph.py:485
                                                          if found := nodes.get(replace_source): replace[n] = found                                                                                      # codegen/uopgraph.py:486

                                                            # @dataclass(frozen=True, init=False, repr=False, eq=False)                                                                                  # dtype.py:31
                                                            class PtrDType(DType):
                                                              def __hash__(self): return super().__hash__()                                                                                              # dtype.py:33

                                                          else: nodes[replace_source] = replace[n] = found = __inner_rewrite(new_x) if (new_x := pm.rewrite(x:=UOp(*replace_source))) else x             # codegen/uopgraph.py:487

                                                            class PatternMatcher:                                                                                                                        # codegen/uops.py:182
                                                              def rewrite(self, uop:UOp) -> Optional[UOp]:                                                                                               # codegen/uops.py:195
                                                                for p,fxn in itertools.chain(self.pdict[(uop.op, uop.arg)], self.pdict[(uop.op, None)]):                                                 # codegen/uops.py:196
                                                                return None                                                                                                                              # codegen/uops.py:198

                                                          return found                                                                                                                                   # codegen/uopgraph.py:488

                                                      class PatternMatcher:                                                                                                                              # codegen/uops.py:182
                                                        def rewrite(self, uop:UOp) -> Optional[UOp]:                                                                                                     # codegen/uops.py:195
                                                          for p,fxn in itertools.chain(self.pdict[(uop.op, uop.arg)], self.pdict[(uop.op, None)]):                                                 # OLD # codegen/uops.py:196
                                                            if (matches := _match(uop, p, {})) and (ret:=fxn(**matches[0])) is not None: return ret # NOTE: if it returns None, we keep trying to match  # codegen/uops.py:197

                                                              def _match(uop:UOp, pat:UPat, store:Dict[str, UOp]) -> List[Dict[str, UOp]]:                                                               # codegen/uops.py:168
                                                                if (pat.name is not None and store.setdefault(pat.name, uop) is not uop) or \                                                            # codegen/uops.py:169
                                                                   (pat.dtype is not None and uop.dtype not in pat.dtype) or \
                                                                   (pat.arg is not None and pat.arg != uop.arg) or \
                                                                   (pat.op is not None and uop.op not in pat.op): return []
                                                                if pat.src is None: return [store]                                                                                                       # codegen/uops.py:173

                                                      def _match(uop:UOp, pat:UPat, store:Dict[str, UOp]) -> List[Dict[str, UOp]]:                                                                       # codegen/uops.py:168
                                                        if (pat.name is not None and store.setdefault(pat.name, uop) is not uop) or \                                                              # OLD # codegen/uops.py:169
                                                           (pat.dtype is not None and uop.dtype not in pat.dtype) or \
                                                           (pat.arg is not None and pat.arg != uop.arg) or \
                                                           (pat.op is not None and uop.op not in pat.op): return []
                                                        if pat.src is None: return [store]                                                                                                         # OLD # codegen/uops.py:173
                                                        res: List[Dict[str, UOp]] = []                                                                                                                   # codegen/uops.py:174
                                                        for vp in pat.src:                                                                                                                               # codegen/uops.py:175
                                                          if pat.allowed_len != 0 and len(uop.src) != pat.allowed_len: return []                                                                         # codegen/uops.py:176
                                                          new_stores = [store.copy()]                                                                                                                    # codegen/uops.py:177
                                                          for uu, vv in zip(uop.src, vp): new_stores = [rstore for nstore in new_stores for rstore in _match(uu, vv, nstore)]                            # codegen/uops.py:178

                                                          res.extend(new_stores)                                                                                                                         # codegen/uops.py:179

                                                        return res                                                                                                                                       # codegen/uops.py:180

                                                      @dataclass(frozen=True, eq=False)                                                                                                                  # codegen/uops.py:32
                                                      class UOp:
                                                        @functools.cached_property                                                                                                                       # codegen/uops.py:99
                                                        def vmin(self) -> UOp: return x if (x:=self._min_max[0]) is not None and not math.isnan(x.arg) else self.const(dtypes.min(cast(DType, self.dtype)))

                                                          @dataclass(frozen=True, eq=False)                                                                                                              # codegen/uops.py:32
                                                          class UOp:
                                                            @functools.cached_property                                                                                                                   # codegen/uops.py:103
                                                            def _min_max(self) -> Tuple[Optional[UOp], Optional[UOp]]:
                                                              if self.op is UOps.DEFINE_VAR: return self.src[0], self.src[1] if isinstance(self.src[1].arg, int) else None                               # codegen/uops.py:105
                                                              if self.op is UOps.RANGE: return self.src[0], self.const(self.src[1].arg-1) if isinstance(self.src[1].arg, int) else None                  # codegen/uops.py:106
                                                              if self.op is UOps.SPECIAL: return self.const(0), self.const(self.arg[1]-1) if isinstance(self.arg[1], int) else None                      # codegen/uops.py:108
                                                              if self.op is UOps.CONST: return self, self                                                                                                # codegen/uops.py:109
                                                              if self.op is UOps.ALU and cast(DType, self.dtype).count == 1:                                                                             # codegen/uops.py:110
                                                                s0,s1 = [cast(UOp, self.src[i] if i < len(self.src) else None) for i in range(2)]                                                        # codegen/uops.py:111
                                                                if self.arg is UnaryOps.NEG and self.dtype != dtypes.bool and not dtypes.is_unsigned(cast(DType, self.dtype)):                           # codegen/uops.py:112

                                                                  return self.const(-s0.vmax.arg), self.const(-s0.vmin.arg)                                                                              # codegen/uops.py:113

                                                                    @dataclass(frozen=True, eq=False)                                                                                                    # codegen/uops.py:32
                                                                    class UOp:
                                                                      @functools.cached_property                                                                                                         # codegen/uops.py:101
                                                                      def vmax(self) -> UOp: return x if (x:=self._min_max[1]) is not None and not math.isnan(x.arg) else self.const(dtypes.max(cast(DType, self.dtype)))

                                                      @dataclass(frozen=True, eq=False)                                                                                                                  # codegen/uops.py:32
                                                      class UOp:
                                                        @functools.cached_property                                                                                                                       # codegen/uops.py:103
                                                        def _min_max(self) -> Tuple[Optional[UOp], Optional[UOp]]:
                                                          if self.op is UOps.DEFINE_VAR: return self.src[0], self.src[1] if isinstance(self.src[1].arg, int) else None                             # OLD # codegen/uops.py:105
                                                          if self.op is UOps.RANGE: return self.src[0], self.const(self.src[1].arg-1) if isinstance(self.src[1].arg, int) else None                # OLD # codegen/uops.py:106
                                                          if self.op is UOps.SPECIAL: return self.const(0), self.const(self.arg[1]-1) if isinstance(self.arg[1], int) else None                    # OLD # codegen/uops.py:108
                                                          if self.op is UOps.CONST: return self, self                                                                                              # OLD # codegen/uops.py:109
                                                          if self.op is UOps.ALU and cast(DType, self.dtype).count == 1:                                                                           # OLD # codegen/uops.py:110
                                                            s0,s1 = [cast(UOp, self.src[i] if i < len(self.src) else None) for i in range(2)]                                                      # OLD # codegen/uops.py:111
                                                            if self.arg is UnaryOps.NEG and self.dtype != dtypes.bool and not dtypes.is_unsigned(cast(DType, self.dtype)):                         # OLD # codegen/uops.py:112
                                                              return self.const(-s0.vmax.arg), self.const(-s0.vmin.arg)                                                                            # OLD # codegen/uops.py:113
                                                            if self.arg is BinaryOps.ADD: return self.const(s0.vmin.arg+s1.vmin.arg), self.const(s0.vmax.arg+s1.vmax.arg)                                # codegen/uops.py:114
                                                            if self.arg is BinaryOps.MUL and (s0.vmin.arg >= 0 or s1.vmin.arg >= 0):                                                                     # codegen/uops.py:115

                                                              Lmin, Lmax = (s0.vmin.arg, s0.vmax.arg) if s1.vmin.arg >= 0 else (s0.vmax.arg, s0.vmin.arg)                                                # codegen/uops.py:117

                                                              Rmin, Rmax = (s1.vmin.arg, s1.vmax.arg) if s0.vmin.arg >= 0 else (s1.vmax.arg, s1.vmin.arg)                                                # codegen/uops.py:118

                                                              assert math.isnan(Lmax*Rmax) or math.isnan(Lmin*Rmin) or Lmax*Rmax >= Lmin*Rmin, f"{Lmax=}, {Lmin=}, {Rmax=}, {Rmin=}"                     # codegen/uops.py:119
                                                              return self.const(Lmin*Rmin), self.const(Lmax*Rmax)                                                                                        # codegen/uops.py:120

                                                      @dataclass(frozen=True, eq=False)                                                                                                                  # codegen/uops.py:32
                                                      class UOp:
                                                        @functools.cached_property                                                                                                                       # codegen/uops.py:103
                                                        def _min_max(self) -> Tuple[Optional[UOp], Optional[UOp]]:
                                                          if self.op is UOps.DEFINE_VAR: return self.src[0], self.src[1] if isinstance(self.src[1].arg, int) else None                             # OLD # codegen/uops.py:105
                                                          if self.op is UOps.RANGE: return self.src[0], self.const(self.src[1].arg-1) if isinstance(self.src[1].arg, int) else None                # OLD # codegen/uops.py:106
                                                          if self.op is UOps.SPECIAL: return self.const(0), self.const(self.arg[1]-1) if isinstance(self.arg[1], int) else None                    # OLD # codegen/uops.py:108
                                                          if self.op is UOps.CONST: return self, self                                                                                              # OLD # codegen/uops.py:109
                                                          if self.op is UOps.ALU and cast(DType, self.dtype).count == 1:                                                                           # OLD # codegen/uops.py:110
                                                            s0,s1 = [cast(UOp, self.src[i] if i < len(self.src) else None) for i in range(2)]                                                      # OLD # codegen/uops.py:111
                                                            if self.arg is UnaryOps.NEG and self.dtype != dtypes.bool and not dtypes.is_unsigned(cast(DType, self.dtype)):                         # OLD # codegen/uops.py:112
                                                              return self.const(-s0.vmax.arg), self.const(-s0.vmin.arg)                                                                            # OLD # codegen/uops.py:113
                                                            if self.arg is BinaryOps.ADD: return self.const(s0.vmin.arg+s1.vmin.arg), self.const(s0.vmax.arg+s1.vmax.arg)                          # OLD # codegen/uops.py:114
                                                            if self.arg is BinaryOps.MUL and (s0.vmin.arg >= 0 or s1.vmin.arg >= 0):                                                               # OLD # codegen/uops.py:115
                                                              Lmin, Lmax = (s0.vmin.arg, s0.vmax.arg) if s1.vmin.arg >= 0 else (s0.vmax.arg, s0.vmin.arg)                                          # OLD # codegen/uops.py:117
                                                              Rmin, Rmax = (s1.vmin.arg, s1.vmax.arg) if s0.vmin.arg >= 0 else (s1.vmax.arg, s1.vmin.arg)                                          # OLD # codegen/uops.py:118
                                                              assert math.isnan(Lmax*Rmax) or math.isnan(Lmin*Rmin) or Lmax*Rmax >= Lmin*Rmin, f"{Lmax=}, {Lmin=}, {Rmax=}, {Rmin=}"               # OLD # codegen/uops.py:119
                                                              return self.const(Lmin*Rmin), self.const(Lmax*Rmax)                                                                                  # OLD # codegen/uops.py:120
                                                          return None, None                                                                                                                              # codegen/uops.py:128

                                                      class dtypes:                                                                                                                                      # dtype.py:38
                                                        @staticmethod                                                                                                                                    # dtype.py:60
                                                        def max(dtype:DType):
                                                          if dtypes.is_int(dtype): return (2**(dtype.itemsize*8-(0 if dtypes.is_unsigned(dtype) else 1)))-1                                              # dtype.py:61

                                                      class dtypes:                                                                                                                                      # dtype.py:38
                                                        @staticmethod                                                                                                                                    # dtype.py:56
                                                        def min(dtype:DType):
                                                          if dtypes.is_int(dtype): return 0 if dtypes.is_unsigned(dtype) else -2**(dtype.itemsize*8-1)                                                   # dtype.py:57

                                                      @dataclass(frozen=True, eq=False)                                                                                                                  # codegen/uops.py:32
                                                      class UOp:
                                                        @functools.cached_property                                                                                                                       # codegen/uops.py:103
                                                        def _min_max(self) -> Tuple[Optional[UOp], Optional[UOp]]:
                                                          if self.op is UOps.DEFINE_VAR: return self.src[0], self.src[1] if isinstance(self.src[1].arg, int) else None                             # OLD # codegen/uops.py:105
                                                          if self.op is UOps.RANGE: return self.src[0], self.const(self.src[1].arg-1) if isinstance(self.src[1].arg, int) else None                # OLD # codegen/uops.py:106
                                                          if self.op is UOps.SPECIAL: return self.const(0), self.const(self.arg[1]-1) if isinstance(self.arg[1], int) else None                    # OLD # codegen/uops.py:108
                                                          if self.op is UOps.CONST: return self, self                                                                                              # OLD # codegen/uops.py:109
                                                          if self.op is UOps.ALU and cast(DType, self.dtype).count == 1:                                                                           # OLD # codegen/uops.py:110
                                                            s0,s1 = [cast(UOp, self.src[i] if i < len(self.src) else None) for i in range(2)]                                                      # OLD # codegen/uops.py:111
                                                            if self.arg is UnaryOps.NEG and self.dtype != dtypes.bool and not dtypes.is_unsigned(cast(DType, self.dtype)):                         # OLD # codegen/uops.py:112
                                                              return self.const(-s0.vmax.arg), self.const(-s0.vmin.arg)                                                                            # OLD # codegen/uops.py:113
                                                            if self.arg is BinaryOps.ADD: return self.const(s0.vmin.arg+s1.vmin.arg), self.const(s0.vmax.arg+s1.vmax.arg)                          # OLD # codegen/uops.py:114
                                                            if self.arg is BinaryOps.MUL and (s0.vmin.arg >= 0 or s1.vmin.arg >= 0):                                                               # OLD # codegen/uops.py:115
                                                              Lmin, Lmax = (s0.vmin.arg, s0.vmax.arg) if s1.vmin.arg >= 0 else (s0.vmax.arg, s0.vmin.arg)                                          # OLD # codegen/uops.py:117
                                                              Rmin, Rmax = (s1.vmin.arg, s1.vmax.arg) if s0.vmin.arg >= 0 else (s1.vmax.arg, s1.vmin.arg)                                          # OLD # codegen/uops.py:118
                                                              assert math.isnan(Lmax*Rmax) or math.isnan(Lmin*Rmin) or Lmax*Rmax >= Lmin*Rmin, f"{Lmax=}, {Lmin=}, {Rmax=}, {Rmin=}"               # OLD # codegen/uops.py:119
                                                              return self.const(Lmin*Rmin), self.const(Lmax*Rmax)                                                                                  # OLD # codegen/uops.py:120
                                                            if self.arg is BinaryOps.MOD and s1.op is UOps.CONST and s1.arg > 0: return self.const(0), self.const(s1.arg-1)                              # codegen/uops.py:121
                                                            if self.arg is BinaryOps.IDIV and s1.op is UOps.CONST:                                                                                       # codegen/uops.py:122
                                                            if self.arg is BinaryOps.MAX: return self.const(max(s0.vmin.arg, s1.vmin.arg)), self.const(max(s0.vmax.arg, s1.vmax.arg))                    # codegen/uops.py:125
                                                            if self.arg is BinaryOps.CMPLT: return (UOp.const(dtypes.bool, True), UOp.const(dtypes.bool, True)) if s0.vmax.arg < s1.vmin.arg else \      # codegen/uops.py:126
                                                              (UOp.const(dtypes.bool, False), UOp.const(dtypes.bool, False)) if s0.vmin.arg >= s1.vmax.arg else (None, None)

                                                      class dtypes:                                                                                                                                      # dtype.py:38
                                                        @staticmethod                                                                                                                                    # dtype.py:56
                                                        def min(dtype:DType):
                                                          if dtypes.is_int(dtype): return 0 if dtypes.is_unsigned(dtype) else -2**(dtype.itemsize*8-1)                                             # OLD # dtype.py:57
                                                          return -float("inf") if dtypes.is_float(dtype) else False                                                                                      # dtype.py:58

                                                      class dtypes:                                                                                                                                      # dtype.py:38
                                                        @staticmethod                                                                                                                                    # dtype.py:60
                                                        def max(dtype:DType):
                                                          if dtypes.is_int(dtype): return (2**(dtype.itemsize*8-(0 if dtypes.is_unsigned(dtype) else 1)))-1                                        # OLD # dtype.py:61
                                                          return float("inf") if dtypes.is_float(dtype) else True                                                                                        # dtype.py:62

                                              UOpGraph.cnt += 1                                                                                                                                          # codegen/uopgraph.py:529
                                              if UOpGraph.cnt != getenv("DEBUG_EXPAND", 0):                                                                                                              # codegen/uopgraph.py:530

                                                sink = graph_rewrite(sink, self.folder+expander+float4_folding if self.opts is not None and self.opts.supports_float4 else self.folder+expander)         # codegen/uopgraph.py:531

                                            def do_expand(root:UOp):                                                                                                                                     # codegen/uopgraph.py:356
                                              expands = [x for x in root.src if x.op is UOps.EXPAND]                                                                                                     # codegen/uopgraph.py:357
                                              if len(expands) == 0: return None                                                                                                                          # codegen/uopgraph.py:358

                                            def do_expand(root:UOp):                                                                                                                                     # codegen/uopgraph.py:356
                                              expands = [x for x in root.src if x.op is UOps.EXPAND]                                                                                               # OLD # codegen/uopgraph.py:357
                                              if len(expands) == 0: return None                                                                                                                    # OLD # codegen/uopgraph.py:358
                                              expand_args = tuple(sorted(dedup(flatten([x.arg for x in expands]))))                                                                                      # codegen/uopgraph.py:359

                                              if root.op is UOps.WMMA:                                                                                                                                   # codegen/uopgraph.py:360
                                                dont_expand_args = ()                                                                                                                                    # codegen/uopgraph.py:365
                                              new_srcs: List[UOp] = []                                                                                                                                   # codegen/uopgraph.py:366
                                              lrpks = _choices_from_args(dont_expand_args)                                                                                                               # codegen/uopgraph.py:367

                                                def _choices_from_args(args:Tuple[Tuple[int, int], ...]) -> List[Dict[int, int]]:                                                                        # codegen/uopgraph.py:353
                                                  return [dict(x) for x in itertools.product(*[zip(itertools.repeat(axis), range(m)) for axis,m in args])]                                               # codegen/uopgraph.py:354

                                              for rpk in _choices_from_args(expand_args):                                                                                                                # codegen/uopgraph.py:368

                                                new_src: List[UOp] = []                                                                                                                                  # codegen/uopgraph.py:369
                                                for src in root.src:                                                                                                                                     # codegen/uopgraph.py:370
                                                  if src.op is UOps.EXPAND:                                                                                                                              # codegen/uopgraph.py:371
                                                    lnew_src = tuple(src.src[_expand_arg_to_idx(src.arg, {**rpk, **lrpk})] for lrpk in lrpks)                                                            # codegen/uopgraph.py:372

                                              def _expand_arg_to_idx(args:Tuple[Tuple[int, int], ...], rpk:Dict[int, int]) -> int:                                                                       # codegen/uopgraph.py:346
                                                idx, mul = 0, 1                                                                                                                                          # codegen/uopgraph.py:347
                                                for axis,m in args[::-1]:                                                                                                                                # codegen/uopgraph.py:348
                                                  idx += rpk[axis] * mul                                                                                                                                 # codegen/uopgraph.py:349
                                                  mul *= m                                                                                                                                               # codegen/uopgraph.py:350
                                                return idx                                                                                                                                               # codegen/uopgraph.py:351

                                                    new_src.append(lnew_src[0] if len(lnew_src) == 1 or root.op is UOps.WMMA else UOp(UOps.EXPAND, root.dtype, lnew_src, dont_expand_args))              # codegen/uopgraph.py:374
                                                new_srcs.append(UOp(root.op, root.dtype, tuple(new_src), root.arg))                                                                                      # codegen/uopgraph.py:377

                                              if root.op is UOps.EXPAND:                                                                                                                                 # codegen/uopgraph.py:378
                                              if root.op is UOps.IF:                                                                                                                                     # codegen/uopgraph.py:383
                                              assert prod([x[1] for x in expand_args]) == len(new_srcs)                                                                                                  # codegen/uopgraph.py:388

                                              return UOp(UOps.EXPAND, root.dtype, tuple(new_srcs), expand_args)                                                                                          # codegen/uopgraph.py:389

                                            def exec_alu(op:Op, dtype:DType, operands): return truncate.get(dtype, lambda x: x)(python_alu[op](*operands))                                               # ops.py:134

                                            def do_expand(root:UOp):                                                                                                                                     # codegen/uopgraph.py:356
                                              expands = [x for x in root.src if x.op is UOps.EXPAND]                                                                                               # OLD # codegen/uopgraph.py:357
                                              if len(expands) == 0: return None                                                                                                                    # OLD # codegen/uopgraph.py:358
                                              expand_args = tuple(sorted(dedup(flatten([x.arg for x in expands]))))                                                                                # OLD # codegen/uopgraph.py:359
                                              if root.op is UOps.WMMA:                                                                                                                             # OLD # codegen/uopgraph.py:360
                                                dont_expand_args = ()                                                                                                                              # OLD # codegen/uopgraph.py:365
                                              new_srcs: List[UOp] = []                                                                                                                             # OLD # codegen/uopgraph.py:366
                                              lrpks = _choices_from_args(dont_expand_args)                                                                                                         # OLD # codegen/uopgraph.py:367
                                              for rpk in _choices_from_args(expand_args):                                                                                                          # OLD # codegen/uopgraph.py:368
                                                new_src: List[UOp] = []                                                                                                                            # OLD # codegen/uopgraph.py:369
                                                for src in root.src:                                                                                                                               # OLD # codegen/uopgraph.py:370
                                                  if src.op is UOps.EXPAND:                                                                                                                        # OLD # codegen/uopgraph.py:371
                                                    lnew_src = tuple(src.src[_expand_arg_to_idx(src.arg, {**rpk, **lrpk})] for lrpk in lrpks)                                                      # OLD # codegen/uopgraph.py:372
                                                    new_src.append(lnew_src[0] if len(lnew_src) == 1 or root.op is UOps.WMMA else UOp(UOps.EXPAND, root.dtype, lnew_src, dont_expand_args))        # OLD # codegen/uopgraph.py:374
                                                    new_src.append(src)                                                                                                                                  # codegen/uopgraph.py:376

                                            def do_contract(con:UOp):                                                                                                                                    # codegen/uopgraph.py:406
                                              ex = con.src[0]                                                                                                                                            # codegen/uopgraph.py:407
                                              assert con.dtype is not None                                                                                                                               # codegen/uopgraph.py:408
                                              if ex.op is not UOps.EXPAND: return UOp(UOps.VECTORIZE, con.dtype, con.src*con.dtype.count)                                                                # codegen/uopgraph.py:410
                                              assert con.dtype.count == prod([x[1] for x in con.arg]), "dtype is wrong"                                                                                  # codegen/uopgraph.py:412

                                              srcs = []                                                                                                                                                  # codegen/uopgraph.py:413
                                              for rpk in _choices_from_args(new_ex_args:=tuple(x for x in ex.arg if x not in con.arg)):                                                                  # codegen/uopgraph.py:414

                                                lsrcs = [ex.src[_expand_arg_to_idx(ex.arg, {**rpk, **lrpk})] for lrpk in _choices_from_args(con.arg)]                                                    # codegen/uopgraph.py:415

                                                srcs.append(UOp(UOps.VECTORIZE, con.dtype, tuple(lsrcs)))                                                                                                # codegen/uopgraph.py:416
                                              return srcs[0] if len(srcs) == 1 else UOp(UOps.EXPAND, con.dtype, tuple(srcs), new_ex_args)                                                                # codegen/uopgraph.py:417

                                            def loop_collapse(loop_start, loop_end, compval, idx, mval, multconst, rng, reduce, idx2=None, idx3=None, extra=None):                                       # codegen/uopgraph.py:158
                                              if getenv("DISABLE_LOOP_COLLAPSE") or rng not in reduce.src: return None  # must be the right REDUCE                                                       # codegen/uopgraph.py:159

                                              if mval.arg >= 0 or loop_start.arg != 0:                                                                                                                   # codegen/uopgraph.py:160
                                              if idx2 is not None: idx = idx + idx2                                                                                                                      # codegen/uopgraph.py:164
                                              if idx3 is not None: idx = idx + idx3                                                                                                                      # codegen/uopgraph.py:165
                                              comprange = UOp.min(loop_end, UOp.max((idx-compval-mval)//mval + (loop_end-loop_start), loop_start))                                                       # codegen/uopgraph.py:166

                                                @dataclass(frozen=True, eq=False)                                                                                                                        # codegen/uops.py:32
                                                class UOp:
                                                  def min(self, x): return -(-self).max(-x)                                                                                                              # codegen/uops.py:69

                                              new_reduce_op = comprange.cast(multconst.dtype) * multconst                                                                                                # codegen/uopgraph.py:167

                                              ret = UOp(UOps.REDUCE, reduce.dtype, (new_reduce_op,) + tuple(x for x in reduce.src[1:] if x is not rng), reduce.arg)                                      # codegen/uopgraph.py:168
                                              if extra is not None: ret = ret + UOp(UOps.REDUCE, reduce.dtype, (extra,) + reduce.src[1:], reduce.arg)                                                    # codegen/uopgraph.py:169

                                              return ret                                                                                                                                                 # codegen/uopgraph.py:170

                                            @dataclass(frozen=True, eq=False)                                                                                                                            # codegen/uops.py:32
                                            class UOp:
                                              @functools.cached_property                                                                                                                                 # codegen/uops.py:103
                                              def _min_max(self) -> Tuple[Optional[UOp], Optional[UOp]]:
                                                if self.op is UOps.DEFINE_VAR: return self.src[0], self.src[1] if isinstance(self.src[1].arg, int) else None                                       # OLD # codegen/uops.py:105
                                                if self.op is UOps.RANGE: return self.src[0], self.const(self.src[1].arg-1) if isinstance(self.src[1].arg, int) else None                          # OLD # codegen/uops.py:106
                                                if self.op is UOps.SPECIAL: return self.const(0), self.const(self.arg[1]-1) if isinstance(self.arg[1], int) else None                              # OLD # codegen/uops.py:108
                                                if self.op is UOps.CONST: return self, self                                                                                                        # OLD # codegen/uops.py:109
                                                if self.op is UOps.ALU and cast(DType, self.dtype).count == 1:                                                                                     # OLD # codegen/uops.py:110
                                                  s0,s1 = [cast(UOp, self.src[i] if i < len(self.src) else None) for i in range(2)]                                                                # OLD # codegen/uops.py:111
                                                  if self.arg is UnaryOps.NEG and self.dtype != dtypes.bool and not dtypes.is_unsigned(cast(DType, self.dtype)):                                   # OLD # codegen/uops.py:112
                                                    return self.const(-s0.vmax.arg), self.const(-s0.vmin.arg)                                                                                      # OLD # codegen/uops.py:113
                                                  if self.arg is BinaryOps.ADD: return self.const(s0.vmin.arg+s1.vmin.arg), self.const(s0.vmax.arg+s1.vmax.arg)                                    # OLD # codegen/uops.py:114
                                                  if self.arg is BinaryOps.MUL and (s0.vmin.arg >= 0 or s1.vmin.arg >= 0):                                                                         # OLD # codegen/uops.py:115
                                                    Lmin, Lmax = (s0.vmin.arg, s0.vmax.arg) if s1.vmin.arg >= 0 else (s0.vmax.arg, s0.vmin.arg)                                                    # OLD # codegen/uops.py:117
                                                    Rmin, Rmax = (s1.vmin.arg, s1.vmax.arg) if s0.vmin.arg >= 0 else (s1.vmax.arg, s1.vmin.arg)                                                    # OLD # codegen/uops.py:118
                                                    assert math.isnan(Lmax*Rmax) or math.isnan(Lmin*Rmin) or Lmax*Rmax >= Lmin*Rmin, f"{Lmax=}, {Lmin=}, {Rmax=}, {Rmin=}"                         # OLD # codegen/uops.py:119
                                                    return self.const(Lmin*Rmin), self.const(Lmax*Rmax)                                                                                            # OLD # codegen/uops.py:120
                                                    if s1.arg > 0: return self.const(s0.vmin.arg//s1.arg), self.const(s0.vmax.arg//s1.arg)                                                               # codegen/uops.py:123
                                                    if s1.arg < 0: return self.const(-(s0.vmax.arg//-s1.arg)), self.const(-(s0.vmin.arg//-s1.arg))                                                       # codegen/uops.py:124

                                            def create_gate(root:UOp) -> Optional[UOp]:                                                                                                                  # codegen/uopgraph.py:425
                                              return None if len(root.src) == 3 or (ret:=_gate_srcs(root, root.src[3])) is root else ret                                                                 # codegen/uopgraph.py:430

                                              if UOpGraph.cnt != getenv("DEBUG_REDUCE", 0):                                                                                                              # codegen/uopgraph.py:532

                                                sink = graph_rewrite(sink, self.folder+expander+reducer)                                                                                                 # codegen/uopgraph.py:533

                                            def no_vectorized_alu(alu):                                                                                                                                  # codegen/uopgraph.py:419
                                              if alu.dtype.count == 1: return None                                                                                                                       # codegen/uopgraph.py:420

                                            def delete_redundant_gates(root:UOp) -> Optional[UOp]:                                                                                                       # codegen/uopgraph.py:452
                                              if len(root.src) == 3 or (gate:=find_gate(root)) is None or gate.src[0] is not root.src[3]: return None                                                    # codegen/uopgraph.py:457

                                              if extra_pm: sink = graph_rewrite(sink, self.folder+extra_pm)                                                                                              # codegen/uopgraph.py:536
                                              children: Dict[UOp, List[UOp]] = {}                                                                                                                        # codegen/uopgraph.py:540
                                              in_degree: Dict[UOp, int] = {}                                                                                                                             # codegen/uopgraph.py:541
                                              get_children_dfs(sink, children, in_degree)                                                                                                                # codegen/uopgraph.py:542

                                                def get_children_dfs(u:UOp, children:Dict[UOp, List[UOp]], in_degree:Dict[UOp, int]):                                                                    # codegen/uopgraph.py:472
                                                  if u in children: return                                                                                                                               # codegen/uopgraph.py:473
                                                  children[u] = []                                                                                                                                       # codegen/uopgraph.py:474
                                                  for x in u.src:                                                                                                                                        # codegen/uopgraph.py:475
                                                    get_children_dfs(x, children, in_degree)                                                                                                             # codegen/uopgraph.py:476

                                                  def get_children_dfs(u:UOp, children:Dict[UOp, List[UOp]], in_degree:Dict[UOp, int]):                                                                  # codegen/uopgraph.py:472
                                                    if u in children: return                                                                                                                       # OLD # codegen/uopgraph.py:473
                                                    children[u] = []                                                                                                                               # OLD # codegen/uopgraph.py:474
                                                    for x in u.src:                                                                                                                                # OLD # codegen/uopgraph.py:475
                                                      get_children_dfs(x, children, in_degree)                                                                                                     # OLD # codegen/uopgraph.py:476
                                                    in_degree[u] = len(u.src)                                                                                                                            # codegen/uopgraph.py:478

                                                      def get_children_dfs(u:UOp, children:Dict[UOp, List[UOp]], in_degree:Dict[UOp, int]):                                                              # codegen/uopgraph.py:472
                                                        if u in children: return                                                                                                                   # OLD # codegen/uopgraph.py:473
                                                        children[u] = []                                                                                                                           # OLD # codegen/uopgraph.py:474
                                                        for x in u.src:                                                                                                                            # OLD # codegen/uopgraph.py:475
                                                          get_children_dfs(x, children, in_degree)                                                                                                 # OLD # codegen/uopgraph.py:476
                                                          children[x].append(u)                                                                                                                          # codegen/uopgraph.py:477

                                              scope_children = {p:get_recursive_children(p, END_FOR_UOP[p.op][0]) for p in reversed(in_degree) if p.op in END_FOR_UOP}                                   # codegen/uopgraph.py:550

                                              def linearize(self, extra_pm:Optional[PatternMatcher]=None, skip_check=False) -> UOpGraph:                                                                 # codegen/uopgraph.py:518
                                            class UOpGraph:                                                                                                                                              # codegen/uopgraph.py:491
                                                @functools.lru_cache(None)                                                                                                                               # codegen/uopgraph.py:545
                                                def get_recursive_children(x:UOp, end:UOps, include_self=False) -> Set[UOp]:
                                                  if x.op is UOps.SINK: return set()                                                                                                                     # codegen/uopgraph.py:546
                                                  return set.union({x} if include_self else set(), *([get_recursive_children(u, end, True) for u in children[x] if x.op is not end]))                    # codegen/uopgraph.py:547

                                              queue:List[Tuple[int, UOp]] = []                                                                                                                           # codegen/uopgraph.py:552
                                              for u in children:                                                                                                                                         # codegen/uopgraph.py:560
                                                if in_degree[u] == 0: push(u)                                                                                                                            # codegen/uopgraph.py:561

                                                    def linearize(self, extra_pm:Optional[PatternMatcher]=None, skip_check=False) -> UOpGraph:                                                           # codegen/uopgraph.py:518
                                                  class UOpGraph:                                                                                                                                        # codegen/uopgraph.py:491
                                                      def push(u:UOp):                                                                                                                                   # codegen/uopgraph.py:553
                                                        priority = 0                                                                                                                                     # codegen/uopgraph.py:554
                                                        for l, ss in scope_children.items():                                                                                                             # codegen/uopgraph.py:556
                                                          if l.op is UOps.RANGE and u in ss: priority -= l.arg[0]*1000 + l.arg[1]                                                                        # codegen/uopgraph.py:557
                                                        heapq.heappush(queue, (priority, u))                                                                                                             # codegen/uopgraph.py:558

                                            @dataclass(frozen=True, eq=False)                                                                                                                            # codegen/uops.py:32
                                            class UOp:
                                              def __lt__(self, x:UOp): return self.cmp_tuple < x.cmp_tuple                                                                                               # codegen/uops.py:45

                                                @dataclass(frozen=True, eq=False)                                                                                                                        # codegen/uops.py:32
                                                class UOp:
                                                  @functools.cached_property                                                                                                                             # codegen/uops.py:41
                                                  def cmp_tuple(self):
                                                    return (self.op.value, (self.arg if self.op is not UOps.DEFINE_VAR else self.arg.expr) if self.op is not UOps.ALU else \                             # codegen/uops.py:43
                                                            self.arg.value, self.dtype, self.src)

                                              scope_end: Dict[UOp, UOp] = {}                                                                                                                             # codegen/uopgraph.py:563
                                              self._uops = []                                                                                                                                            # codegen/uopgraph.py:564
                                              while queue:                                                                                                                                               # codegen/uopgraph.py:565
                                                p,x = heapq.heappop(queue)                                                                                                                               # codegen/uopgraph.py:566

                                                if DEBUG >= 7: print(p,x)                                                                                                                                # codegen/uopgraph.py:567

                                                if x in scope_children: scope_end[x] = x                                                                                                                 # codegen/uopgraph.py:568
                                                if x.op is UOps.DEFINE_ACC:                                                                                                                              # codegen/uopgraph.py:569
                                                else: self._uops.append(x)                                                                                                                               # codegen/uopgraph.py:572
                                                for u, ss in scope_children.items():                                                                                                                     # codegen/uopgraph.py:573
                                                  if x in ss:                                                                                                                                            # codegen/uopgraph.py:574
                                                for u in children[x]:                                                                                                                                    # codegen/uopgraph.py:577
                                                  in_degree[u] -= 1                                                                                                                                      # codegen/uopgraph.py:578
                                                  if in_degree[u] == 0: push(u)                                                                                                                          # codegen/uopgraph.py:579

                                                    ss.remove(x)                                                                                                                                         # codegen/uopgraph.py:575
                                                    if len(ss) == 0: scope_end[u] = x                                                                                                                    # codegen/uopgraph.py:576

                                                for u in children[x]:                                                                                                                              # OLD # codegen/uopgraph.py:577
                                                  in_degree[u] -= 1                                                                                                                                # OLD # codegen/uopgraph.py:578
                                                  if in_degree[u] == 0: push(u)                                                                                                                    # OLD # codegen/uopgraph.py:579
                                              for u, x in scope_end.items(): self._uops.insert(self._uops.index(x)+1, UOp(END_FOR_UOP[u.op][1], None, (u,)))                                             # codegen/uopgraph.py:582
                                              if not skip_check:                                                                                                                                         # codegen/uopgraph.py:585
                                                bad_ops = dedup([x.op for x in self._uops if x.op in {UOps.EXPAND, UOps.CONTRACT, UOps.REDUCE}])                                                         # codegen/uopgraph.py:586

                                                try:                                                                                                                                                     # codegen/uopgraph.py:587
                                                  type_verify(self.uops)                                                                                                                                 # codegen/uopgraph.py:588

                                                    class UOpGraph:                                                                                                                                      # codegen/uopgraph.py:491
                                                      @property                                                                                                                                          # codegen/uopgraph.py:507
                                                      def uops(self) -> List[UOp]:
                                                        if self._uops is None: self.linearize()                                                                                                          # codegen/uopgraph.py:508
                                                        return cast(List[UOp], self._uops)                                                                                                               # codegen/uopgraph.py:509

                                                    def type_verify(uops):                                                                                                                               # codegen/uops.py:200
                                                      for u in uops:                                                                                                                                     # codegen/uops.py:201
                                                        uop, arg, src, dtype = u.op, u.arg, u.src, u.dtype                                                                                               # codegen/uops.py:202
                                                        if uop in {UOps.CONST, UOps.DEFINE_ACC}:                                                                                                         # codegen/uops.py:203
                                                        if uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}: assert arg is None and dtype is not None # type is the output type, not an arg              # codegen/uops.py:208
                                                        if uop is UOps.CAST: assert dtype.count == 1 and len(src) == 1                                                                                   # codegen/uops.py:209
                                                        if uop is UOps.VECTORIZE:                                                                                                                        # codegen/uops.py:210
                                                        if uop is UOps.LOAD and len(src) > 3 and src[3].op is UOps.ALU: assert src[3].dtype == dtypes.bool and src[2].dtype == dtype                     # codegen/uops.py:213
                                                        if uop is UOps.GEP: assert dtype == src[0].dtype.scalar(), f"GEP of {src[0].dtype=} should be {src[0].dtype.scalar()} != {dtype}"                # codegen/uops.py:214
                                                        if uop is UOps.STORE:                                                                                                                            # codegen/uops.py:215
                                                        if uop is UOps.ALU:                                                                                                                              # codegen/uops.py:218
                                                          if uop is UOps.DEFINE_ACC:                                                                                                                     # codegen/uops.py:204
                                                          assert dtype is not None and type(arg) is type(dtypes.as_const(arg, dtype)), f"type of {arg=} does not match {dtype}"                          # codegen/uops.py:207

                                                        if uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}: assert arg is None and dtype is not None # type is the output type, not an arg        # OLD # codegen/uops.py:208
                                                        if uop is UOps.CAST: assert dtype.count == 1 and len(src) == 1                                                                             # OLD # codegen/uops.py:209
                                                        if uop is UOps.VECTORIZE:                                                                                                                  # OLD # codegen/uops.py:210
                                                        if uop is UOps.LOAD and len(src) > 3 and src[3].op is UOps.ALU: assert src[3].dtype == dtypes.bool and src[2].dtype == dtype               # OLD # codegen/uops.py:213
                                                        if uop is UOps.GEP: assert dtype == src[0].dtype.scalar(), f"GEP of {src[0].dtype=} should be {src[0].dtype.scalar()} != {dtype}"          # OLD # codegen/uops.py:214
                                                        if uop is UOps.STORE:                                                                                                                      # OLD # codegen/uops.py:215
                                                        if uop is UOps.ALU:                                                                                                                        # OLD # codegen/uops.py:218
                                                          if arg in UnaryOps: assert dtype == src[0].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=}"                                          # codegen/uops.py:219
                                                          elif arg in {BinaryOps.CMPLT, BinaryOps.CMPNE}:                                                                                                # codegen/uops.py:220
                                                          elif arg is BinaryOps.IDIV:                                                                                                                    # codegen/uops.py:223
                                                          elif arg in {BinaryOps.SHL, BinaryOps.SHR}:                                                                                                    # codegen/uops.py:226
                                                          elif arg in BinaryOps: assert dtype == src[0].dtype == src[1].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=} != {src[1].dtype=}"    # codegen/uops.py:229
                                                            assert dtypes.is_int(src[0].dtype) and dtypes.is_int(src[1].dtype), f"input dtype is not int {src[0].dtype=}, {src[1].dtype=}"               # codegen/uops.py:224

                                                            assert dtypes.is_int(dtype), f"output dtype is not int {dtype=}"                                                                             # codegen/uops.py:225

                                                          assert dtype is None, f"{uop} dtype must be None, got {dtype}"                                                                                 # codegen/uops.py:216
                                                          if len(src) == 4: assert src[3].dtype == dtypes.bool, f"gate dtype mismatch {src[3].dtype} != {dtypes.bool}"                                   # codegen/uops.py:217

                                                  assert self._uops[-1].op is UOps.SINK, f"didn't end with SINK, ended with {self._uops[-1]}"                                                            # codegen/uopgraph.py:589
                                                  assert len(bad_ops) == 0, f"bad UOps left in list: {bad_ops}"                                                                                          # codegen/uopgraph.py:590
                                                  assert len(all_stores := [x.src[0:2]+x.src[3:] for x in self._uops if x.op is UOps.STORE and x.src[0].op is not UOps.DEFINE_LOCAL]) \                  # codegen/uopgraph.py:593
                                                    == len(dedup(all_stores)), "repeated stores in uops"

                                              self._uops = self._uops[:-1]                                                                                                                               # codegen/uopgraph.py:601
                                              return self                                                                                                                                                # codegen/uopgraph.py:602

                                        src = self.opts.render(name:=to_function_name(ansiname:=(name_override if name_override is not None else self.name)), self.uops.uops)                            # codegen/kernel.py:740

                                          class Kernel:                                                                                                                                                  # codegen/kernel.py:54
                                            @functools.cached_property                                                                                                                                   # codegen/kernel.py:622
                                            def name(self) -> str:
                                              name = ("r" if self.reduceop else ("C" if all(x.op in BufferOps for x in self.ast.lazyops) else "E")) + \                                                  # codegen/kernel.py:624
                                                           (f"{len(self.ast.src)}_" if len(self.ast.src) > 1 else "_") + \
                                                           colored('_', 'BLACK').join([colored(str(x), c) for x,c in zip(self.full_shape, self.colors())])

                                                class Kernel:                                                                                                                                            # codegen/kernel.py:54
                                                  # there's eight chunks of the shape                                                                                                                    # codegen/kernel.py:182
                                                  # blue   -- global dims
                                                  # cyan   -- local dims (warp ones first)
                                                  #  *** self.first_reduce
                                                  # green  -- reduce-local dims
                                                  # white  -- reduce-late upcasted dim (self.upcast_in_mid_reduce_axes)
                                                  # red    -- reduce loops
                                                  #  *** self.upcasted
                                                  # purple -- reduce upcasted
                                                  # yellow -- normal upcasted dimensions
                                                  def colors(self) -> List[str]:
                                                    colors = ["blue"] * self.global_dims if not self.dont_use_locals else ["BLUE"] * self.global_dims                                                    # codegen/kernel.py:184

                                                      class Kernel:                                                                                                                                      # codegen/kernel.py:54
                                                        @property                                                                                                                                        # codegen/kernel.py:170
                                                        def global_dims(self) -> int: return self.first_reduce-self.local_dims

                                                    colors += ["cyan"] * self.local_dims                                                                                                                 # codegen/kernel.py:186
                                                    colors += ["white" if i in self.upcast_in_mid_reduce_axes else "green" for i in range(self.first_reduce, self.first_reduce + self.group_for_reduces)]  # noqa: E501 # codegen/kernel.py:188

                                                    colors += ["red"] * (self.first_upcast - (self.first_reduce + self.group_for_reduces))                                                               # codegen/kernel.py:190

                                                    colors += ["magenta" if self.full_shape[i] != self.sts[0].shape[i] else "yellow" for i in range(self.first_upcast, self.shape_len)]                  # codegen/kernel.py:192

                                                    assert len(colors) == self.shape_len, "colors size mismatch"                                                                                         # codegen/kernel.py:193

                                                    return colors                                                                                                                                        # codegen/kernel.py:194

                                              Kernel.kernel_cnt[(function_name := to_function_name(name))] += 1                                                                                          # codegen/kernel.py:629

                                                @functools.lru_cache(maxsize=None)                                                                                                                       # helpers.py:76
                                                def to_function_name(s:str): return ''.join([c if c in (string.ascii_letters+string.digits+'_') else f'{ord(c):02X}' for c in ansistrip(s)])

                                                  def ansistrip(s:str): return re.sub('\x1b\\[(K|.*?m)', '', s)                                                                                          # helpers.py:30

                                              suffix = f"{'n'+str(Kernel.kernel_cnt[function_name]-1)}" if Kernel.kernel_cnt[function_name] > 1 else ""                                                  # codegen/kernel.py:630
                                              return name+colored(suffix, 'BLACK')                                                                                                                       # codegen/kernel.py:631

                                          class CStyleLanguage(Renderer):                                                                                                                                # renderer/cstyle.py:10
                                            def render(self, name:str, uops:List[UOp]) -> str:                                                                                                           # renderer/cstyle.py:95
                                              kernel = []                                                                                                                                                # renderer/cstyle.py:96
                                              bufs: Dict[UOp, Tuple[str, Tuple[DType, bool]]] = {}                                                                                                       # renderer/cstyle.py:97
                                              depth = 1                                                                                                                                                  # renderer/cstyle.py:98
                                              c: DefaultDict[str, int] = defaultdict(int)                                                                                                                # renderer/cstyle.py:101
                                              r: Dict[UOp, str] = {}                                                                                                                                     # renderer/cstyle.py:102
                                              child_count = Counter(v for ru in uops for v in ru.src)                                                                                                    # renderer/cstyle.py:111
                                              seen_vars = set()                                                                                                                                          # renderer/cstyle.py:113
                                              for u in uops:                                                                                                                                             # renderer/cstyle.py:114
                                                uop,dtype,src,args = u.op,u.dtype,u.src,u.arg                                                                                                            # renderer/cstyle.py:115
                                                if uop is UOps.IF:                                                                                                                                       # renderer/cstyle.py:117
                                                elif uop is UOps.BARRIER: kk(self.barrier)                                                                                                               # renderer/cstyle.py:120
                                                elif uop in {UOps.ENDRANGE, UOps.ENDIF}:                                                                                                                 # renderer/cstyle.py:121
                                                elif uop is UOps.STORE:                                                                                                                                  # renderer/cstyle.py:124
                                                  assert dtype is not None, f"None dtype for uop {uop}"                                                                                                  # renderer/cstyle.py:131
                                                  if uop is UOps.RANGE:                                                                                                                                  # renderer/cstyle.py:132
                                                  elif uop is UOps.ALU:                                                                                                                                  # renderer/cstyle.py:135
                                                  elif uop is UOps.SPECIAL:                                                                                                                              # renderer/cstyle.py:144
                                                  elif uop is UOps.DEFINE_VAR:                                                                                                                           # renderer/cstyle.py:147
                                                  elif uop is UOps.LOAD:                                                                                                                                 # renderer/cstyle.py:152
                                                  elif uop is UOps.PHI:                                                                                                                                  # renderer/cstyle.py:157
                                                  elif uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}:                                                                                                 # renderer/cstyle.py:160
                                                  elif uop is UOps.DEFINE_LOCAL:                                                                                                                         # renderer/cstyle.py:170
                                                  elif uop is UOps.DEFINE_GLOBAL:                                                                                                                        # renderer/cstyle.py:173
                                                    bufs[u] = (nm:=f"data{args}", (dtype, False))                                                                                                        # renderer/cstyle.py:174
                                                    r[u] = nm                                                                                                                                            # renderer/cstyle.py:175
                                                  elif uop is UOps.WMMA: kk(f"{self.render_dtype(dtype)} {ssa('wmma',u)} = __{args[0]}({r[src[0]]}, {r[src[1]]}, {r[src[2]]});")                         # renderer/cstyle.py:176
                                                  elif uop is UOps.DEFINE_ACC: kk(f"{self.render_dtype(dtype)} {ssa('acc',u)} = {self.render_const(src[0].arg, dtype)};")                                # renderer/cstyle.py:177
                                                  elif uop is UOps.CONST: r[u] = self.render_const(args, dtype) if args >= 0 else f"({self.render_const(args, dtype)})"                                  # renderer/cstyle.py:178

                                                    class CStyleLanguage(Renderer):                                                                                                                      # renderer/cstyle.py:10
                                                      # returns a str expression of the const with the given type                                                                                        # renderer/cstyle.py:47
                                                      def render_const(self, x:ConstType, dtype:DType) -> str:
                                                        if math.isnan(x): val = "NAN"                                                                                                                    # renderer/cstyle.py:48
                                                        elif math.isinf(x): val = ("-" if x < 0 else "") + "INFINITY"                                                                                    # renderer/cstyle.py:49
                                                        elif dtype.scalar() == dtypes.bool: val = "1" if x else "0"                                                                                      # renderer/cstyle.py:50

                                                        elif dtype.scalar() == dtypes.float: val = f"{x}f"                                                                                               # renderer/cstyle.py:51

                                                        elif dtype.scalar() == dtypes.uint64: val = f"{x}ULL"                                                                                            # renderer/cstyle.py:52

                                                        else: val = str(x)                                                                                                                               # renderer/cstyle.py:53
                                                        if dtype.count > 1: return self.render_vectorize([val] * dtype.count, dtype)                                                                     # renderer/cstyle.py:54
                                                        return (self.render_cast(val, dtype) if dtype not in [dtypes.float, dtypes.int, dtypes.bool] else val)                                           # renderer/cstyle.py:55

                                                    kk(f"for (int {(expr := ssa('ridx',u))} = {r[src[0]]}; {expr} < {r[src[1]]}; {expr}++) {{")                                                          # renderer/cstyle.py:133

                                                        def render(self, name:str, uops:List[UOp]) -> str:                                                                                               # renderer/cstyle.py:95
                                                      class CStyleLanguage(Renderer):                                                                                                                    # renderer/cstyle.py:10
                                                          def ssa(prefix:str, u:Optional[UOp]=None):                                                                                                     # renderer/cstyle.py:104
                                                            ret = f"{prefix}{c[prefix]}"                                                                                                                 # renderer/cstyle.py:106
                                                            if u is not None: r[u] = ret                                                                                                                 # renderer/cstyle.py:107
                                                            c[prefix] += 1                                                                                                                               # renderer/cstyle.py:108
                                                            return ret                                                                                                                                   # renderer/cstyle.py:109

                                                        def render(self, name:str, uops:List[UOp]) -> str:                                                                                               # renderer/cstyle.py:95
                                                      class CStyleLanguage(Renderer):                                                                                                                    # renderer/cstyle.py:10
                                                          def kk(s): kernel.append("  "*depth+s)                                                                                                         # renderer/cstyle.py:99

                                                    depth += 1                                                                                                                                           # renderer/cstyle.py:134
                                                  elif uop is UOps.ALU:                                                                                                                            # OLD # renderer/cstyle.py:135
                                                    if args in {BinaryOps.ADD,BinaryOps.MUL,BinaryOps.XOR}: operands = [strip_parens(r[v]) if v.arg == args else r[v]for v in src]                       # renderer/cstyle.py:137
                                                    else: operands = [r[v] for v in src]                                                                                                                 # renderer/cstyle.py:138
                                                    val = self.code_for_op[args](*operands, dtype)                                                                                                       # renderer/cstyle.py:139
                                                    assert child_count[u] != 0, f"childless ALU op found {u}"                                                                                            # renderer/cstyle.py:140
                                                    if child_count[u] <= 1 and args is not BinaryOps.MAX and not getenv("EXPAND_SSA"): r[u] = val                                                        # renderer/cstyle.py:142
                                                    else: kk(f"{self.render_dtype(dtype)} {ssa('alu',u)} = {val};")                                                                                      # renderer/cstyle.py:143

                                                      class CStyleLanguage(Renderer):                                                                                                                    # renderer/cstyle.py:10
                                                        def render_dtype(self, var_dtype:DType) -> str:                                                                                                  # renderer/cstyle.py:92
                                                          return self.type_map.get(scalar:=var_dtype.scalar(), scalar.name) + (str(var_dtype.count) if (var_dtype.count) > 1 else "")                    # renderer/cstyle.py:93

                                            def strip_parens(fst:str): return fst[1:-1] if fst[0] == '(' and fst[-1] == ')' and fst[1:-1].find('(') <= fst[1:-1].find(')') else fst                      # helpers.py:36

                                                  assert src[0].dtype is not None and src[2].dtype is not None                                                                                           # renderer/cstyle.py:125
                                                  if src[0].op is UOps.DEFINE_GLOBAL: bufs[src[0]] = (bufs[src[0]][0], (bufs[src[0]][1][0], True))                                                       # renderer/cstyle.py:127
                                                  rendered_store = self.render_store(r[src[0]], src[0].dtype, r[src[2]], src[2].dtype, strip_parens(r[src[1]]), src[0].op is UOps.DEFINE_LOCAL)          # renderer/cstyle.py:128

                                                    class CStyleLanguage(Renderer):                                                                                                                      # renderer/cstyle.py:10
                                                      # returns a str statement that does the store                                                                                                      # renderer/cstyle.py:80
                                                      def render_store(self, buf_name:str, buf_dtype:DType, var_name:str, var_dtype:DType, idx:str, local=False) -> str:
                                                        if isinstance(buf_dtype, ImageDType):                                                                                                            # renderer/cstyle.py:81
                                                        if self.uses_vload and buf_dtype.scalar() == dtypes.float16 and var_dtype.scalar() != dtypes.float16:                                            # renderer/cstyle.py:84
                                                        if var_dtype.count > 1:                                                                                                                          # renderer/cstyle.py:86
                                                        return f"*({buf_name}+{idx}) = {var_name};" if self.uses_ptr_arithmetic else f"{buf_name}[{idx}] = {var_name};"                                  # renderer/cstyle.py:89

                                                  kk(f"if ({r[src[3]]}) {{ {rendered_store} }}" if len(src) > 3 else rendered_store)                                                                     # renderer/cstyle.py:129

                                                  depth -= 1                                                                                                                                             # renderer/cstyle.py:122
                                                  kk("}")                                                                                                                                                # renderer/cstyle.py:123

                                                elif uop is UOps.STORE:                                                                                                                            # OLD # renderer/cstyle.py:124
                                                  assert dtype is not None, f"None dtype for uop {uop}"                                                                                            # OLD # renderer/cstyle.py:131
                                                  if uop is UOps.RANGE:                                                                                                                            # OLD # renderer/cstyle.py:132
                                                  elif uop is UOps.ALU:                                                                                                                            # OLD # renderer/cstyle.py:135
                                                  elif uop is UOps.SPECIAL:                                                                                                                        # OLD # renderer/cstyle.py:144
                                                  elif uop is UOps.DEFINE_VAR:                                                                                                                     # OLD # renderer/cstyle.py:147
                                                  elif uop is UOps.LOAD:                                                                                                                           # OLD # renderer/cstyle.py:152
                                                  elif uop is UOps.PHI:                                                                                                                            # OLD # renderer/cstyle.py:157
                                                  elif uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}:                                                                                           # OLD # renderer/cstyle.py:160
                                                  elif uop is UOps.DEFINE_LOCAL:                                                                                                                   # OLD # renderer/cstyle.py:170
                                                  elif uop is UOps.DEFINE_GLOBAL:                                                                                                                  # OLD # renderer/cstyle.py:173
                                                    bufs[u] = (nm:=f"data{args}", (dtype, False))                                                                                                  # OLD # renderer/cstyle.py:174
                                                    r[u] = nm                                                                                                                                      # OLD # renderer/cstyle.py:175
                                                  elif uop is UOps.WMMA: kk(f"{self.render_dtype(dtype)} {ssa('wmma',u)} = __{args[0]}({r[src[0]]}, {r[src[1]]}, {r[src[2]]});")                   # OLD # renderer/cstyle.py:176
                                                  elif uop is UOps.DEFINE_ACC: kk(f"{self.render_dtype(dtype)} {ssa('acc',u)} = {self.render_const(src[0].arg, dtype)};")                          # OLD # renderer/cstyle.py:177
                                                  elif uop is UOps.CONST: r[u] = self.render_const(args, dtype) if args >= 0 else f"({self.render_const(args, dtype)})"                            # OLD # renderer/cstyle.py:178
                                                    kk(f"for (int {(expr := ssa('ridx',u))} = {r[src[0]]}; {expr} < {r[src[1]]}; {expr}++) {{")                                                    # OLD # renderer/cstyle.py:133
                                                    depth += 1                                                                                                                                     # OLD # renderer/cstyle.py:134
                                                    if args in {BinaryOps.ADD,BinaryOps.MUL,BinaryOps.XOR}: operands = [strip_parens(r[v]) if v.arg == args else r[v]for v in src]                 # OLD # renderer/cstyle.py:137
                                                    else: operands = [r[v] for v in src]                                                                                                           # OLD # renderer/cstyle.py:138
                                                    val = self.code_for_op[args](*operands, dtype)                                                                                                 # OLD # renderer/cstyle.py:139
                                                    assert child_count[u] != 0, f"childless ALU op found {u}"                                                                                      # OLD # renderer/cstyle.py:140
                                                    if child_count[u] <= 1 and args is not BinaryOps.MAX and not getenv("EXPAND_SSA"): r[u] = val                                                  # OLD # renderer/cstyle.py:142
                                                    else: kk(f"{self.render_dtype(dtype)} {ssa('alu',u)} = {val};")                                                                                # OLD # renderer/cstyle.py:143
                                                  assert src[0].dtype is not None and src[2].dtype is not None                                                                                     # OLD # renderer/cstyle.py:125
                                                  if src[0].op is UOps.DEFINE_GLOBAL: bufs[src[0]] = (bufs[src[0]][0], (bufs[src[0]][1][0], True))                                                 # OLD # renderer/cstyle.py:127
                                                  rendered_store = self.render_store(r[src[0]], src[0].dtype, r[src[2]], src[2].dtype, strip_parens(r[src[1]]), src[0].op is UOps.DEFINE_LOCAL)    # OLD # renderer/cstyle.py:128
                                                  kk(f"if ({r[src[3]]}) {{ {rendered_store} }}" if len(src) > 3 else rendered_store)                                                               # OLD # renderer/cstyle.py:129
                                              return self.render_kernel(name, kernel, list(bufs.values()), uops)                                                                                         # renderer/cstyle.py:187

                                                class CStyleLanguage(Renderer):                                                                                                                          # renderer/cstyle.py:10
                                                  def render_kernel(self, function_name:str, kernel:List[str], bufs:List[Tuple[str,Tuple[DType,bool]]], uops:List[UOp], prefix=None) -> str:             # renderer/cstyle.py:69
                                                    tmp = "const sampler_t smp = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_CLAMP | CLK_FILTER_NEAREST;\n" if any(isinstance(dtype, ImageDType) for _,(dtype,_) in bufs) else ""  # noqa: E501 # renderer/cstyle.py:70
                                                    buftypes = [(name,f"{'write_only' if mutable else 'read_only'} image2d_t" if dtype.name.startswith('image') else                                     # renderer/cstyle.py:71
                                                                ("" if mutable else "const ")+self.buffer_prefix+self.render_dtype(dtype)+"*"+self.buffer_suffix if isinstance(dtype, PtrDType) else
                                                                self.arg_int_prefix if dtype == dtypes.int else None) for name,(dtype,mutable) in bufs]

                                                    prg = ''.join([f"{self.kernel_prefix}void {self.get_kernel_modifier(uops)}{function_name}(",] +                                                      # renderer/cstyle.py:74
                                                    [', '.join([f'{t} {name}' for name,t in buftypes] + self.extra_args)] +
                                                    [") {\n" + tmp] + ['\n'.join(kernel), "\n}"])

                                                      class CStyleLanguage(Renderer):                                                                                                                    # renderer/cstyle.py:10
                                                        def get_kernel_modifier(self, uops:List[UOp]) -> str: return ""                                                                                  # renderer/cstyle.py:68

                                                    return prg if prefix is None else "\n".join(prefix)+f"\n{prg}"                                                                                       # renderer/cstyle.py:77

                                        if getenv("RUN_PROCESS_REPLAY"):                                                                                                                                 # codegen/kernel.py:742

                                        mem_bytes = sum(max(x.arg.dtype.itemsize * x.arg.st.real_size() for x in group) for _, group in                                                                  # codegen/kernel.py:748
                                          itertools.groupby([x for x in self.ast.lazyops if x.op in BufferOps and isinstance(x.arg, MemBuffer) and x.arg.idx >= 0],
                                                            key=lambda x: (x.op, x.arg.idx)))

                                      @dataclass(frozen=True)                                                                                                                                            # shape/shapetracker.py:10
                                      class ShapeTracker:
                                        def real_size(self) -> int:                                                                                                                                      # shape/shapetracker.py:40
                                          if 0 in self.shape: return 0                                                                                                                                   # shape/shapetracker.py:41

                                          idx, valid = self.expr_idxs()                                                                                                                                  # shape/shapetracker.py:42

                                          if not valid: return 0                                                                                                                                         # shape/shapetracker.py:43

                                          ret = idx.max                                                                                                                                                  # shape/shapetracker.py:45
                                          if not isinstance(ret, int): ret = ret.max  # might be represent by symbolic shape, take one more max for int max                                              # shape/shapetracker.py:46
                                          assert isinstance(ret, int), f"ret must be integer, {ret=} isn't"                                                                                              # shape/shapetracker.py:47
                                          return ret+1                                                                                                                                                   # shape/shapetracker.py:48

                                        return Program(ansiname, src, self.opts.device, self.uops.uops, mem_estimate=mem_bytes,                                                                          # codegen/kernel.py:751
                                                       global_size=[1,1,1] if self.opts.has_local else None, local_size=[1,1,1] if self.opts.has_local else None)

                                          @dataclass                                                                                                                                                     # renderer/__init__.py:18
                                          class Program:
                                            def __post_init__(self):                                                                                                                                     # renderer/__init__.py:33
                                              if not self._ran_post_init and self.uops is not None:                                                                                                      # renderer/__init__.py:34
                                                for u in self.uops:                                                                                                                                      # renderer/__init__.py:36
                                                  if u.op is UOps.DEFINE_VAR: self.vars.append(u.arg)                                                                                                    # renderer/__init__.py:37
                                                  if u.op is UOps.DEFINE_GLOBAL: self.globals.append(u.arg)                                                                                              # renderer/__init__.py:38
                                                  if u.op is UOps.STORE: self.outs.extend([x.arg for x in u.src[0].sparents if x.op is UOps.DEFINE_GLOBAL])                                              # renderer/__init__.py:39
                                                  if u.op is UOps.SPECIAL:                                                                                                                               # renderer/__init__.py:40

                                                    @dataclass(frozen=True, eq=False)                                                                                                                    # codegen/uops.py:32
                                                    class UOp:
                                                      @property  # parents with self                                                                                                                     # codegen/uops.py:88
                                                      def sparents(self) -> Set[UOp]: return set([self]).union(self.parents)

                                                        @dataclass(frozen=True, eq=False)                                                                                                                # codegen/uops.py:32
                                                        class UOp:
                                                          @functools.cached_property                                                                                                                     # codegen/uops.py:86
                                                          def parents(self) -> Set[UOp]: return set.union(set(self.src), *[x.parents for x in self.src])

                                                self.vars = sorted(self.vars, key=lambda v: v.expr)                                                                                                      # renderer/__init__.py:49
                                                self.outs = sorted(dedup(self.outs))                                                                                                                     # renderer/__init__.py:50

                                                self._ran_post_init = True                                                                                                                               # renderer/__init__.py:51

                                  if getenv("FUZZ_UOPS"):                                                                                                                                                # engine/realize.py:157

                                  method_cache[ckey] = method_cache[bkey] = ret = CompiledRunner(replace(prg, dname=dname))                                                                              # engine/realize.py:160

                                    class CompiledRunner(Runner):                                                                                                                                        # engine/realize.py:78
                                      def __init__(self, p:Program, precompiled:Optional[bytes]=None):                                                                                                   # engine/realize.py:79
                                        if DEBUG >= 4: print(p.src)                                                                                                                                      # engine/realize.py:80

                                        self.p:Program = p                                                                                                                                               # engine/realize.py:81
                                        self.lib:bytes = precompiled if precompiled is not None else Device[p.dname].compiler.compile_cached(p.src)                                                      # engine/realize.py:82

                                          class Compiler:                                                                                                                                                # device.py:177
                                            def compile_cached(self, src:str) -> bytes:                                                                                                                  # device.py:180
                                              if self.cachekey is None or (lib := diskcache_get(self.cachekey, src)) is None:                                                                            # device.py:181

                                                def diskcache_get(table:str, key:Union[Dict, str, int]) -> Any:                                                                                          # helpers.py:221
                                                  if CACHELEVEL == 0: return None                                                                                                                        # helpers.py:222
                                                  if isinstance(key, (str,int)): key = {"key": key}                                                                                                      # helpers.py:223
                                                  conn = db_connection()                                                                                                                                 # helpers.py:224

                                                    def db_connection():                                                                                                                                 # helpers.py:207
                                                      if _db_connection is None:                                                                                                                         # helpers.py:209
                                                        os.makedirs(CACHEDB.rsplit(os.sep, 1)[0], exist_ok=True)                                                                                         # helpers.py:210
                                                        _db_connection = sqlite3.connect(CACHEDB, timeout=60, isolation_level="IMMEDIATE")                                                               # helpers.py:211
                                                        _db_connection.execute("PRAGMA journal_mode=WAL").fetchone()                                                                                     # helpers.py:212
                                                        if DEBUG >= 7: _db_connection.set_trace_callback(print)                                                                                          # helpers.py:213

                                                      return _db_connection                                                                                                                              # helpers.py:214

                                                  cur = conn.cursor()                                                                                                                                    # helpers.py:225
                                                  try:                                                                                                                                                   # helpers.py:226
                                                    res = cur.execute(f"SELECT val FROM '{table}_{VERSION}' WHERE {' AND '.join([f'{x}=?' for x in key.keys()])}", tuple(key.values()))                  # helpers.py:227
                                                  if (val:=res.fetchone()) is not None: return pickle.loads(val[0])                                                                                      # helpers.py:230
                                                  return None                                                                                                                                            # helpers.py:231

                                                assert not getenv("ASSERT_COMPILE"), f"tried to compile with ASSERT_COMPILE set\n{src}"                                                                  # device.py:182

                                                lib = self.compile(src)                                                                                                                                  # device.py:183

                                                  class ClangCompiler(Compiler):                                                                                                                         # runtime/ops_clang.py:6
                                                    def compile(self, src:str) -> bytes:                                                                                                                 # runtime/ops_clang.py:7
                                                      with tempfile.NamedTemporaryFile(delete=True) as output_file:                                                                                      # runtime/ops_clang.py:9
                                                        subprocess.check_output(['clang', '-include', 'tgmath.h', '-shared', '-march=native', '-O2', '-Wall', '-Werror', '-x', 'c', '-fPIC', '-',        # runtime/ops_clang.py:10
                                                                                 '-o', str(output_file.name)], input=src.encode('utf-8'))
                                                        return pathlib.Path(output_file.name).read_bytes()                                                                                               # runtime/ops_clang.py:12

                                                if self.cachekey is not None: diskcache_put(self.cachekey, src, lib)                                                                                     # device.py:184

                                                  def diskcache_put(table:str, key:Union[Dict, str, int], val:Any):                                                                                      # helpers.py:234
                                                    if CACHELEVEL == 0: return val                                                                                                                       # helpers.py:235
                                                    if isinstance(key, (str,int)): key = {"key": key}                                                                                                    # helpers.py:236
                                                    conn = db_connection()                                                                                                                               # helpers.py:237

                                                    cur = conn.cursor()                                                                                                                                  # helpers.py:238
                                                    if table not in _db_tables:                                                                                                                          # helpers.py:239
                                                      TYPES = {str: "text", bool: "integer", int: "integer", float: "numeric", bytes: "blob"}                                                            # helpers.py:240
                                                      ltypes = ', '.join(f"{k} {TYPES[type(key[k])]}" for k in key.keys())                                                                               # helpers.py:241
                                                      cur.execute(f"CREATE TABLE IF NOT EXISTS '{table}_{VERSION}' ({ltypes}, val blob, PRIMARY KEY ({', '.join(key.keys())}))")                         # helpers.py:242
                                                      _db_tables.add(table)                                                                                                                              # helpers.py:243
                                                    cur.execute(f"REPLACE INTO '{table}_{VERSION}' ({', '.join(key.keys())}, val) VALUES ({', '.join(['?']*len(key.keys()))}, ?)", tuple(key.values()) + (pickle.dumps(val), ))  # noqa: E501 # helpers.py:244
                                                    conn.commit()                                                                                                                                        # helpers.py:245
                                                    cur.close()                                                                                                                                          # helpers.py:246
                                                    return val                                                                                                                                           # helpers.py:247

                                              return lib                                                                                                                                                 # device.py:185

                                        self.clprg = Device[p.dname].runtime(p.function_name, self.lib)                                                                                                  # engine/realize.py:83

                                          @dataclass                                                                                                                                                     # renderer/__init__.py:18
                                          class Program:
                                            @functools.cached_property                                                                                                                                   # renderer/__init__.py:64
                                            def function_name(self) -> str: return to_function_name(self.name)

                                          class ClangProgram:                                                                                                                                            # runtime/ops_clang.py:14
                                            def __init__(self, name:str, lib:bytes):                                                                                                                     # runtime/ops_clang.py:15
                                              if DEBUG >= 6: cpu_objdump(lib)                                                                                                                            # runtime/ops_clang.py:16

                                              self.name, self.lib = name, lib                                                                                                                            # runtime/ops_clang.py:17
                                              with tempfile.NamedTemporaryFile(delete=True) as cached_file_path:                                                                                         # runtime/ops_clang.py:19
                                                pathlib.Path(cached_file_path.name).write_bytes(lib)                                                                                                     # runtime/ops_clang.py:20
                                                self.fxn = ctypes.CDLL(str(cached_file_path.name))[name]                                                                                                 # runtime/ops_clang.py:21

                                        super().__init__(p.name, p.dname, p.op_estimate, p.mem_estimate, p.lds_estimate)                                                                                 # engine/realize.py:84

                                          @dataclass                                                                                                                                                     # renderer/__init__.py:18
                                          class Program:
                                            @property                                                                                                                                                    # renderer/__init__.py:54
                                            def op_estimate(self) -> sint: return self._ops_lds[0]

                                              @dataclass                                                                                                                                                 # renderer/__init__.py:18
                                              class Program:
                                                @functools.cached_property                                                                                                                               # renderer/__init__.py:58
                                                def _ops_lds(self) -> Tuple[sint, sint]: return (0,0) if self.uops is None else flops_mem(self.uops, ignore_indexing=True)

                                                  def flops_mem(uops:List[UOp], ignore_indexing=False) -> Tuple[sint, sint]:                                                                             # codegen/uops.py:245
                                                    flops: sint = 0                                                                                                                                      # codegen/uops.py:246
                                                    mem: sint = 0                                                                                                                                        # codegen/uops.py:247
                                                    mults: sint = 1                                                                                                                                      # codegen/uops.py:248
                                                    mult_stack: List[sint] = []                                                                                                                          # codegen/uops.py:249
                                                    dont_count: Set[UOp] = set()                                                                                                                         # codegen/uops.py:250
                                                    if ignore_indexing:                                                                                                                                  # codegen/uops.py:251
                                                      for u in uops:                                                                                                                                     # codegen/uops.py:252
                                                        if u.op is UOps.LOAD:                                                                                                                            # codegen/uops.py:253
                                                        elif u.op is UOps.STORE:                                                                                                                         # codegen/uops.py:256
                                                        elif u.op is UOps.IF:                                                                                                                            # codegen/uops.py:259
                                                          dont_count = dont_count.union(u.src[1].sparents)                                                                                               # codegen/uops.py:257

                                                          if len(u.src) > 3: dont_count = dont_count.union(u.src[3].sparents)                                                                            # codegen/uops.py:258
                                                        elif u.op is UOps.IF:                                                                                                                      # OLD # codegen/uops.py:259
                                                    for u in uops:                                                                                                                                       # codegen/uops.py:261
                                                      if u.op is UOps.RANGE:                                                                                                                             # codegen/uops.py:262
                                                      elif u.op is UOps.ENDRANGE:                                                                                                                        # codegen/uops.py:265
                                                      elif u.op is UOps.SPECIAL:                                                                                                                         # codegen/uops.py:267
                                                      elif u.op is UOps.LOAD:                                                                                                                            # codegen/uops.py:269
                                                      elif u.op is UOps.STORE:                                                                                                                           # codegen/uops.py:272
                                                      elif u.op is UOps.ALU and u not in dont_count:                                                                                                     # codegen/uops.py:275
                                                      elif u.op is UOps.WMMA and u not in dont_count:                                                                                                    # codegen/uops.py:278
                                                        mult_stack.append(mults)                                                                                                                         # codegen/uops.py:263
                                                        mults *= uop_alu_resolve(u.src[1] - u.src[0])                                                                                                    # codegen/uops.py:264

                                                          def uop_alu_resolve(u:UOp) -> sint:                                                                                                            # codegen/uops.py:235
                                                            if u.op in {UOps.CONST, UOps.DEFINE_VAR}: return u.arg                                                                                       # codegen/uops.py:236
                                                            if u.op is UOps.ALU: return exec_alu(u.arg, cast(DType,u.dtype), tuple(map(uop_alu_resolve, u.src)))                                         # codegen/uops.py:237

                                                      elif u.op is UOps.ENDRANGE:                                                                                                                  # OLD # codegen/uops.py:265
                                                      elif u.op is UOps.SPECIAL:                                                                                                                   # OLD # codegen/uops.py:267
                                                      elif u.op is UOps.LOAD:                                                                                                                      # OLD # codegen/uops.py:269
                                                      elif u.op is UOps.STORE:                                                                                                                     # OLD # codegen/uops.py:272
                                                      elif u.op is UOps.ALU and u not in dont_count:                                                                                               # OLD # codegen/uops.py:275
                                                        assert u.dtype is not None                                                                                                                       # codegen/uops.py:276
                                                        flops += (mults * (2 if u.arg == TernaryOps.MULACC else 1)) * u.dtype.count                                                                      # codegen/uops.py:277
                                                        assert u.src[2].dtype is not None                                                                                                                # codegen/uops.py:273
                                                        mem += u.src[2].dtype.itemsize * mults                                                                                                           # codegen/uops.py:274
                                                        mults = mult_stack.pop(-1)                                                                                                                       # codegen/uops.py:266
                                                      elif u.op is UOps.SPECIAL:                                                                                                                   # OLD # codegen/uops.py:267
                                                      elif u.op is UOps.LOAD:                                                                                                                      # OLD # codegen/uops.py:269
                                                      elif u.op is UOps.STORE:                                                                                                                     # OLD # codegen/uops.py:272
                                                      elif u.op is UOps.ALU and u not in dont_count:                                                                                               # OLD # codegen/uops.py:275
                                                      elif u.op is UOps.WMMA and u not in dont_count:                                                                                              # OLD # codegen/uops.py:278
                                                        assert u.dtype is not None                                                                                                                 # OLD # codegen/uops.py:276
                                                        flops += (mults * (2 if u.arg == TernaryOps.MULACC else 1)) * u.dtype.count                                                                # OLD # codegen/uops.py:277
                                                        assert u.src[2].dtype is not None                                                                                                          # OLD # codegen/uops.py:273
                                                        mem += u.src[2].dtype.itemsize * mults                                                                                                     # OLD # codegen/uops.py:274
                                                    return flops, mem                                                                                                                                    # codegen/uops.py:281

                                          @dataclass                                                                                                                                                     # renderer/__init__.py:18
                                          class Program:
                                            @property                                                                                                                                                    # renderer/__init__.py:56
                                            def lds_estimate(self) -> sint: return self._ops_lds[1]

                                return ret                                                                                                                                                               # engine/realize.py:161

                            return ExecItem(runner, [si.bufs[x] for x in runner.p.globals], si.metadata)                                                                                                 # engine/realize.py:191

                        class CompiledRunner(Runner):                                                                                                                                                    # engine/realize.py:78
                          def __call__(self, rawbufs:List[Buffer], var_vals:Dict[Variable, int], wait=False) -> Optional[float]:                                                                         # engine/realize.py:88
                            global_size, local_size = self.p.launch_dims(var_vals)                                                                                                                       # engine/realize.py:89

                              @dataclass                                                                                                                                                                 # renderer/__init__.py:18
                              class Program:
                                def launch_dims(self, var_vals:Dict[Variable, int]):                                                                                                                     # renderer/__init__.py:66
                                  global_size = [sym_infer(sz, var_vals) for sz in self.global_size] if self.global_size is not None else None                                                           # renderer/__init__.py:67
                                  local_size = [sym_infer(sz, var_vals) for sz in self.local_size] if self.local_size is not None else None                                                              # renderer/__init__.py:68
                                  return global_size, local_size                                                                                                                                         # renderer/__init__.py:69

                            if global_size is not None and local_size is None and all_int(self.p.global_size): # type: ignore[arg-type]                                                                  # engine/realize.py:90
                            lra = {}                                                                                                                                                                     # engine/realize.py:96
                            if global_size:                                                                                                                                                              # engine/realize.py:97
                            if local_size:                                                                                                                                                               # engine/realize.py:100
                            return self.clprg(*[x._buf for x in rawbufs], **lra, vals=tuple(var_vals[k] for k in self.p.vars), wait=wait)                                                                # engine/realize.py:103

                              class ClangProgram:                                                                                                                                                        # runtime/ops_clang.py:14
                                def __call__(self, *bufs, vals=(), wait=False): return cpu_time_execution(lambda: self.fxn(*bufs, *vals), enable=wait)                                                   # runtime/ops_clang.py:23

                                  def cpu_time_execution(cb, enable):                                                                                                                                    # helpers.py:279
                                    if enable: st = time.perf_counter()                                                                                                                                  # helpers.py:280
                                    cb()                                                                                                                                                                 # helpers.py:281

                                    if enable: return time.perf_counter()-st                                                                                                                             # helpers.py:282

                          if isinstance(tokens, Variable):                                                                                                                                               # test.py:87
                            seqlen = tokens.shape[1]                                                                                                                                                     # test.py:91

                            tok_emb = self.wte(tokens)                                                                                                                                                   # test.py:92

                              class Embedding:                                                                                                                                                           # nn/__init__.py:302
                                def __call__(self, idx:Tensor) -> Tensor:                                                                                                                                # nn/__init__.py:316
                                  if idx.numel() == 0: return Tensor.empty(idx.shape+(self.embed_sz,), device=self.weight.device)                                                                        # nn/__init__.py:317

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def numel(self) -> sint: return prod(self.shape)                                                                                                                       # tensor.py:2956

                                  arange_shp, weight_shp, big_shp = (1, 1, self.vocab_sz, 1), (1, 1, self.vocab_sz, self.embed_sz), idx.shape+(self.vocab_sz, self.embed_sz,)                            # nn/__init__.py:318

                                  if not hasattr(self, 'arange'): self.arange = Tensor.arange(self.vocab_sz, requires_grad=False, device=self.weight.device).reshape(arange_shp)                         # nn/__init__.py:319

                                class LazyBuffer:                                                                                                                                                        # lazy.py:26
                                  def r(self, op:ReduceOps, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                                         # lazy.py:176
                                    new_shape = reduce_st(self.st, axis)                                                                                                                           # OLD # lazy.py:177
                                    if 0 in self.shape and 0 not in new_shape: return self.const({ReduceOps.SUM: 0.0, ReduceOps.MAX: dtypes.min(self.dtype)}[op], new_shape)                       # OLD # lazy.py:179
                                    if self.is_unrealized_unmasked_const() and all_int(self.shape):                                                                                                # OLD # lazy.py:183
                                    if not SPLIT_REDUCEOP or not all_int(self.shape) or (0 in self.shape) or \                                                                                     # OLD # lazy.py:187
                                      prod(self.shape) // prod(new_shape) < getenv("REDUCEOP_SPLIT_THRESHOLD", 32768):
                                      return self._reduce_op(op, axis)                                                                                                                             # OLD # lazy.py:189
                                    self_real_strides = self.st.real_strides(ignore_valid=True)                                                                                                          # lazy.py:196

                                    split_candidates = [(i, x) for i in axis for x in range(min(256,2**getenv("REDUCEOP_SPLIT_SIZE",22)//prod(new_shape)),8-1,-1)                                        # lazy.py:197
                                                        if self.shape[i] % x == 0 and self_real_strides[i] != 0]

                                    if not split_candidates: return self._reduce_op(op, axis)                                                                                                            # lazy.py:199

                                  arange, idx, vals = self.arange.expand(big_shp), idx.reshape(idx.shape+(1, 1,)).expand(big_shp), self.weight.reshape(weight_shp).expand(big_shp)                       # nn/__init__.py:320

                                  return (arange == idx).mul(vals).sum(2)                                                                                                                                # nn/__init__.py:321

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def __eq__(self, x) -> Tensor: return (self!=x).logical_not()             # type: ignore[override]                                                                     # tensor.py:2777

                                  class Tensor:                                                                                                                                                          # tensor.py:92
                                    def __ne__(self, x) -> Tensor: return F.Neq.apply(*self._broadcasted(x))  # type: ignore[override]                                                                   # tensor.py:2776

                                    class Neq(Function):                                                                                                                                                 # function.py:102
                                      def forward(self, x:LazyBuffer, y:LazyBuffer) -> LazyBuffer: return x.e(BinaryOps.CMPNE, y)                                                                        # function.py:103

                                  class Tensor:                                                                                                                                                          # tensor.py:92
                                    def logical_not(self):                                                                                                                                               # tensor.py:1975
                                      return F.Neq.apply(*self.cast(dtypes.bool)._broadcasted(True))                                                                                                     # tensor.py:1983

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def _broadcasted(self, y:Union[Tensor, Node, ConstType], reverse:bool=False, match_dtype:bool=True) -> Tuple[Tensor, Tensor]:                                      # tensor.py:2464
                                        x: Tensor = self                                                                                                                                           # OLD # tensor.py:2465
                                        if not isinstance(y, Tensor):                                                                                                                              # OLD # tensor.py:2466
                                          assert isinstance(y, (*get_args(ConstType), Node)), f"{type(y)=}, {y=}"                                                                                  # OLD # tensor.py:2468
                                          if isinstance(x.dtype, ImageDType) or dtypes.is_float(x.dtype) or (dtypes.is_int(x.dtype) and isinstance(y, int)): y_dtype = x.dtype                     # OLD # tensor.py:2469
                                          elif not isinstance(y, Node): y_dtype = dtypes.from_py(y)                                                                                                      # tensor.py:2470

                                            class dtypes:                                                                                                                                                # dtype.py:38
                                              @staticmethod                                                                                                                                              # dtype.py:46
                                              def from_py(x) -> DType:
                                                if x.__class__ is float: return dtypes.default_float                                                                                               # OLD # dtype.py:47
                                                if x.__class__ is int: return dtypes.default_int                                                                                                         # dtype.py:48
                                                if x.__class__ is bool: return dtypes.bool                                                                                                               # dtype.py:49

                                class Tensor:                                                                                                                                                            # tensor.py:92
                                  def _broadcasted(self, y:Union[Tensor, Node, ConstType], reverse:bool=False, match_dtype:bool=True) -> Tuple[Tensor, Tensor]:                                          # tensor.py:2464
                                    x: Tensor = self                                                                                                                                               # OLD # tensor.py:2465
                                    if not isinstance(y, Tensor):                                                                                                                                  # OLD # tensor.py:2466
                                      assert isinstance(y, (*get_args(ConstType), Node)), f"{type(y)=}, {y=}"                                                                                      # OLD # tensor.py:2468
                                      if isinstance(x.dtype, ImageDType) or dtypes.is_float(x.dtype) or (dtypes.is_int(x.dtype) and isinstance(y, int)): y_dtype = x.dtype                         # OLD # tensor.py:2469
                                      if isinstance(y, Node): y = Tensor.from_node(y, device=x.device)                                                                                             # OLD # tensor.py:2471
                                      else: y = Tensor(dtypes.as_const(y, y_dtype), x.device, y_dtype, requires_grad=False)                                                                        # OLD # tensor.py:2472
                                    if match_dtype and x.dtype != y.dtype:                                                                                                                         # OLD # tensor.py:2474
                                      output_dtype = least_upper_dtype(x.dtype, y.dtype)                                                                                                                 # tensor.py:2475

                                      x, y = x.cast(output_dtype), y.cast(output_dtype)                                                                                                                  # tensor.py:2476

                                  class LazyBuffer:                                                                                                                                                      # lazy.py:26
                                    def cast(self, dtype:DType, bitcast:bool=False, allow_buffer_view=True) -> LazyBuffer:                                                                               # lazy.py:95
                                      if self.dtype == dtype: return self                                                                                                                          # OLD # lazy.py:96
                                      if self.device.startswith("DISK") and not bitcast: raise RuntimeError("attempted to cast disk buffer (bitcast only)")                                        # OLD # lazy.py:97
                                      if self.is_unrealized_unmasked_const() and not bitcast:                                                                                                      # OLD # lazy.py:98
                                      new_shape = self.shape                                                                                                                                       # OLD # lazy.py:100
                                      if bitcast and self.dtype.itemsize != dtype.itemsize:                                                                                                        # OLD # lazy.py:101
                                        if not self.device.startswith("DISK"): raise RuntimeError("shape changing bitcast only supported on DISK right now")                                       # OLD # lazy.py:102
                                        if not all_int(new_shape): raise RuntimeError("shape changing bitcast with symbolic shape isn't supported yet")                                            # OLD # lazy.py:103
                                        if not (new_shape[-1]*self.dtype.itemsize) % dtype.itemsize == 0: raise RuntimeError("unsupported size in bitcast")                                        # OLD # lazy.py:105
                                        new_shape = new_shape[:-1] + ((new_shape[-1]*self.dtype.itemsize) // dtype.itemsize,)                                                                      # OLD # lazy.py:106
                                      elif getenv("CAST_BEFORE_VIEW", 1) and dtype.itemsize <= self.dtype.itemsize and self != self.base:                                                                # lazy.py:107

                                def sum_acc_dtype(dt:DType):                                                                                                                                             # dtype.py:122
                                  if dtypes.is_unsigned(dt): return least_upper_dtype(dt, dtypes.uint)                                                                                             # OLD # dtype.py:124
                                  if dtypes.is_int(dt) or dt == dtypes.bool: return least_upper_dtype(dt, dtypes.int)                                                                              # OLD # dtype.py:125
                                  return least_upper_dtype(dt, dtypes.float)                                                                                                                             # dtype.py:126

                                class LazyBuffer:                                                                                                                                                        # lazy.py:26
                                  def r(self, op:ReduceOps, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                                         # lazy.py:176
                                    new_shape = reduce_st(self.st, axis)                                                                                                                           # OLD # lazy.py:177
                                    if 0 in self.shape and 0 not in new_shape: return self.const({ReduceOps.SUM: 0.0, ReduceOps.MAX: dtypes.min(self.dtype)}[op], new_shape)                       # OLD # lazy.py:179
                                    if self.is_unrealized_unmasked_const() and all_int(self.shape):                                                                                                # OLD # lazy.py:183
                                    if not SPLIT_REDUCEOP or not all_int(self.shape) or (0 in self.shape) or \                                                                                     # OLD # lazy.py:187
                                      prod(self.shape) // prod(new_shape) < getenv("REDUCEOP_SPLIT_THRESHOLD", 32768):
                                      return self._reduce_op(op, axis)                                                                                                                             # OLD # lazy.py:189
                                    self_real_strides = self.st.real_strides(ignore_valid=True)                                                                                                    # OLD # lazy.py:196
                                    split_candidates = [(i, x) for i in axis for x in range(min(256,2**getenv("REDUCEOP_SPLIT_SIZE",22)//prod(new_shape)),8-1,-1)                                  # OLD # lazy.py:197
                                                        if self.shape[i] % x == 0 and self_real_strides[i] != 0]
                                    if not split_candidates: return self._reduce_op(op, axis)                                                                                                      # OLD # lazy.py:199
                                    dim_to_split, divisor = split_candidates[0]                                                                                                                          # lazy.py:200
                                    splitted_shape = self.shape[:dim_to_split] + (divisor,) + (self.shape[dim_to_split]//divisor,) + self.shape[dim_to_split+1:]                                         # lazy.py:201
                                    splitted = self.reshape(splitted_shape).permute(tuple([x for x in range(len(splitted_shape)) if x != dim_to_split]+[dim_to_split]))                                  # lazy.py:202

                                    if DEBUG >= 3: print(f"split {divisor}: {self.shape} -> {splitted.shape} -> {new_shape}")                                                                            # lazy.py:203

                                    return splitted._reduce_op(op, axis)._reduce_op(op, (len(new_shape),)).reshape(new_shape)  # reduce original axes, then split                                        # lazy.py:204

                          pos_emb = self.wpe(self.allpos.shrink((None, (start_pos, start_pos+seqlen))))                                                                                                  # test.py:94

                        class Variable(Node):                                                                                                                                                            # shape/symbolic.py:110
                          @property                                                                                                                                                                      # shape/symbolic.py:123
                          def val(self):
                            assert self._val is not None, f"Variable isn't bound, can't access val of {self}"                                                                                            # shape/symbolic.py:124
                            return self._val                                                                                                                                                             # shape/symbolic.py:125

                        class Node:                                                                                                                                                                      # shape/symbolic.py:10
                          def __rsub__(self, b:int): return -self+b                                                                                                                                      # shape/symbolic.py:36

                          class NumNode(Node):                                                                                                                                                           # shape/symbolic.py:136
                            def __mul__(self, b:Union[Node,int]): return NumNode(self.b*b) if isinstance(b, int) else b*self.b                                                                           # shape/symbolic.py:144

                        class Node:                                                                                                                                                                      # shape/symbolic.py:10
                          def __le__(self, b:Union[Node,int]): return self < (b+1)                                                                                                                       # shape/symbolic.py:37

                          class LtNode(OpNode):                                                                                                                                                          # shape/symbolic.py:189
                            def get_bounds(self) -> Tuple[int, int]:                                                                                                                                     # shape/symbolic.py:190
                              if self.a == self.b: return (0, 0)                                                                                                                                   # OLD # shape/symbolic.py:191
                              if isinstance(self.b, int): return (1, 1) if self.a.max < self.b else (0, 0) if self.a.min >= self.b else (0, 1)                                                     # OLD # shape/symbolic.py:192
                              return (1, 1) if self.a.max < self.b.min else (0, 0) if self.a.min >= self.b.max else (0, 1)                                                                               # shape/symbolic.py:193

                        class Node:                                                                                                                                                                      # shape/symbolic.py:10
                          def __rmul__(self, b:int): return self*b                                                                                                                                       # shape/symbolic.py:45

                        class Node:                                                                                                                                                                      # shape/symbolic.py:10
                          def __radd__(self, b:int): return self+b                                                                                                                                       # shape/symbolic.py:34

                          h = tok_emb + pos_emb                                                                                                                                                          # test.py:95

                          if HALF: h = h.half()                                                                                                                                                          # test.py:97
                          mask = Tensor.full((1, 1, seqlen, start_pos.val+seqlen), float("-inf"), dtype=h.dtype).triu(start_pos.val+1) if seqlen > 1 else None                                           # test.py:99

                        class Tensor:                                                                                                                                                                    # tensor.py:92
                          def triu(self, diagonal:int=0) -> Tensor:                                                                                                                                      # tensor.py:1900
                            return Tensor._tri(self.shape[-2], self.shape[-1], diagonal=diagonal, device=self.device, dtype=dtypes.bool).where(self, 0).cast(self.dtype)                                 # tensor.py:1921

                          class Tensor:                                                                                                                                                                  # tensor.py:92
                            @staticmethod                                                                                                                                                                # tensor.py:1891
                            def _tri(r:sint, c:sint, diagonal:int=0, **kwargs) -> Tensor:
                              assert isinstance(r, int) and isinstance(c, int), f"does not support symbolic, getting {r=}, {c=}"                                                                         # tensor.py:1892
                              if r == 0 or c == 0 or diagonal >= c: return Tensor.zeros(r,c,**kwargs)                                                                                                    # tensor.py:1893
                              if r+diagonal <= 0: return Tensor.ones(r,c,**kwargs)                                                                                                                       # tensor.py:1894
                              s = r+c-1                                                                                                                                                                  # tensor.py:1895
                              t = Tensor.ones(s,s,**kwargs).pad((None,(0,s))).flatten().shrink(((0,s*(2*s-1)),)).reshape(s,-1).shrink((None,(0,s)))                                                      # tensor.py:1897

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def flatten(self, start_dim=0, end_dim=-1):                                                                                                                                # tensor.py:1268
                                start_dim, end_dim = self._resolve_dim(start_dim), self._resolve_dim(end_dim)                                                                                            # tensor.py:1281

                                return self.reshape(self.shape[:start_dim] + (prod(self.shape[start_dim:end_dim+1]), ) + self.shape[end_dim+1:])                                                         # tensor.py:1282

                              return t[:r,-diagonal:c-diagonal] if diagonal <= 0 else t[diagonal:r+diagonal,:c]                                                                                          # tensor.py:1898

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              # Supported Indexing Implementations:                                                                                                                                      # tensor.py:926
                              #   1. Int indexing (no copy)
                              #     - for all dims where there's int, shrink -> reshape
                              #     - negative indices are taken relative to the end of the sequence, so X[-2] returns the 2nd-to-last element
                              #     - X = Tensor.rand(4,5,9); X[2,-2] shrinks the Tensor to X.shrink(((2, 3), (3, 4), (0, 9))) -> X.shape=(1,1,9)
                              #     - Then we reshape (collapse) the int dim away such that for X: (1,1,9) -> (9,)
                              #   2. Slice indexing (no copy)
                              #     - for all dims where slice is start:end:stride, shrink -> Optional[flip] -> pad -> reshape -> shrink
                              #     - first shrink the Tensor to X.shrink(((start, end),))
                              #     - then we apply stride through Optional[flip] -> pad -> reshape -> shrink
                              #       - flip where dim value is negative
                              #       - pad on dims to be multiple of strides, such that reshaping [dim_size_padded] -> [dim_size_padded // stride, stride] is possible
                              #       - shrink [dim_size_padded // stride, stride] -> [dim_size_padded // stride, 1]
                              #       - reshape [dim_size_padded // stride, 1] -> [dim_size_padded // stride] and now you have your stride
                              #   3. None indexing (no copy)
                              #     - reshape (inject) a dim at the dim where there's None
                              #   4. Tensor indexing (copy)
                              #     - use Tensor.arange == tensor_index to create masks for dims with Tensors (adds a dim for each mask)
                              #     - combine masks together with mul
                              #     - apply mask to self by mask * self
                              #     - sum reduce away the extra dims added from creating masks
                              # Tiny Things:
                              #   1. Supported indices: Union[int, slice, Tensor, None, List, Tuple, Ellipsis]
                              #     - for any list, List[Union[List, Tuple, int]], must have homogeneous shape
                              #     - for any tuple, Tuple[Union[List, Tuple, int]], must have homogeneous shape
                              #   2. Bool indexing is not supported
                              #   3. Out of bounds Tensor indexing results in 0
                              #     - e.g: Tensor([1, 2, 3])[Tensor([4, 3, 2])] -> [0, 0, 3] index 4 and 3 are out of bounds
                              def __getitem__(self, indices) -> Tensor:
                                if isinstance(indices, list) and all_int(indices): indices = [Tensor(indices, self.device, requires_grad=False)]                                                   # OLD # tensor.py:929
                                elif isinstance(indices, (tuple, list)):                                                                                                                           # OLD # tensor.py:930
                                  indices = [Tensor(i, self.device, requires_grad=False) if isinstance(i, (tuple, list)) else i for i in indices]                                                        # tensor.py:931

                          class Tensor:                                                                                                                                                                  # tensor.py:92
                            def where(self:Tensor, x:Union[Tensor, ConstType], y:Union[Tensor, ConstType]):                                                                                              # tensor.py:2708
                              if isinstance(x, Tensor): x, y = x._broadcasted(y)                                                                                                                         # tensor.py:2726

                              cond, x = self._broadcasted(x, match_dtype=False)                                                                                                                          # tensor.py:2728

                              cond, y = cond._broadcasted(y, match_dtype=False)                                                                                                                          # tensor.py:2729

                              return F.Where.apply(cond.cast(dtypes.bool), *x._broadcasted(y))                                                                                                           # tensor.py:2730

                            class Where(Function):                                                                                                                                                       # function.py:145
                              def forward(self, x:LazyBuffer, y:LazyBuffer, z:LazyBuffer) -> LazyBuffer:                                                                                                 # function.py:146
                                self.x = x                                                                                                                                                               # function.py:147
                                return self.x.e(TernaryOps.WHERE, y, z)                                                                                                                                  # function.py:148

                          for hi in self.h: h = hi(h, start_pos, mask)                                                                                                                                   # test.py:101

                            class TransformerBlock:                                                                                                                                                      # test.py:64
                              def __call__(self, x:Tensor, start_pos:Variable, mask:Optional[Tensor]):                                                                                                   # test.py:71
                                h = x + self.attn(self.ln_1(x), start_pos, mask).float()                                                                                                                 # test.py:72

                                  class LayerNorm:                                                                                                                                                       # nn/__init__.py:234
                                    def __call__(self, x:Tensor):                                                                                                                                        # nn/__init__.py:256
                                      assert self.normalized_shape == x.shape[-len(self.normalized_shape):], f"last dimensions of {x.shape} must match {self.normalized_shape}"                          # nn/__init__.py:257

                                      x = x.layernorm(eps=self.eps, axis=self.axis)                                                                                                                      # nn/__init__.py:258

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def layernorm(self, axis=-1, eps:float=1e-5) -> Tensor:                                                                                                            # tensor.py:2808
                                        y = (self - self.mean(axis, keepdim=True))                                                                                                                       # tensor.py:2824

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def mean(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):                                                                                    # tensor.py:1429
                                          output_dtype = self.dtype if dtypes.is_float(self.dtype) else dtypes.float32                                                                                   # tensor.py:1451

                                          numerator = self.cast(sum_acc_dtype(self.dtype)).sum(axis=axis, keepdim=keepdim)                                                                               # tensor.py:1452

                                          return numerator.div(prod([si for si, so in zip(self.shape, self.sum(axis=axis, keepdim=True).shape) if si != so])).cast(output_dtype)                         # tensor.py:1453

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def div(self, x:Union[Tensor, ConstType], reverse=False, upcast=True) -> Tensor:                                                                               # tensor.py:2549
                                            numerator, denominator = self._broadcasted(x, reverse)                                                                                                       # tensor.py:2571

                                            if upcast: numerator, denominator = numerator.cast(least_upper_float(numerator.dtype)), denominator.cast(least_upper_float(denominator.dtype))               # tensor.py:2572

                                              def least_upper_float(dt:DType) -> DType: return dt if dtypes.is_float(dt) else least_upper_dtype(dt, dtypes.float32)                                      # dtype.py:115

                                            return F.Div.apply(numerator, denominator)                                                                                                                   # tensor.py:2573

                                          class Div(Function):                                                                                                                                           # function.py:134
                                            def forward(self, x:LazyBuffer, y:LazyBuffer) -> LazyBuffer:                                                                                                 # function.py:135
                                              self.x, self.y = x, y                                                                                                                                      # function.py:136
                                              return x.e(BinaryOps.MUL, y.e(UnaryOps.RECIP)) if not dtypes.is_int(x.dtype) else x.e(BinaryOps.IDIV, y)                                                   # function.py:137

                                                class LazyBuffer:                                                                                                                                        # lazy.py:26
                                                  def e(self, op:Union[MetaOps, UnaryOps, BinaryOps, TernaryOps], *in_srcs:LazyBuffer, arg:Optional[Any]=None) -> LazyBuffer:                            # lazy.py:137
                                                    srcs: List[LazyBuffer] = []                                                                                                                    # OLD # lazy.py:138
                                                    for s in (self,)+in_srcs:                                                                                                                      # OLD # lazy.py:139
                                                      if s == s.base and s.base.contiguous_child and (root:=s.base.contiguous_child[0]()) is not None:                                             # OLD # lazy.py:140
                                                        srcs.append(s)                                                                                                                             # OLD # lazy.py:143
                                                    assert all_same(dts:=[x.dtype.scalar() for x in (srcs[1:] if op is TernaryOps.WHERE else srcs)]), f"all dtypes must match {dts} on {op}"       # OLD # lazy.py:144
                                                    assert all_same([x.shape for x in srcs]), f"all shapes must be the same {[x.shape for x in srcs]}"                                             # OLD # lazy.py:145
                                                    if op is TernaryOps.WHERE: assert srcs[0].dtype == dtypes.bool, "TernaryOps.WHERE must have the first arg be bool"                             # OLD # lazy.py:146
                                                    if op is UnaryOps.NEG: assert srcs[0].dtype != dtypes.bool, "UnaryOps.NEG does not accept dtype bool"                                          # OLD # lazy.py:147
                                                    out_dtype = dtypes.bool if op in (BinaryOps.CMPLT, BinaryOps.CMPNE) else srcs[-1].dtype                                                        # OLD # lazy.py:149
                                                    if op in python_alu and all(s.is_unrealized_unmasked_const() for s in srcs):                                                                   # OLD # lazy.py:152
                                                      return self.cast(out_dtype).const(exec_alu(op, out_dtype, [s.base.arg for s in srcs]))                                                             # lazy.py:153

                                                        class LazyBuffer:                                                                                                                                # lazy.py:26
                                                          def const(self, val:ConstType, shape:Optional[Tuple[sint,...]]=None) -> LazyBuffer:                                                            # lazy.py:74
                                                            assert isinstance(val, get_args(ConstType)), f"{val=} has {type(val)=}, not a ConstType"                                                     # lazy.py:75
                                                            shape = self.shape if shape is None else shape                                                                                               # lazy.py:76
                                                            return LazyBuffer.metaop(MetaOps.CONST, tuple(), self.dtype, self.device, arg=val).reshape((1,)*len(shape)).expand(shape)                    # lazy.py:77

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __sub__(self, x) -> Tensor: return self.sub(x)                                                                                                               # tensor.py:2739

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def sub(self, x:Union[Tensor, ConstType], reverse=False) -> Tensor:                                                                                            # tensor.py:2508
                                            a, b = self._broadcasted(x, reverse)                                                                                                                         # tensor.py:2526

                                            return a + (-b)                                                                                                                                              # tensor.py:2527

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def __neg__(self) -> Tensor: return self.neg()                                                                                                               # tensor.py:2736

                                            class Tensor:                                                                                                                                                # tensor.py:92
                                              def neg(self):                                                                                                                                             # tensor.py:1984
                                                return F.Neg.apply(self) if self.dtype != dtypes.bool else self.logical_not()                                                                            # tensor.py:1992

                                              class Neg(Function):                                                                                                                                       # function.py:28
                                                def forward(self, x:LazyBuffer) -> LazyBuffer: return x.e(UnaryOps.NEG)                                                                                  # function.py:29

                                        return y.mul((y*y).mean(axis, keepdim=True).add(eps).rsqrt())                                                                                                    # tensor.py:2825

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __mul__(self, x) -> Tensor: return self.mul(x)                                                                                                               # tensor.py:2740

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def rsqrt(self):                                                                                                                                                 # tensor.py:2078
                                          return self.reciprocal().sqrt()                                                                                                                                # tensor.py:2086

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def reciprocal(self):                                                                                                                                          # tensor.py:2204
                                            return F.Reciprocal.apply(self.cast(least_upper_float(self.dtype)))                                                                                          # tensor.py:2212

                                          class Reciprocal(Function):                                                                                                                                    # function.py:32
                                            def forward(self, x:LazyBuffer) -> LazyBuffer:                                                                                                               # function.py:33
                                              self.ret = x.e(UnaryOps.RECIP)                                                                                                                             # function.py:34

                                              return self.ret                                                                                                                                            # function.py:35

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def sqrt(self):                                                                                                                                                # tensor.py:2069
                                            return F.Sqrt.apply(self.cast(least_upper_float(self.dtype)))                                                                                                # tensor.py:2077

                                          class Sqrt(Function):                                                                                                                                          # function.py:70
                                            def forward(self, x:LazyBuffer) -> LazyBuffer:                                                                                                               # function.py:71
                                              self.ret = x.e(UnaryOps.SQRT)                                                                                                                              # function.py:72

                                              return self.ret                                                                                                                                            # function.py:73

                                      if not self.elementwise_affine: return x                                                                                                                           # nn/__init__.py:259
                                      return x * self.weight + self.bias                                                                                                                                 # nn/__init__.py:260

                                  class Attention:                                                                                                                                                       # test.py:21
                                    def __call__(self, x:Tensor, start_pos:Variable, mask:Optional[Tensor]) -> Tensor:                                                                                   # test.py:29
                                      if mask is not None or start_pos.val == 0:                                                                                                                         # test.py:30
                                        start_pos = start_pos.val                                                                                                                                        # test.py:32

                                      if HALF: x = x.half()                                                                                                                                              # test.py:34
                                      xqkv = self.c_attn(x)                                                                                                                                              # test.py:35

                                        class Linear:                                                                                                                                                    # nn/__init__.py:152
                                          def __call__(self, x:Tensor):                                                                                                                                  # nn/__init__.py:173
                                            return x.linear(self.weight.transpose(), self.bias)                                                                                                          # nn/__init__.py:174

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def linear(self, weight:Tensor, bias:Optional[Tensor]=None):                                                                                                 # tensor.py:2781
                                              x = self.mul(weight) if len(weight.shape) == 1 else self.dot(weight)                                                                                       # tensor.py:2794

                                            class Tensor:                                                                                                                                                # tensor.py:92
                                              def dot(self, w:Tensor, acc_dtype:Optional[DTypeLike]=None) -> Tensor:                                                                                     # tensor.py:1825
                                                n1, n2 = len(self.shape), len(w.shape)                                                                                                                   # tensor.py:1837

                                                assert n1 != 0 and n2 != 0, f"both arguments to matmul need to be at least 1D, but they are {n1}D and {n2}D"                                             # tensor.py:1838
                                                assert (L:=self.shape[-1]) == (R:=w.shape[-min(n2, 2)]), f"Input Tensor shapes {self.shape} and {w.shape} cannot be multiplied ({L} != {R})"             # tensor.py:1839

                                                x = self.reshape(*self.shape[0:-1], *[1]*min(n1-1, n2-1, 1), self.shape[-1])                                                                             # tensor.py:1840

                                                w = w.reshape(*w.shape[0:-2], *[1]*min(n1-1, n2-1, 1), *w.shape[-min(n2, 2):]).transpose(-1, -min(n2, 2))                                                # tensor.py:1841

                                                return (x*w).sum(-1, acc_dtype=acc_dtype).cast(least_upper_dtype(x.dtype, w.dtype) if acc_dtype is None else acc_dtype)                                  # tensor.py:1842

                                              return x.add(bias) if bias is not None else x                                                                                                              # tensor.py:2795

                                      xq, xk, xv = [xqkv.shrink((None, None, (i*self.dim, (i+1)*self.dim))).reshape(None, None, self.n_heads, self.head_dim) for i in range(3)]                          # test.py:36

                                      bsz, seqlen, _, _ = xq.shape                                                                                                                                       # test.py:37

                                      if not hasattr(self, "cache_kv"):                                                                                                                                  # test.py:40
                                        self.cache_kv = Tensor.zeros(2, bsz, MAX_CONTEXT, self.n_heads, self.head_dim, dtype=x.dtype).contiguous().realize()                                             # test.py:41

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def contiguous(self):                                                                                                                                              # tensor.py:1993
                                        return F.Contiguous.apply(self)                                                                                                                                  # tensor.py:1997

                                      class Contiguous(Function):                                                                                                                                        # function.py:11
                                        def forward(self, x:LazyBuffer) -> LazyBuffer: return x.contiguous()                                                                                             # function.py:12

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def contiguous(self, allow_buffer_view=True):                                                                                                                # lazy.py:87
                                              if not self.st.contiguous or self.size != self.base.size or self.is_unrealized_const():                                                                    # lazy.py:88

                                                ret = self.e(MetaOps.VIEW) if allow_buffer_view and self.can_view() else self.e(MetaOps.CONTIGUOUS)                                                      # lazy.py:89

                                                if (sti := self.st.invert(self.base.shape)) is not None: self.base.contiguous_child = ref(ret), sti                                                      # lazy.py:90

                                                  @dataclass(frozen=True)                                                                                                                                # shape/shapetracker.py:10
                                                  class ShapeTracker:
                                                    def invert(self, out_shape:Tuple[sint, ...]) -> Optional[ShapeTracker]:                                                                              # shape/shapetracker.py:18
                                                      inverted_views:List[View] = []                                                                                                                     # shape/shapetracker.py:19
                                                      for v,s in zip(self.views[::-1], [x.shape for x in self.views[::-1][1:]]+[out_shape]):                                                             # shape/shapetracker.py:20
                                                        if (inverted:= v.invert(s)) is None: return None                                                                                                 # shape/shapetracker.py:21

                                                          @dataclass(frozen=True)                                                                                                                        # shape/view.py:85
                                                          class View:
                                                            @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                             # shape/view.py:202
                                                            def invert(self, out_shape:Tuple[sint, ...]) -> Optional[View]:
                                                              ret = View.create(self.shape)                                                                                                              # shape/view.py:203
                                                              if self.mask: ret = ret.shrink(self.mask)                                                                                                  # shape/view.py:204
                                                              ret = ret.stride(tuple(-1 if x < 0 else 1 for x in self.strides)).permute(argsort(tuple(-x if x > 0 else x for x in self.strides)))        # shape/view.py:205

                                                              return ret if prod(ret.shape) == prod(out_shape) else None   # don't support shrink, expand, or stride != (-1, 1)                          # shape/view.py:206

                                                return ret                                                                                                                                               # lazy.py:91

                                    def _recursive_lazyop(buf:LazyBuffer, inputs:Dict[LazyBuffer, int], outputs:Tuple[LazyBuffer, ...], var_vals:Dict[Variable, int], st:ShapeTracker,                   # engine/schedule.py:40
                                                          realizes:Dict[LazyBuffer, None], assign_targets:Dict[LazyBuffer, LazyBuffer],
                                                          reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> LazyOp:
                                      if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                        # OLD # engine/schedule.py:44
                                      if (buf, st) in cache: return cache[(buf, st)]                                                                                                               # OLD # engine/schedule.py:45
                                      arg = buf.arg                                                                                                                                                # OLD # engine/schedule.py:46
                                      if buf.op is MetaOps.CONST:                                                                                                                                  # OLD # engine/schedule.py:49
                                      if buf.realized is not None or (buf in realizes and buf not in outputs):                                                                                     # OLD # engine/schedule.py:59
                                      if buf.op in {MetaOps.CONTIGUOUS, MetaOps.ASSIGN}:                                                                                                           # OLD # engine/schedule.py:72
                                        assert buf in outputs                                                                                                                                            # engine/schedule.py:73
                                        return _recursive_lazyop(buf.srcs[0], inputs, outputs, var_vals, st, realizes, assign_targets, reduce_info, cache)                                               # engine/schedule.py:74

                                    class Kernel:                                                                                                                                                        # codegen/kernel.py:54
                                      def hand_coded_optimizations(self) -> Kernel:                                                                                                                      # codegen/kernel.py:491
                                        self.required_optimizations()                                                                                                                              # OLD # codegen/kernel.py:492
                                        MV_BLOCKSIZE, MV_THREADS_PER_ROW, MV_ROWS_PER_THREAD = getenv("MV_BLOCKSIZE", 4), getenv("MV_THREADS_PER_ROW", 8), getenv("MV_ROWS_PER_THREAD", 4)         # OLD # codegen/kernel.py:495
                                        if self.opts.has_local and getenv("MV",1) != 0 and (MV_BLOCKSIZE > 1 or MV_THREADS_PER_ROW > 1 or MV_ROWS_PER_THREAD > 1) and  \                           # OLD # codegen/kernel.py:496
                                            self.reduceop is not None and self.reduceop.op is ReduceOps.SUM and len(self.full_shape) >= 2 and self.opts.has_shared and \
                                            (mulop:=self.reduceop.src[0]).op is BinaryOps.MUL and mulop.src[0].op is BufferOps.LOAD and mulop.src[1].op is BufferOps.LOAD:
                                        if self.opts.has_local and self.opts.has_shared and all_int(self.sts[0].shape[:self.first_reduce]):                                                        # OLD # codegen/kernel.py:512
                                        for buf_index,buf in enumerate(self.bufs):                                                                                                                 # OLD # codegen/kernel.py:531
                                          unit_stride_axes_mul_4 = [i for i in self.sts[buf_index].unit_stride_axes(ignore_valid=True) if self.sts[buf_index].shape[i]%4 == 0]                     # OLD # codegen/kernel.py:532
                                          if buf.dtype.__class__ is ImageDType:                                                                                                                    # OLD # codegen/kernel.py:533
                                        if self.group_for_reduces: return self                                                                                                                     # OLD # codegen/kernel.py:542
                                        to_upcast: List[int] = []                                                                                                                                  # OLD # codegen/kernel.py:551
                                        for axis in range(self.first_reduce):                                                                                                                      # OLD # codegen/kernel.py:553
                                          if isinstance(self.full_shape[axis], int) and self.full_shape[axis] <= 7 and any(st.axis_is_masked(axis) for st in self.sts) and \                       # OLD # codegen/kernel.py:556
                                            prod(self.full_shape[self.first_upcast:]) * prod(self.full_shape[j] for j in to_upcast) * self.full_shape[axis] <= 7 * 7:
                                        for axis in to_upcast[::-1]: self.apply_opt(Opt(OptOps.UPCAST, axis, 0))                                                                                   # OLD # codegen/kernel.py:560
                                        upcasted_axis = set()                                                                                                                                      # OLD # codegen/kernel.py:563
                                        while prod(self.sts[0].shape[:self.first_reduce]) >= 1024:                                                                                                 # OLD # codegen/kernel.py:564
                                          xb_choices = []                                                                                                                                                # codegen/kernel.py:565
                                          for axis, upcast_amount in itertools.product(range(self.first_reduce), [3,4]):   # consider all the non reduce axes, and a 3 or 4 reduce                       # codegen/kernel.py:566

                                            if axis not in upcasted_axis and isinstance(self.full_shape[axis], int) and self.full_shape[axis]%upcast_amount == 0 and any(st.views[-1].strides[axis] == 0 and not any(x[1] == 0 for x in self.upcasted_axis(buf_index)) for buf_index, st in enumerate(self.sts)):  # noqa: E501 # codegen/kernel.py:568

                                      class Kernel:                                                                                                                                                      # codegen/kernel.py:54
                                        def upcasted_axis(self, i:int) -> List[Tuple[int, Optional[sint], bool]]:                                                                                        # codegen/kernel.py:137
                                          upcasted_shape, upcasted_stride = self.sts[i].shape[self.first_upcast:], self.sts[i].real_strides()[self.first_upcast:]                                        # codegen/kernel.py:138

                                          assert all_int(upcasted_shape), f"cannot upcast a symbolic amount {upcasted_shape=}"                                                                           # codegen/kernel.py:139

                                          return list(zip(upcasted_shape, upcasted_stride,                                                                                                               # codegen/kernel.py:140
                                                          [x!=y for x,y in zip(self.sts[0].shape[self.first_upcast:], self.full_shape[self.first_upcast:])]))

                                              xb_choices.append((sum(st.views[-1].strides[axis]>0 for st in self.sts), sum(st.views[-1].strides[axis] for st in self.sts), axis, upcast_amount))  # noqa: E501 # codegen/kernel.py:569

                                          if xb_choices:                                                                                                                                                 # codegen/kernel.py:570
                                            xb_choices = sorted(xb_choices)                                                                                                                              # codegen/kernel.py:571
                                            if DEBUG >= 4: print(f"float4 merging axis : {xb_choices}")                                                                                                  # codegen/kernel.py:572

                                            self.apply_opt(Opt(OptOps.UPCAST, xb_choices[0][2], xb_choices[0][3]))                                                                                       # codegen/kernel.py:573

                                      @dataclass(frozen=True, order=True)                                                                                                                                # codegen/kernel.py:31
                                      class Opt:
                                        def real_axis(self, k:Kernel):                                                                                                                                   # codegen/kernel.py:36
                                          if self.axis is None: return -1                                                                                                                          # OLD # codegen/kernel.py:37
                                          if self.op is OptOps.UNROLL: return k.first_reduce+self.axis                                                                                             # OLD # codegen/kernel.py:38
                                          if self.op in {OptOps.GROUP, OptOps.GROUPTOP}: return k.first_reduce+k.group_for_reduces+self.axis                                                             # codegen/kernel.py:39
                                          return self.axis                                                                                                                                               # codegen/kernel.py:40

                                              class Kernel:                                                                                                                                              # codegen/kernel.py:54
                                                def apply_opt(self, opt:Opt, append_opt:bool=True):                                                                                                      # codegen/kernel.py:389
                                                  check(not self.dont_use_locals or opt.op not in {OptOps.LOCAL, OptOps.GROUP, OptOps.GROUPTOP, OptOps.UPCASTMID}, "not using locals")             # OLD # codegen/kernel.py:390
                                                  if opt.op is OptOps.TC:                                                                                                                          # OLD # codegen/kernel.py:392
                                                  axis = opt.real_axis(self)                                                                                                                       # OLD # codegen/kernel.py:400
                                                  check(axis < len(self.full_shape), "invalid axis")                                                                                               # OLD # codegen/kernel.py:401
                                                  if opt.op is OptOps.SWAP: amt = cast(int, opt.amt)  # amt is an axis in the SWAPs                                                                # OLD # codegen/kernel.py:403
                                                  elif opt.amt is not None:                                                                                                                        # OLD # codegen/kernel.py:404
                                                    amt = opt.amt if opt.amt != 0 else self.full_shape[axis]                                                                                       # OLD # codegen/kernel.py:405
                                                    check(isinstance(amt, int) and amt != 1, "shift/padto of amt 1 or Node is meaningless")                                                        # OLD # codegen/kernel.py:406
                                                    if opt.op is not OptOps.PADTO: check(self.full_shape[axis] % amt == 0, "no longer valid shift")                                                # OLD # codegen/kernel.py:407
                                                  if self.reduceop and (opt.op in {OptOps.GROUP, OptOps.GROUPTOP} or (self.group_for_reduces and opt.op not in {OptOps.NOLOCALS, OptOps.PADTO})):  # OLD # codegen/kernel.py:410
                                                  if opt.op is OptOps.LOCAL:    # cyan                                                                                                             # OLD # codegen/kernel.py:417
                                                  elif opt.op in {OptOps.GROUP, OptOps.GROUPTOP}:   # green                                                                                        # OLD # codegen/kernel.py:422
                                                  elif opt.op is OptOps.UNROLL:                     # purple                                                                                       # OLD # codegen/kernel.py:429
                                                    check(axis < self.first_upcast, "can't upcasted already upcasted")                                                                             # OLD # codegen/kernel.py:430
                                                    check(amt <= 32, "don't unroll more than 32")                                                                                                  # OLD # codegen/kernel.py:431
                                                    if self.full_shape[axis] == amt and axis == self.first_reduce: self.local_dims += 1 # first_reduce will ++, so offset loss in simplify_ones    # OLD # codegen/kernel.py:435
                                                    if self.full_shape[axis] == amt and axis < self.first_reduce+self.group_for_reduces: self.group_for_reduces -= 1 # fully unrolling a GROUP     # OLD # codegen/kernel.py:436
                                                    self.shift_to(axis, amt, insert_before=None)                                                                                                   # OLD # codegen/kernel.py:437
                                                    self.upcast()                                                                                                                                  # OLD # codegen/kernel.py:438
                                                  elif opt.op is OptOps.UPCAST:                     # yellow                                                                                             # codegen/kernel.py:439
                                                    check(axis < self.first_reduce, "upcast is for non-reduce")                                                                                          # codegen/kernel.py:440

                                                    check(not(self.tensor_core and self.global_dims <= axis < self.global_dims+len(self.tensor_core.threads)), "can't upcast TC locals")                 # codegen/kernel.py:441

                                                    check(amt <= 16, "don't upcast more than 16")                                                                                                        # codegen/kernel.py:442

                                                    self.shift_to(axis, amt, insert_before=None)                                                                                                         # codegen/kernel.py:443

                                                    self.upcast()                                                                                                                                        # codegen/kernel.py:444

                                            upcasted_axis.add(xb_choices[0][2])                                                                                                                          # codegen/kernel.py:574

                                          else: break                                                                                                                                                    # codegen/kernel.py:575

                                      self.cache_kv.shrink((None, None,(start_pos,start_pos+seqlen),None,None)).assign(Tensor.stack(xk, xv)).realize()                                                   # test.py:44

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def stack(self:Tensor, *args:Tensor, dim:int=0) -> Tensor:                                                                                                         # tensor.py:1093
                                        return self.unsqueeze(dim).cat(*[t.unsqueeze(dim) for t in args], dim=dim)                                                                                       # tensor.py:1106

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def unsqueeze(self, dim:int) -> Tensor:                                                                                                                          # tensor.py:1215
                                          dim = self._resolve_dim(dim, outer=True)                                                                                                                       # tensor.py:1227

                                          return self.reshape(self.shape[:dim] + (1,) + self.shape[dim:])                                                                                                # tensor.py:1228

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def cat(self:Tensor, *args:Tensor, dim:int=0) -> Tensor:                                                                                                         # tensor.py:1071
                                          dim = self._resolve_dim(dim)                                                                                                                                   # tensor.py:1084

                                          assert all(len(y.shape) == len(self.shape) and all(y.shape[i] == s for i,s in enumerate(self.shape) if i != dim) for y in args)                                # tensor.py:1085

                                          catargs = [self, *args]                                                                                                                                        # tensor.py:1086
                                          cat_dims = [s.shape[dim] for s in catargs]                                                                                                                     # tensor.py:1087

                                          cat_dim_cumsum = [0, *itertools.accumulate(cat_dims)]                                                                                                          # tensor.py:1088
                                          slc:List[List[Optional[Tuple[sint, sint]]]] = [[None for _ in self.shape] for _ in catargs]                                                                    # tensor.py:1089

                                          for d,k,s in zip(cat_dims, cat_dim_cumsum[:-1], slc): s[dim] = (k, cat_dim_cumsum[-1] - k - d)                                                                 # tensor.py:1090
                                          return functools.reduce(Tensor.__add__, [arg.pad(tuple(s)) for arg,s in zip(catargs, slc)])                                                                    # tensor.py:1091

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def assign(self, x) -> Tensor:                                                                                                                                     # tensor.py:217
                                        if isinstance(self.device, str) and self.device.startswith("DISK"):                                                                                              # tensor.py:219

                                        if x.__class__ is not Tensor: x = Tensor(x, device=self.device, dtype=self.dtype)                                                                                # tensor.py:223
                                        if DEBUG >= 4: print(f"assign {self.lazydata} <- {x.lazydata}")                                                                                                  # tensor.py:224

                                        if self.lazydata is x.lazydata: return self  # a self assign is a NOOP                                                                                           # tensor.py:225
                                        assert self.shape == x.shape, f"assign shape mismatch {self.shape} != {x.shape}"                                                                                 # tensor.py:227

                                        assert self.device == x.device, f"assign device mismatch {self.device} != {x.device}"                                                                            # tensor.py:228

                                        assert self.dtype == x.dtype, f"assign dtype mismatch {self.dtype} != {x.dtype}"                                                                                 # tensor.py:229

                                        assert not isinstance(self.lazydata, MultiLazyBuffer) or self.lazydata.axis == x.lazydata.axis, "axis must match on MultiLazyBuffer"                             # tensor.py:230
                                        assert not x.requires_grad  # self requires_grad is okay?                                                                                                        # tensor.py:231
                                        if not self.lazydata.is_realized(): return self.replace(x)                                                                                                       # tensor.py:232

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def is_realized(self) -> bool: return self.base.realized is not None                                                                                         # lazy.py:79

                                        self.lazydata = self.lazydata.assign(x.lazydata)                                                                                                                 # tensor.py:233

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def assign(self, x:LazyBuffer) -> LazyBuffer:                                                                                                                # lazy.py:81
                                              assert x.size == self.size, f"assign target must have same size {self.size=} != {x.size=}"                                                                 # lazy.py:82
                                              return LazyBuffer.metaop(MetaOps.ASSIGN, self.shape, self.dtype, self.device, arg=() if self.st.contiguous else (self.st,), src=(x, self.base))            # lazy.py:83

                                        return self                                                                                                                                                      # tensor.py:234

                                    def _recurse_lb(buf:LazyBuffer, realizes:Dict[LazyBuffer, None], allbufs:Dict[LazyBuffer, None], simple_pads:Dict[LazyBuffer, None],\                                # engine/schedule.py:165
                                        children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]], assign_targets:Dict[LazyBuffer, LazyBuffer],\
                                        double_reduces:Dict[LazyBuffer, None], scheduled=False):
                                      if buf in allbufs or buf.base.realized is not None: return                                                                                                   # OLD # engine/schedule.py:169
                                      if GRAPH: log_lazybuffer(buf, scheduled)                                                                                                                     # OLD # engine/schedule.py:170
                                      if buf is not buf.base:                                                                                                                                      # OLD # engine/schedule.py:172
                                      if buf.op in ReduceOps and buf.srcs[0].base.op is buf.op and buf.srcs[0] is not buf.srcs[0].base: double_reduces[buf] = None                                 # OLD # engine/schedule.py:186
                                      allbufs[buf] = None                                                                                                                                          # OLD # engine/schedule.py:187
                                      if buf.forced_realize or buf.op in MetaOps: realizes[buf] = None                                                                                             # OLD # engine/schedule.py:188
                                      if buf.op is MetaOps.ASSIGN:                                                                                                                                 # OLD # engine/schedule.py:189
                                        assert buf.srcs[1].base is buf.srcs[1], f"assign must be to base {buf.srcs[1]}"                                                                                  # engine/schedule.py:190

                                        assert buf.srcs[1].realized is not None, f"assign must be already realized to schedule {buf.srcs[1]}"                                                            # engine/schedule.py:191

                                        assign_targets[buf.srcs[1]] = buf                                                                                                                                # engine/schedule.py:192

                                      def _recurse_lb(buf:LazyBuffer, realizes:Dict[LazyBuffer, None], allbufs:Dict[LazyBuffer, None], simple_pads:Dict[LazyBuffer, None],\                              # engine/schedule.py:165
                                          children:DefaultDict[LazyBuffer, Dict[LazyBuffer, None]], assign_targets:Dict[LazyBuffer, LazyBuffer],\
                                          double_reduces:Dict[LazyBuffer, None], scheduled=False):
                                        if buf in allbufs or buf.base.realized is not None: return                                                                                                 # OLD # engine/schedule.py:169
                                        if GRAPH: log_lazybuffer(buf, scheduled)                                                                                                                   # OLD # engine/schedule.py:170
                                        if buf is not buf.base:                                                                                                                                    # OLD # engine/schedule.py:172
                                            simple_pads[buf.base] = None                                                                                                                                 # engine/schedule.py:176

                                    def _graph_schedule(outs:List[LazyBuffer], seen:Set[LazyBuffer]):                                                                                                    # engine/schedule.py:238
                                      realizes: Dict[LazyBuffer, None] = {x.base:None for x in outs if x.base.realized is None}                                                                    # OLD # engine/schedule.py:241
                                      allbufs: Dict[LazyBuffer, None] = {}                                                                                                                         # OLD # engine/schedule.py:242
                                      simple_pads: Dict[LazyBuffer, None] = {}                                                                                                                     # OLD # engine/schedule.py:243
                                      children: DefaultDict[LazyBuffer, Dict[LazyBuffer, None]] = defaultdict(dict)                                                                                # OLD # engine/schedule.py:244
                                      assign_targets: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                            # OLD # engine/schedule.py:245
                                      double_reduces: Dict[LazyBuffer, None] = {}                                                                                                                  # OLD # engine/schedule.py:246
                                      for out in outs: _recurse_lb(out.base, realizes, allbufs, simple_pads, children, assign_targets, double_reduces, scheduled=True)                             # OLD # engine/schedule.py:247
                                      for p in simple_pads:                                                                                                                                        # OLD # engine/schedule.py:250
                                        if not _is_padding_okay(p, realizes):                                                                                                                            # engine/schedule.py:251

                                          def _is_padding_okay(buf:LazyBuffer, realizes:Dict[LazyBuffer, None]) -> bool:                                                                                 # engine/schedule.py:201
                                            if buf in realizes or buf.realized is not None: return True                                                                                                  # engine/schedule.py:202

                                            if buf.op in UNSAFE_PAD_OPS: return False                                                                                                                    # engine/schedule.py:204
                                            return all(_is_padding_okay(x.base, realizes) for x in buf.srcs)                                                                                             # engine/schedule.py:205

                                      reduce_for_op: Dict[LazyBuffer, LazyBuffer] = {}                                                                                                             # OLD # engine/schedule.py:255
                                      reduce_of_const: List[LazyBuffer] = []                                                                                                                       # OLD # engine/schedule.py:256
                                      for r in allbufs:                                                                                                                                            # OLD # engine/schedule.py:257
                                        if r.op not in ReduceOps or r in realizes: continue                                                                                                        # OLD # engine/schedule.py:258
                                          tr = r                                                                                                                                                         # engine/schedule.py:277
                                          if can_chase:                                                                                                                                                  # engine/schedule.py:278
                                            st = tr.st                                                                                                                                                   # engine/schedule.py:280
                                            while len(children[tr]) == 1:                                                                                                                                # engine/schedule.py:281
                                              tr_next = next(iter(children[tr]))                                                                                                                         # engine/schedule.py:282
                                              st_childs = dedup(s for s in tr_next.srcs if s.base is tr)                                                                                                 # engine/schedule.py:283

                                              if len(st_childs) > 1: break                                                                                                                               # engine/schedule.py:284
                                              if st.size != st_childs[0].st.size: break                                                                                                                  # engine/schedule.py:285

                                              st = st + st_childs[0].st                                                                                                                                  # engine/schedule.py:286

                                              if not st.contiguous or tr_next.op in ReduceOps: break                                                                                                     # engine/schedule.py:287

                                              tr = tr_next                                                                                                                                               # engine/schedule.py:288

                                            if tr.op is UnaryOps.CAST and tr.arg.itemsize > tr.srcs[0].dtype.itemsize:                                                                                   # engine/schedule.py:290
                                            reduce_for_op[tr] = r                                                                                                                                        # engine/schedule.py:292
                                          realizes[tr] = None                                                                                                                                            # engine/schedule.py:293

                                      def _recursive_lazyop(buf:LazyBuffer, inputs:Dict[LazyBuffer, int], outputs:Tuple[LazyBuffer, ...], var_vals:Dict[Variable, int], st:ShapeTracker,                 # engine/schedule.py:40
                                                            realizes:Dict[LazyBuffer, None], assign_targets:Dict[LazyBuffer, LazyBuffer],
                                                            reduce_info:Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]], cache) -> LazyOp:
                                        if buf is not buf.base: st, buf = buf.st+st, buf.base                                                                                                      # OLD # engine/schedule.py:44
                                        if (buf, st) in cache: return cache[(buf, st)]                                                                                                             # OLD # engine/schedule.py:45
                                        arg = buf.arg                                                                                                                                              # OLD # engine/schedule.py:46
                                        if buf.op is MetaOps.CONST:                                                                                                                                # OLD # engine/schedule.py:49
                                        if buf.realized is not None or (buf in realizes and buf not in outputs):                                                                                   # OLD # engine/schedule.py:59
                                          unbound_st, st_var_vals = st.simplify().unbind()                                                                                                               # engine/schedule.py:60

                                          var_vals.update(st_var_vals)                                                                                                                                   # engine/schedule.py:61
                                          if buf in assign_targets:                                                                                                                                      # engine/schedule.py:62
                                          return LazyOp(BufferOps.LOAD, (), MemBuffer(len(outputs)+inputs.setdefault(buf, len(inputs)), buf.dtype, unbound_st))                                          # engine/schedule.py:69

                                      def _lower_lazybuffer(outs:List[LazyBuffer], realizes:Dict[LazyBuffer, None]):                                                                                     # engine/schedule.py:128
                                        if (out:=outs[0]).op is MetaOps.COPY and getenv("USE_COPY_KERNEL") and out.device.split(":")[0] == out.srcs[0].device.split(":")[0]:                       # OLD # engine/schedule.py:130
                                        if out.op in {MetaOps.CUSTOM, MetaOps.COPY, MetaOps.EMPTY, MetaOps.VIEW}: return LazyOp(out.op, (), out.arg), [x.base for x in out.srcs], {}, []           # OLD # engine/schedule.py:133
                                        reduce_info: Dict[Tuple[LazyBuffer, ShapeTracker], Tuple[ShapeTracker, Tuple[int, ...]]] = {}                                                              # OLD # engine/schedule.py:135
                                        seen_ops: Dict[Tuple[LazyBuffer, ShapeTracker], None] = {}                                                                                                 # OLD # engine/schedule.py:136
                                        for out in outs: _recurse_reduceops(out, out.st, realizes, outs, reduce_info, seen_ops)                                                                    # OLD # engine/schedule.py:137
                                        shape_dims = [sorted(dedup(dims)) for dims in zip(*[input_st.shape for input_st,_ in reduce_info.values()])]                                               # OLD # engine/schedule.py:139
                                        for i,dims in enumerate(shape_dims):                                                                                                                       # OLD # engine/schedule.py:140
                                          if len(dims) == 1 or (len(dims) == 2 and dims[0] == 1): continue                                                                                         # OLD # engine/schedule.py:141
                                        var_vals = merge_dicts([out.st.var_vals.copy() for out in outs])                                                                                           # OLD # engine/schedule.py:147
                                        assign_targets = {x.srcs[1]:x for x in outs if x.op is MetaOps.ASSIGN}                                                                                     # OLD # engine/schedule.py:148
                                        cache: Dict[Tuple[LazyBuffer, ShapeTracker], LazyOp] = {}                                                                                                  # OLD # engine/schedule.py:149
                                        ast: List[LazyOp] = []                                                                                                                                     # OLD # engine/schedule.py:150
                                        inputs: Dict[LazyBuffer, int] = {}                                                                                                                         # OLD # engine/schedule.py:151
                                        for i, out in enumerate(outs):                                                                                                                             # OLD # engine/schedule.py:152
                                          output_st = ShapeTracker.from_shape(reduce_st(*deque(reduce_info.values(), 1).pop()) if reduce_info else out.shape)                                      # OLD # engine/schedule.py:153
                                          lop = _recursive_lazyop(out, inputs, tuple(outs), var_vals, output_st, realizes, assign_targets, reduce_info, cache=cache)                               # OLD # engine/schedule.py:154
                                          if out.op is MetaOps.ASSIGN and out.arg:                                                                                                                 # OLD # engine/schedule.py:155
                                            assert out.arg[0].shape == out.shape, f"ASSIGN must not override output shape {out.arg[0].shape} != {out.shape}"                                             # engine/schedule.py:156

                                            output_st = out.arg[0].reshape(output_st.shape)                                                                                                              # engine/schedule.py:157

                                      @dataclass(frozen=True)                                                                                                                                            # shape/view.py:85
                                      class View:
                                        @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                 # shape/view.py:136
                                        def __add__(self, vm1:View) -> Optional[View]:
                                          vm2 = self                                                                                                                                               # OLD # shape/view.py:137
                                          if vm2.contiguous: return vm1                                                                                                                            # OLD # shape/view.py:138
                                          if vm1.contiguous and vm1.shape == vm2.shape: return vm2                                                                                                 # OLD # shape/view.py:139
                                          if vm1.contiguous and vm1.size() == vm2.size() and (ret := vm2.reshape(vm1.shape)) is not None: return ret                                               # OLD # shape/view.py:140
                                          if vm1.mask:                                                                                                                                             # OLD # shape/view.py:141
                                          origin = un1d(vm2.shape, vm1.offset)                                                                                                                     # OLD # shape/view.py:147
                                          terms: List[List[Tuple[int, sint]]] = [[] for _ in origin]                                                                                               # OLD # shape/view.py:148
                                          strides: List[sint] = [0] * len(vm1.shape)                                                                                                               # OLD # shape/view.py:149
                                          for d1, st in enumerate(vm1.strides):                                                                                                                    # OLD # shape/view.py:150
                                            if st == 0: continue                                                                                                                                   # OLD # shape/view.py:151
                                            for d2, (o, s1) in enumerate(zip(origin, un1d(vm2.shape, vm1.offset + st))):                                                                           # OLD # shape/view.py:152
                                              if (s1 := s1 - o) == 0: continue                                                                                                                     # OLD # shape/view.py:153
                                              terms[d2].append((d1, s1))                                                                                                                           # OLD # shape/view.py:154
                                              strides[d1] += s1 * vm2.strides[d2]                                                                                                                  # OLD # shape/view.py:155
                                          idxs: List[Node] = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(vm1.shape)]                                                                         # OLD # shape/view.py:159
                                          merged_size, merged_term = 1, NumNode(0)                                                                                                                 # OLD # shape/view.py:160
                                          extents: List[Tuple[sint, Node]] = []                                                                                                                    # OLD # shape/view.py:161
                                          for term, s, o in zip(reversed(terms), reversed(vm2.shape), reversed(origin)):                                                                           # OLD # shape/view.py:162
                                            merged_term += Variable.sum([idxs[d1] * (s1 * merged_size) for d1, s1 in term]) + o * merged_size                                                      # OLD # shape/view.py:163
                                            merged_size *= s                                                                                                                                       # OLD # shape/view.py:164
                                            if not (merged_term >= merged_size) and not (merged_term < 0):                                                                                         # OLD # shape/view.py:165
                                              extents.append((merged_size, merged_term))                                                                                                           # OLD # shape/view.py:166
                                              merged_size, merged_term = 1, NumNode(0)                                                                                                             # OLD # shape/view.py:167
                                          if merged_term: return None                                                                                                                              # OLD # shape/view.py:168
                                          if (vm2_shape := tuple(s for s,_ in reversed(extents))) != vm2.shape:                                                                                    # OLD # shape/view.py:169
                                          if vm2.mask:                                                                                                                                             # OLD # shape/view.py:172
                                            newb, newe, bad = [0] * len(vm1.shape), list(vm1.shape), False                                                                                         # OLD # shape/view.py:174
                                            for d2, ((b, e), o, (_, t)) in enumerate(zip(vm2.mask, origin, reversed(extents))):                                                                    # OLD # shape/view.py:175
                                              if not (t.min < b or t.max >= e): continue                                                                                                           # OLD # shape/view.py:176
                                              if not isinstance(o, int) or not isinstance(b, int) or not isinstance(e, int):                                                                       # OLD # shape/view.py:177
                                              term = terms[d2]                                                                                                                                     # OLD # shape/view.py:180
                                              if len(term) != 1:                                                                                                                                   # OLD # shape/view.py:181
                                                if not term and newe: newe[0] = 0                                                                                                                  # OLD # shape/view.py:182
                                                else: bad = True                                                                                                                                   # OLD # shape/view.py:183
                                                continue                                                                                                                                           # OLD # shape/view.py:184
                                            for b, e, s in zip(newb, newe, vm1.shape):                                                                                                             # OLD # shape/view.py:193
                                              if b != 0 or e != s:                                                                                                                                 # OLD # shape/view.py:194
                                            if bad: return None                                                                                                                                    # OLD # shape/view.py:197
                                          return View.create(vm1.shape, tuple(strides), sum(o * s for o, s in zip(origin, vm2.strides)) + vm2.offset)                                                    # shape/view.py:199

                                      class Variable(Node):                                                                                                                                              # shape/symbolic.py:110
                                        def unbind(self) -> Tuple[Variable, int]:                                                                                                                        # shape/symbolic.py:130
                                          assert self.val is not None, f"cannot unbind {self}"                                                                                                           # shape/symbolic.py:131

                                          return Variable(self.expr, self.min, self.max), self.val                                                                                                       # shape/symbolic.py:132

                                      class Variable(Node):                                                                                                                                              # shape/symbolic.py:110
                                        def substitute(self, var_vals: Mapping[Variable, Union[NumNode, Variable]]) -> Node: return var_vals.get(self, self)                                             # shape/symbolic.py:134

                                    def _internal_memory_planner(buffers:List[Union[List[Buffer], Tuple[Buffer, ...]]], noopt_buffers=None, debug_prefix="") -> Dict[Buffer, Buffer]:                    # engine/schedule.py:393
                                      if getenv("NO_MEMORY_PLANNER"): return {}                                                                                                                    # OLD # engine/schedule.py:394
                                      first_appearance, last_appearance = {}, {}                                                                                                                   # OLD # engine/schedule.py:395
                                      for i,u in enumerate(buffers):                                                                                                                               # OLD # engine/schedule.py:396
                                        for buf in u:                                                                                                                                              # OLD # engine/schedule.py:397
                                          if buf.is_allocated() or buf.lb_refcount > 0 or (noopt_buffers is not None and buf.base in noopt_buffers): continue                                      # OLD # engine/schedule.py:398
                                          if buf.base not in first_appearance: first_appearance[buf.base] = i                                                                                            # engine/schedule.py:399

                                          last_appearance[buf.base] = i                                                                                                                                  # engine/schedule.py:400

                                      def _internal_memory_planner(buffers:List[Union[List[Buffer], Tuple[Buffer, ...]]], noopt_buffers=None, debug_prefix="") -> Dict[Buffer, Buffer]:                  # engine/schedule.py:393
                                        def find_replace_buffer(buf, st, en):                                                                                                                            # engine/schedule.py:405
                                          key = (buf.device, buf.dtype, buf.options) + ((buf.nbytes,) if not hasattr(Device[buf.device].allocator, "offset") else tuple())                               # engine/schedule.py:406

                                          default_buf = (0, len(buffers) - 1, buf) # will return the buffer itself if the replace one is not found.                                                      # engine/schedule.py:408
                                          seg_st, seg_en, seg_buf = next((free_segs[key].pop(i) for i,(sst,sen,_) in enumerate(free_segs[key]) if sst <= st and en <= sen), default_buf)                 # engine/schedule.py:409
                                          free_segs[key] += [(seg_st, st - 1, seg_buf)] if st - 1 >= seg_st else []                                                                                      # engine/schedule.py:411
                                          free_segs[key] += [(en + 1, seg_en, seg_buf)] if seg_en >= en + 1 else []                                                                                      # engine/schedule.py:412
                                          return seg_buf if seg_buf.nbytes == buf.nbytes else Buffer(buf.device, buf.size, buf.dtype, base=seg_buf)                                                      # engine/schedule.py:414

                                      free_segs: Dict[Tuple, List[Tuple[int, int, Buffer]]] = defaultdict(list) # Dict[buffer key, Tuple[start, end, buffer to reuse on the seg]]                  # OLD # engine/schedule.py:404
                                      def find_replace_buffer(buf, st, en):                                                                                                                        # OLD # engine/schedule.py:405
                                      buffer_requests = sorted([(first_appearance[buf], last_appearance[buf], buf) for buf in first_appearance.keys()], key=lambda x: -x[2].nbytes)                # OLD # engine/schedule.py:416
                                      assigned = {buf:find_replace_buffer(buf, st, en) for st, en, buf in buffer_requests}                                                                         # OLD # engine/schedule.py:417
                                      for i,u in enumerate(buffers):                                                                                                                               # OLD # engine/schedule.py:419
                                        for buf in u:                                                                                                                                              # OLD # engine/schedule.py:420
                                          if buf.is_allocated() or buf.lb_refcount > 0 or (noopt_buffers is not None and buf.base in noopt_buffers): continue                                      # OLD # engine/schedule.py:421
                                          if buf._base is not None: assigned[buf] = Buffer(buf.device, buf.size, buf.dtype, base=assigned.get(buf.base, buf.base).base, offset=buf.offset)               # engine/schedule.py:422
                                          else: assigned[buf] = assigned.get(buf, buf)                                                                                                                   # engine/schedule.py:423

                                    class BufferCopy(Runner):                                                                                                                                            # engine/realize.py:120
                                      def copy(self, dest, src):                                                                                                                                         # engine/realize.py:125
                                        disk_supports_fast_copyout = src.device.startswith("DISK") and hasattr(src.allocator.device, 'io_uring') and hasattr(src.allocator.device, 'fd')           # OLD # engine/realize.py:126
                                        if src.device.startswith("DISK") and hasattr(dest.allocator, 'copy_from_disk') and disk_supports_fast_copyout and src.nbytes >= 4096:                      # OLD # engine/realize.py:127
                                        elif src.device.startswith("DISK") and hasattr(dest.allocator, 'as_buffer'):                                                                               # OLD # engine/realize.py:129
                                          src.allocator.copyout(dest.allocator.as_buffer(dest._buf), src._buf)                                                                                     # OLD # engine/realize.py:131
                                          dest.copyin(src.as_buffer(allow_zero_copy=True))  # may allocate a CPU buffer depending on allow_zero_copy                                                     # engine/realize.py:133

                                            class Buffer:                                                                                                                                                # device.py:53
                                              def as_buffer(self, allow_zero_copy=False, force_zero_copy=False) -> memoryview:                                                                           # device.py:110
                                                if (force_zero_copy or allow_zero_copy) and hasattr(self.allocator, 'as_buffer'): return self.allocator.as_buffer(self._buf)                             # device.py:112
                                                assert not force_zero_copy, "force zero copy was passed, but copy is required"                                                                           # device.py:113
                                                return self.copyout(memoryview(bytearray(self.nbytes)))                                                                                                  # device.py:114

                                                  class Buffer:                                                                                                                                          # device.py:53
                                                    def copyout(self, mv:memoryview) -> memoryview:                                                                                                      # device.py:121
                                                      mv = flat_mv(mv)                                                                                                                                   # device.py:122

                                                      assert len(mv) == self.nbytes, f"size mismatch, {len(mv)=} != {self.dtype=} {self.size=}"                                                          # device.py:123

                                                      assert self.is_allocated(), "can't copyout unallocated buffer"                                                                                     # device.py:124

                                                      self.allocator.copyout(mv, self._buf)                                                                                                              # device.py:125

                                                        class NpyAllocator(Allocator):  # pylint: disable=abstract-method                                                                                # runtime/ops_npy.py:5
                                                          def copyout(self, dest:memoryview, src:np.ndarray): dest[:] = flat_mv(np.require(src, requirements='C').data)                                  # runtime/ops_npy.py:6

                                                      return mv                                                                                                                                          # device.py:126

                                            class Buffer:                                                                                                                                                # device.py:53
                                              def copyin(self, mv:memoryview):                                                                                                                           # device.py:115
                                                mv = flat_mv(mv)                                                                                                                                         # device.py:116

                                                assert len(mv) == self.nbytes, f"size mismatch, {len(mv)=} != {self.dtype=} {self.size=}"                                                                # device.py:117

                                                assert self.is_allocated(), "can't copyin to unallocated buffer"                                                                                         # device.py:118

                                                self.allocator.copyin(self._buf, mv)                                                                                                                     # device.py:119

                                                  class _MallocAllocator(LRUAllocator):                                                                                                                  # device.py:164
                                                    def copyin(self, dest, src:memoryview): ctypes.memmove(dest, from_mv(src), len(src))                                                                 # device.py:167

                                                      # TODO: make this work with read only memoryviews (if possible)                                                                                    # helpers.py:292
                                                      def from_mv(mv:memoryview, to_type=ctypes.c_char):
                                                        return ctypes.cast(ctypes.addressof(to_type.from_buffer(mv)), ctypes.POINTER(to_type * len(mv))).contents                                        # helpers.py:293

                                                return self                                                                                                                                              # device.py:120

                                    class IndependentLowerer:                                                                                                                                            # codegen/lowerer.py:108
                                      def _to_uop(self, x:LazyOp) -> UOp:                                                                                                                                # codegen/lowerer.py:160
                                        if x.op in BufferOps:                                                                                                                                      # OLD # codegen/lowerer.py:161
                                            barrier = (UOp(UOps.BARRIER, None, (self.to_uop(x.src[0]),)),) if len(x.src) else ()                                                                         # codegen/lowerer.py:175
                                            load_dtype = x.arg.dtype.scalar()                                                                                                                            # codegen/lowerer.py:176

                                            if idx.dtype == dtypes.int.vec(3):                                                                                                                           # codegen/lowerer.py:177

                                            return UOp(UOps.LOAD, load_dtype, (buf, idx) + ((UOp.const(load_dtype, 0), valid) if has_valid else ()) + barrier)                                           # codegen/lowerer.py:183

                                    def do_reduce(root):                                                                                                                                                 # codegen/uopgraph.py:392
                                      reduce_parented, reduce_unparented = partition(root.src[1:], lambda x: x in root.src[0].parents)                                                                   # codegen/uopgraph.py:394

                                      ret = root.src[0]                                                                                                                                                  # codegen/uopgraph.py:395
                                      if len(reduce_parented):                                                                                                                                           # codegen/uopgraph.py:396
                                        const = UOp.const(root.dtype.scalar(), 0 if root.arg is BinaryOps.ADD else dtypes.min(root.dtype))                                                               # codegen/uopgraph.py:397

                                        acc = UOp(UOps.DEFINE_ACC, root.dtype, (const,) + tuple(reduce_parented), (acc_number,))                                                                         # codegen/uopgraph.py:398
                                        acc_number += 1                                                                                                                                                  # codegen/uopgraph.py:399
                                        ret = UOp(UOps.PHI, root.dtype, (acc, acc.alu(root.arg, ret)))                                                                                                   # codegen/uopgraph.py:400

                                      if root.arg is BinaryOps.ADD:                                                                                                                                      # codegen/uopgraph.py:402
                                        for r in reduce_unparented: ret = ret * (r.src[1]-r.src[0]).cast(ret.dtype)                                                                                      # codegen/uopgraph.py:403
                                      return ret                                                                                                                                                         # codegen/uopgraph.py:404

                                    class UOpGraph:                                                                                                                                                      # codegen/uopgraph.py:491
                                      def linearize(self, extra_pm:Optional[PatternMatcher]=None, skip_check=False) -> UOpGraph:                                                                         # codegen/uopgraph.py:518
                                        acc_number = 0                                                                                                                                             # OLD # codegen/uopgraph.py:520
                                        sink = graph_rewrite(self.sink, self.folder)                                                                                                               # OLD # codegen/uopgraph.py:526
                                        UOpGraph.cnt += 1                                                                                                                                          # OLD # codegen/uopgraph.py:529
                                        if UOpGraph.cnt != getenv("DEBUG_EXPAND", 0):                                                                                                              # OLD # codegen/uopgraph.py:530
                                          sink = graph_rewrite(sink, self.folder+expander+float4_folding if self.opts is not None and self.opts.supports_float4 else self.folder+expander)         # OLD # codegen/uopgraph.py:531
                                        if UOpGraph.cnt != getenv("DEBUG_REDUCE", 0):                                                                                                              # OLD # codegen/uopgraph.py:532
                                          sink = graph_rewrite(sink, self.folder+expander+reducer)                                                                                                 # OLD # codegen/uopgraph.py:533
                                        if extra_pm: sink = graph_rewrite(sink, self.folder+extra_pm)                                                                                              # OLD # codegen/uopgraph.py:536
                                        children: Dict[UOp, List[UOp]] = {}                                                                                                                        # OLD # codegen/uopgraph.py:540
                                        in_degree: Dict[UOp, int] = {}                                                                                                                             # OLD # codegen/uopgraph.py:541
                                        get_children_dfs(sink, children, in_degree)                                                                                                                # OLD # codegen/uopgraph.py:542
                                        def get_recursive_children(x:UOp, end:UOps, include_self=False) -> Set[UOp]:                                                                               # OLD # codegen/uopgraph.py:545
                                        scope_children = {p:get_recursive_children(p, END_FOR_UOP[p.op][0]) for p in reversed(in_degree) if p.op in END_FOR_UOP}                                   # OLD # codegen/uopgraph.py:550
                                        queue:List[Tuple[int, UOp]] = []                                                                                                                           # OLD # codegen/uopgraph.py:552
                                        def push(u:UOp):                                                                                                                                           # OLD # codegen/uopgraph.py:553
                                        for u in children:                                                                                                                                         # OLD # codegen/uopgraph.py:560
                                          if in_degree[u] == 0: push(u)                                                                                                                            # OLD # codegen/uopgraph.py:561
                                        scope_end: Dict[UOp, UOp] = {}                                                                                                                             # OLD # codegen/uopgraph.py:563
                                        self._uops = []                                                                                                                                            # OLD # codegen/uopgraph.py:564
                                        while queue:                                                                                                                                               # OLD # codegen/uopgraph.py:565
                                          p,x = heapq.heappop(queue)                                                                                                                               # OLD # codegen/uopgraph.py:566
                                          if DEBUG >= 7: print(p,x)                                                                                                                                # OLD # codegen/uopgraph.py:567
                                          if x in scope_children: scope_end[x] = x                                                                                                                 # OLD # codegen/uopgraph.py:568
                                          if x.op is UOps.DEFINE_ACC:                                                                                                                              # OLD # codegen/uopgraph.py:569
                                            idx = min([self._uops.index(l) for l in x.src if l.op is UOps.RANGE])                                                                                        # codegen/uopgraph.py:570
                                            self._uops.insert(idx, x)                                                                                                                                    # codegen/uopgraph.py:571

                                              def type_verify(uops):                                                                                                                                     # codegen/uops.py:200
                                                for u in uops:                                                                                                                                     # OLD # codegen/uops.py:201
                                                  uop, arg, src, dtype = u.op, u.arg, u.src, u.dtype                                                                                               # OLD # codegen/uops.py:202
                                                  if uop in {UOps.CONST, UOps.DEFINE_ACC}:                                                                                                         # OLD # codegen/uops.py:203
                                                      assert dtype is not None and src[0].dtype == dtype.scalar(), f"type of {src[0].dtype=} must be a scalar {dtype.scalar()}"                          # codegen/uops.py:205

                                                      arg = src[0].arg                                                                                                                                   # codegen/uops.py:206

                                                  if uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}: assert arg is None and dtype is not None # type is the output type, not an arg              # OLD # codegen/uops.py:208
                                                  if uop is UOps.CAST: assert dtype.count == 1 and len(src) == 1                                                                                   # OLD # codegen/uops.py:209
                                                  if uop is UOps.VECTORIZE:                                                                                                                        # OLD # codegen/uops.py:210
                                                  if uop is UOps.LOAD and len(src) > 3 and src[3].op is UOps.ALU: assert src[3].dtype == dtypes.bool and src[2].dtype == dtype                     # OLD # codegen/uops.py:213
                                                  if uop is UOps.GEP: assert dtype == src[0].dtype.scalar(), f"GEP of {src[0].dtype=} should be {src[0].dtype.scalar()} != {dtype}"                # OLD # codegen/uops.py:214
                                                  if uop is UOps.STORE:                                                                                                                            # OLD # codegen/uops.py:215
                                                  if uop is UOps.ALU:                                                                                                                              # OLD # codegen/uops.py:218
                                                    assert dtype is not None and type(arg) is type(dtypes.as_const(arg, dtype)), f"type of {arg=} does not match {dtype}"                          # OLD # codegen/uops.py:207
                                                    if arg in UnaryOps: assert dtype == src[0].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=}"                                          # OLD # codegen/uops.py:219
                                                    elif arg in {BinaryOps.CMPLT, BinaryOps.CMPNE}:                                                                                                # OLD # codegen/uops.py:220
                                                      assert dtype == (bd:=(dtypes.bool.vec(dtype.count) if dtype.count != 1 else dtypes.bool)), f"{arg} output dtype mismatch {dtype=} != {bd=}"        # codegen/uops.py:221
                                                      assert src[0].dtype == src[1].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=} != {src[1].dtype=}"                                        # codegen/uops.py:222

                                    class CStyleLanguage(Renderer):                                                                                                                                      # renderer/cstyle.py:10
                                      def render(self, name:str, uops:List[UOp]) -> str:                                                                                                                 # renderer/cstyle.py:95
                                        kernel = []                                                                                                                                                # OLD # renderer/cstyle.py:96
                                        bufs: Dict[UOp, Tuple[str, Tuple[DType, bool]]] = {}                                                                                                       # OLD # renderer/cstyle.py:97
                                        depth = 1                                                                                                                                                  # OLD # renderer/cstyle.py:98
                                        def kk(s): kernel.append("  "*depth+s)                                                                                                                     # OLD # renderer/cstyle.py:99
                                        c: DefaultDict[str, int] = defaultdict(int)                                                                                                                # OLD # renderer/cstyle.py:101
                                        r: Dict[UOp, str] = {}                                                                                                                                     # OLD # renderer/cstyle.py:102
                                        def ssa(prefix:str, u:Optional[UOp]=None):                                                                                                                 # OLD # renderer/cstyle.py:104
                                        child_count = Counter(v for ru in uops for v in ru.src)                                                                                                    # OLD # renderer/cstyle.py:111
                                        seen_vars = set()                                                                                                                                          # OLD # renderer/cstyle.py:113
                                        for u in uops:                                                                                                                                             # OLD # renderer/cstyle.py:114
                                          uop,dtype,src,args = u.op,u.dtype,u.src,u.arg                                                                                                            # OLD # renderer/cstyle.py:115
                                          if uop is UOps.IF:                                                                                                                                       # OLD # renderer/cstyle.py:117
                                          elif uop is UOps.BARRIER: kk(self.barrier)                                                                                                               # OLD # renderer/cstyle.py:120
                                          elif uop in {UOps.ENDRANGE, UOps.ENDIF}:                                                                                                                 # OLD # renderer/cstyle.py:121
                                          elif uop is UOps.STORE:                                                                                                                                  # OLD # renderer/cstyle.py:124
                                            assert dtype is not None, f"None dtype for uop {uop}"                                                                                                  # OLD # renderer/cstyle.py:131
                                            if uop is UOps.RANGE:                                                                                                                                  # OLD # renderer/cstyle.py:132
                                            elif uop is UOps.ALU:                                                                                                                                  # OLD # renderer/cstyle.py:135
                                            elif uop is UOps.SPECIAL:                                                                                                                              # OLD # renderer/cstyle.py:144
                                            elif uop is UOps.DEFINE_VAR:                                                                                                                           # OLD # renderer/cstyle.py:147
                                            elif uop is UOps.LOAD:                                                                                                                                 # OLD # renderer/cstyle.py:152
                                              val = self.render_load(dtype, r[src[0]], src[0].dtype, strip_parens(r[src[1]]), src[0].op is UOps.DEFINE_LOCAL)                                            # renderer/cstyle.py:153

                                                class CStyleLanguage(Renderer):                                                                                                                          # renderer/cstyle.py:10
                                                  # returns a str expression of the loaded value with the output type                                                                                    # renderer/cstyle.py:58
                                                  def render_load(self, output_dtype, buf_name, buf_dtype, idx, local=False) -> str:
                                                    if isinstance(buf_dtype, ImageDType):                                                                                                                # renderer/cstyle.py:59
                                                    if self.uses_vload and buf_dtype.scalar() == dtypes.float16 and output_dtype.scalar() != dtypes.float16:                                             # renderer/cstyle.py:62
                                                    if output_dtype.count > 1:                                                                                                                           # renderer/cstyle.py:64
                                                    return f"*({buf_name}+{idx})" if self.uses_ptr_arithmetic else f"{buf_name}[{idx}]"                                                                  # renderer/cstyle.py:66

                                              if len(src) > 3 and src[3].op is UOps.ALU: val = self.code_for_op[TernaryOps.WHERE](r[src[3]], val, r[src[2]], dtype)                                      # renderer/cstyle.py:155
                                              kk(f"{self.render_dtype(dtype)} {ssa('val',u)} = {val};")                                                                                                  # renderer/cstyle.py:156

                                            elif uop is UOps.PHI:                                                                                                                                  # OLD # renderer/cstyle.py:157
                                            elif uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}:                                                                                                 # OLD # renderer/cstyle.py:160
                                              assert len(src) == 1 or (uop is UOps.VECTORIZE and len(src) > 1), "Invalid source length for operation"                                                    # renderer/cstyle.py:161
                                              if uop is UOps.BITCAST:                                                                                                                                    # renderer/cstyle.py:162
                                              elif uop is UOps.CAST: val = self.render_cast(r[src[0]], dtype, bitcast=False)                                                                             # renderer/cstyle.py:166

                                                class CStyleLanguage(Renderer):                                                                                                                          # renderer/cstyle.py:10
                                                  # returns a str expression of the casted xs with the given type                                                                                        # renderer/cstyle.py:36
                                                  def render_cast(self, x:str, var_dtype:DType, bitcast=False) -> str:
                                                    if bitcast: return f"(*(({self.buffer_prefix}{self.render_dtype(var_dtype)}*)&{x}))"                                                                 # renderer/cstyle.py:37
                                                    return f"({self.render_dtype(var_dtype)})({x})"                                                                                                      # renderer/cstyle.py:38

                                              if child_count[u] <= 1: r[u] = val                                                                                                                         # renderer/cstyle.py:168
                                              else: kk(f"{self.render_dtype(dtype)} {ssa('cast',u)} = {val};")                                                                                           # renderer/cstyle.py:169

                                              kk(f"{r[src[0]]} = {r[src[1]]};")                                                                                                                          # renderer/cstyle.py:158

                                              r[u] = r[src[0]]                                                                                                                                           # renderer/cstyle.py:159

                                    def flops_mem(uops:List[UOp], ignore_indexing=False) -> Tuple[sint, sint]:                                                                                           # codegen/uops.py:245
                                      flops: sint = 0                                                                                                                                              # OLD # codegen/uops.py:246
                                      mem: sint = 0                                                                                                                                                # OLD # codegen/uops.py:247
                                      mults: sint = 1                                                                                                                                              # OLD # codegen/uops.py:248
                                      mult_stack: List[sint] = []                                                                                                                                  # OLD # codegen/uops.py:249
                                      dont_count: Set[UOp] = set()                                                                                                                                 # OLD # codegen/uops.py:250
                                      if ignore_indexing:                                                                                                                                          # OLD # codegen/uops.py:251
                                        for u in uops:                                                                                                                                             # OLD # codegen/uops.py:252
                                          if u.op is UOps.LOAD:                                                                                                                                    # OLD # codegen/uops.py:253
                                            dont_count = dont_count.union(u.src[1].sparents)                                                                                                             # codegen/uops.py:254

                                            if len(u.src) > 3: dont_count = dont_count.union(u.src[2].sparents)                                                                                          # codegen/uops.py:255

                                          elif u.op is UOps.STORE:                                                                                                                                 # OLD # codegen/uops.py:256
                                          elif u.op is UOps.IF:                                                                                                                                    # OLD # codegen/uops.py:259
                                            dont_count = dont_count.union(u.src[1].sparents)                                                                                                       # OLD # codegen/uops.py:257
                                            if len(u.src) > 3: dont_count = dont_count.union(u.src[3].sparents)                                                                                    # OLD # codegen/uops.py:258
                                      for u in uops:                                                                                                                                               # OLD # codegen/uops.py:261
                                        if u.op is UOps.RANGE:                                                                                                                                     # OLD # codegen/uops.py:262
                                        elif u.op is UOps.ENDRANGE:                                                                                                                                # OLD # codegen/uops.py:265
                                        elif u.op is UOps.SPECIAL:                                                                                                                                 # OLD # codegen/uops.py:267
                                        elif u.op is UOps.LOAD:                                                                                                                                    # OLD # codegen/uops.py:269
                                          assert u.dtype is not None                                                                                                                                     # codegen/uops.py:270
                                          mem += u.dtype.itemsize * mults                                                                                                                                # codegen/uops.py:271

                                    class CStyleLanguage(Renderer):                                                                                                                                      # renderer/cstyle.py:10
                                      def render(self, name:str, uops:List[UOp]) -> str:                                                                                                                 # renderer/cstyle.py:95
                                        kernel = []                                                                                                                                                # OLD # renderer/cstyle.py:96
                                        bufs: Dict[UOp, Tuple[str, Tuple[DType, bool]]] = {}                                                                                                       # OLD # renderer/cstyle.py:97
                                        depth = 1                                                                                                                                                  # OLD # renderer/cstyle.py:98
                                        def kk(s): kernel.append("  "*depth+s)                                                                                                                     # OLD # renderer/cstyle.py:99
                                        c: DefaultDict[str, int] = defaultdict(int)                                                                                                                # OLD # renderer/cstyle.py:101
                                        r: Dict[UOp, str] = {}                                                                                                                                     # OLD # renderer/cstyle.py:102
                                        def ssa(prefix:str, u:Optional[UOp]=None):                                                                                                                 # OLD # renderer/cstyle.py:104
                                        child_count = Counter(v for ru in uops for v in ru.src)                                                                                                    # OLD # renderer/cstyle.py:111
                                        seen_vars = set()                                                                                                                                          # OLD # renderer/cstyle.py:113
                                        for u in uops:                                                                                                                                             # OLD # renderer/cstyle.py:114
                                          uop,dtype,src,args = u.op,u.dtype,u.src,u.arg                                                                                                            # OLD # renderer/cstyle.py:115
                                          if uop is UOps.IF:                                                                                                                                       # OLD # renderer/cstyle.py:117
                                          elif uop is UOps.BARRIER: kk(self.barrier)                                                                                                               # OLD # renderer/cstyle.py:120
                                          elif uop in {UOps.ENDRANGE, UOps.ENDIF}:                                                                                                                 # OLD # renderer/cstyle.py:121
                                          elif uop is UOps.STORE:                                                                                                                                  # OLD # renderer/cstyle.py:124
                                            assert dtype is not None, f"None dtype for uop {uop}"                                                                                                  # OLD # renderer/cstyle.py:131
                                            if uop is UOps.RANGE:                                                                                                                                  # OLD # renderer/cstyle.py:132
                                            elif uop is UOps.ALU:                                                                                                                                  # OLD # renderer/cstyle.py:135
                                            elif uop is UOps.SPECIAL:                                                                                                                              # OLD # renderer/cstyle.py:144
                                            elif uop is UOps.DEFINE_VAR:                                                                                                                           # OLD # renderer/cstyle.py:147
                                              assert args.expr not in seen_vars, f"duplicate variable {args.expr}"                                                                                       # renderer/cstyle.py:148
                                              seen_vars.add(args.expr)                                                                                                                                   # renderer/cstyle.py:149
                                              bufs[u] = (args.expr, (dtype,False))                                                                                                                       # renderer/cstyle.py:150
                                              r[u] = args.expr                                                                                                                                           # renderer/cstyle.py:151

                                    class Kernel:                                                                                                                                                        # codegen/kernel.py:54
                                      def hand_coded_optimizations(self) -> Kernel:                                                                                                                      # codegen/kernel.py:491
                                        self.required_optimizations()                                                                                                                              # OLD # codegen/kernel.py:492
                                        MV_BLOCKSIZE, MV_THREADS_PER_ROW, MV_ROWS_PER_THREAD = getenv("MV_BLOCKSIZE", 4), getenv("MV_THREADS_PER_ROW", 8), getenv("MV_ROWS_PER_THREAD", 4)         # OLD # codegen/kernel.py:495
                                        if self.opts.has_local and getenv("MV",1) != 0 and (MV_BLOCKSIZE > 1 or MV_THREADS_PER_ROW > 1 or MV_ROWS_PER_THREAD > 1) and  \                           # OLD # codegen/kernel.py:496
                                            self.reduceop is not None and self.reduceop.op is ReduceOps.SUM and len(self.full_shape) >= 2 and self.opts.has_shared and \
                                            (mulop:=self.reduceop.src[0]).op is BinaryOps.MUL and mulop.src[0].op is BufferOps.LOAD and mulop.src[1].op is BufferOps.LOAD:
                                        if self.opts.has_local and self.opts.has_shared and all_int(self.sts[0].shape[:self.first_reduce]):                                                        # OLD # codegen/kernel.py:512
                                        for buf_index,buf in enumerate(self.bufs):                                                                                                                 # OLD # codegen/kernel.py:531
                                          unit_stride_axes_mul_4 = [i for i in self.sts[buf_index].unit_stride_axes(ignore_valid=True) if self.sts[buf_index].shape[i]%4 == 0]                     # OLD # codegen/kernel.py:532
                                          if buf.dtype.__class__ is ImageDType:                                                                                                                    # OLD # codegen/kernel.py:533
                                        if self.group_for_reduces: return self                                                                                                                     # OLD # codegen/kernel.py:542
                                        to_upcast: List[int] = []                                                                                                                                  # OLD # codegen/kernel.py:551
                                        for axis in range(self.first_reduce):                                                                                                                      # OLD # codegen/kernel.py:553
                                          if isinstance(self.full_shape[axis], int) and self.full_shape[axis] <= 7 and any(st.axis_is_masked(axis) for st in self.sts) and \                       # OLD # codegen/kernel.py:556
                                            prod(self.full_shape[self.first_upcast:]) * prod(self.full_shape[j] for j in to_upcast) * self.full_shape[axis] <= 7 * 7:
                                        for axis in to_upcast[::-1]: self.apply_opt(Opt(OptOps.UPCAST, axis, 0))                                                                                   # OLD # codegen/kernel.py:560
                                        upcasted_axis = set()                                                                                                                                      # OLD # codegen/kernel.py:563
                                        while prod(self.sts[0].shape[:self.first_reduce]) >= 1024:                                                                                                 # OLD # codegen/kernel.py:564
                                        if self.first_reduce < self.first_upcast and (prod(self.full_shape[self.first_upcast:]) <= 4 or not any(r for _,_,r in self.upcasted_axis(self.full_buf_index))) and (self.upcasted == 0 or prod(self.full_shape[-self.upcasted:]) < 64):  # noqa: E501 # OLD # codegen/kernel.py:578
                                          if (s:=self.full_unupcasted_shape[-1]) <= 32 and isinstance(s, int):  # NOTE: cannot loop unroll symbolic axis                                           # OLD # codegen/kernel.py:579
                                            self.apply_opt(Opt(OptOps.UNROLL, len(self.full_unupcasted_shape)-1-self.first_reduce, 0))                                                                   # codegen/kernel.py:580

                                            if self.first_reduce < self.first_upcast and s <= 3 and (s2:=self.full_unupcasted_shape[-1]) <= 3 and isinstance(s2, int):                                   # codegen/kernel.py:582

                                    @dataclass(frozen=True)                                                                                                                                              # shape/shapetracker.py:10
                                    class ShapeTracker:
                                      def axis_is_masked(self, axis:int) -> bool:                                                                                                                        # shape/shapetracker.py:93
                                        _, valid = self.expr_idxs()                                                                                                                                      # shape/shapetracker.py:94

                                        return f'idx{axis}' in [v.expr for v in valid.vars()]                                                                                                            # shape/shapetracker.py:95

                                    class Kernel:                                                                                                                                                        # codegen/kernel.py:54
                                      def hand_coded_optimizations(self) -> Kernel:                                                                                                                      # codegen/kernel.py:491
                                        self.required_optimizations()                                                                                                                              # OLD # codegen/kernel.py:492
                                        MV_BLOCKSIZE, MV_THREADS_PER_ROW, MV_ROWS_PER_THREAD = getenv("MV_BLOCKSIZE", 4), getenv("MV_THREADS_PER_ROW", 8), getenv("MV_ROWS_PER_THREAD", 4)         # OLD # codegen/kernel.py:495
                                        if self.opts.has_local and getenv("MV",1) != 0 and (MV_BLOCKSIZE > 1 or MV_THREADS_PER_ROW > 1 or MV_ROWS_PER_THREAD > 1) and  \                           # OLD # codegen/kernel.py:496
                                            self.reduceop is not None and self.reduceop.op is ReduceOps.SUM and len(self.full_shape) >= 2 and self.opts.has_shared and \
                                            (mulop:=self.reduceop.src[0]).op is BinaryOps.MUL and mulop.src[0].op is BufferOps.LOAD and mulop.src[1].op is BufferOps.LOAD:
                                        if self.opts.has_local and self.opts.has_shared and all_int(self.sts[0].shape[:self.first_reduce]):                                                        # OLD # codegen/kernel.py:512
                                        for buf_index,buf in enumerate(self.bufs):                                                                                                                 # OLD # codegen/kernel.py:531
                                          unit_stride_axes_mul_4 = [i for i in self.sts[buf_index].unit_stride_axes(ignore_valid=True) if self.sts[buf_index].shape[i]%4 == 0]                     # OLD # codegen/kernel.py:532
                                          if buf.dtype.__class__ is ImageDType:                                                                                                                    # OLD # codegen/kernel.py:533
                                        if self.group_for_reduces: return self                                                                                                                     # OLD # codegen/kernel.py:542
                                        to_upcast: List[int] = []                                                                                                                                  # OLD # codegen/kernel.py:551
                                        for axis in range(self.first_reduce):                                                                                                                      # OLD # codegen/kernel.py:553
                                          if isinstance(self.full_shape[axis], int) and self.full_shape[axis] <= 7 and any(st.axis_is_masked(axis) for st in self.sts) and \                       # OLD # codegen/kernel.py:556
                                            prod(self.full_shape[self.first_upcast:]) * prod(self.full_shape[j] for j in to_upcast) * self.full_shape[axis] <= 7 * 7:
                                            if DEBUG >= 4: print(f"upcasting masked axis : {axis}")                                                                                                      # codegen/kernel.py:558

                                            to_upcast.append(axis)                                                                                                                                       # codegen/kernel.py:559

                                    # @dataclass(frozen=True, init=False, repr=False, eq=False)                                                                                                          # dtype.py:31
                                    class PtrDType(DType):
                                      def __eq__(self, dt): return self.priority==dt.priority and self.itemsize==dt.itemsize and self.name==dt.name and self.count==dt.count                             # dtype.py:34

                                      if start_pos > 0:                                                                                                                                                  # test.py:46
                                        keys = xk                                                                                                                                                        # test.py:50
                                        values = xv                                                                                                                                                      # test.py:51
                                      xq, keys, values = xq.transpose(1, 2), keys.transpose(1, 2), values.transpose(1, 2)                                                                                # test.py:53

                                      return self.c_proj(xq.scaled_dot_product_attention(keys, values, mask).transpose(1, 2).reshape(bsz, seqlen, self.dim))                                             # test.py:54

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def scaled_dot_product_attention(self, key:Tensor, value:Tensor, attn_mask:Optional[Tensor]=None,                                                                  # tensor.py:2880
                                                                       dropout_p:float=0.0, is_causal:bool=False) -> Tensor:
                                        assert all_int(self.shape), f"does not support symbolic shape {self.shape}"                                                                                      # tensor.py:2897

                                        if is_causal: attn_mask = Tensor.ones(self.shape[-2], key.shape[-2], requires_grad=False, device=self.device).tril(0).cast(dtypes.bool)                          # tensor.py:2898
                                        if attn_mask is not None and attn_mask.dtype == dtypes.bool: attn_mask = (attn_mask == 0).where(-float("inf"), 0)                                                # tensor.py:2899

                                        qk = self.matmul(key.transpose(-2,-1), acc_dtype=least_upper_dtype(self.dtype, key.dtype, dtypes.float32)) / math.sqrt(self.shape[-1])                           # tensor.py:2900

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def matmul(self, x:Tensor, reverse=False, acc_dtype:Optional[DTypeLike]=None) -> Tensor:                                                                         # tensor.py:1844
                                          return x.dot(self, acc_dtype=acc_dtype) if reverse else self.dot(x, acc_dtype=acc_dtype)                                                                       # tensor.py:1857

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __truediv__(self, x) -> Tensor: return self.div(x)                                                                                                           # tensor.py:2742

                                        return ((qk+attn_mask) if attn_mask is not None else qk).softmax(-1).cast(self.dtype).dropout(dropout_p) @ value                                                 # tensor.py:2901

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def softmax(self, axis=-1):                                                                                                                                      # tensor.py:1510
                                          _, e, ss = self._softmax(axis)                                                                                                                                 # tensor.py:1530

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def _softmax(self, axis):                                                                                                                                      # tensor.py:1505
                                            m = self - self.max(axis=axis, keepdim=True)                                                                                                                 # tensor.py:1506

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def max(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):                                                                                 # tensor.py:1339
                                              return self._reduce(F.Max, axis, keepdim)                                                                                                                  # tensor.py:1360

                                            class Max(Function):                                                                                                                                         # function.py:164
                                              def forward(self, x:LazyBuffer, axis:Tuple[int, ...]) -> LazyBuffer:                                                                                       # function.py:165
                                                self.x, self.ret, self.axis = x, x.r(ReduceOps.MAX, axis), axis                                                                                          # function.py:166

                                                return self.ret                                                                                                                                          # function.py:167

                                            e = m.exp()                                                                                                                                                  # tensor.py:1507

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def exp(self):                                                                                                                                               # tensor.py:2025
                                              return F.Exp.apply(self.cast(least_upper_float(self.dtype)))                                                                                               # tensor.py:2035

                                            class Exp(Function):                                                                                                                                         # function.py:63
                                              def forward(self, x:LazyBuffer) -> LazyBuffer:                                                                                                             # function.py:64
                                                self.ret = x.e(BinaryOps.MUL, x.const(1/math.log(2))).e(UnaryOps.EXP2)                                                                                   # function.py:65

                                                return self.ret                                                                                                                                          # function.py:66

                                            return m, e, e.sum(axis=axis, keepdim=True)                                                                                                                  # tensor.py:1508

                                          return e.div(ss)                                                                                                                                               # tensor.py:1531

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def dropout(self, p=0.5) -> Tensor:                                                                                                                              # tensor.py:2850
                                          if not Tensor.training or p == 0: return self                                                                                                                  # tensor.py:2866

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __matmul__(self, x) -> Tensor: return self.matmul(x)                                                                                                         # tensor.py:2743

                                  class Buffer:                                                                                                                                                          # device.py:53
                                    def __del__(self):                                                                                                                                                   # device.py:101
                                      if not hasattr(self, '_buf'): return                                                                                                                         # OLD # device.py:102
                                      if self._base is None:                                                                                                                                       # OLD # device.py:103
                                        if not self.device.startswith("DISK"): GlobalCounters.mem_used -= self.nbytes                                                                                    # device.py:104

                                        self.allocator.free(self._buf, self.nbytes, self.options)                                                                                                        # device.py:105

                                          class LRUAllocator(Allocator):  # pylint: disable=abstract-method                                                                                              # device.py:144
                                            def free(self, opaque:Any, size:int, options:Optional[BufferOptions]=None):                                                                                  # device.py:160
                                              if getenv("LRU", 1) and (options is None or not options.nolru): self.cache[(size, options)].append(opaque)                                                 # device.py:161

                              class Tensor:                                                                                                                                                              # tensor.py:92
                                def float(self) -> Tensor:                                                                                                                                               # tensor.py:3002
                                  return self.cast(dtypes.float32)                                                                                                                                       # tensor.py:3015

                                return (h + self.mlp(self.ln_2(h)))                                                                                                                                      # test.py:73

                                  class FeedForward:                                                                                                                                                     # test.py:56
                                    def __call__(self, x:Tensor) -> Tensor:                                                                                                                              # test.py:61
                                      return self.c_proj(self.c_fc(x).gelu())                                                                                                                            # test.py:62

                                    class Tensor:                                                                                                                                                        # tensor.py:92
                                      def gelu(self):                                                                                                                                                    # tensor.py:2377
                                        return 0.5 * self * (1 + (math.sqrt(2 / math.pi) * (self + 0.044715 * self ** 3)).tanh())                                                                        # tensor.py:2388

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def __pow__(self, x) -> Tensor: return self.pow(x)                                                                                                               # tensor.py:2741

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def pow(self, x:Union[Tensor, ConstType], reverse=False) -> Tensor:                                                                                            # tensor.py:2644
                                            x = self._to_const_val(x)                                                                                                                                    # tensor.py:2659

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def _to_const_val(self, x:Union[Tensor, ConstType]) -> Union[Tensor, ConstType]:                                                                             # tensor.py:2484
                                              return x.lazydata.base.arg if isinstance(x, Tensor) and isinstance(x.lazydata, LazyBuffer) and x.lazydata.is_unrealized_unmasked_const() \                 # tensor.py:2485
                                                and not x.requires_grad and self._broadcasted(x)[0].shape == self.shape else x

                                            if not isinstance(x, Tensor) and not reverse:                                                                                                                # tensor.py:2660
                                              if x < 0: return self.reciprocal().pow(-x)                                                                                                                 # tensor.py:2662
                                              if x == 0: return 1 + self * 0                                                                                                                             # tensor.py:2663
                                              if int(x - 0.5) + 0.5 == x: return self.pow(int(x - 0.5)) * self.sqrt()                                                                                    # tensor.py:2664
                                              if int(x) == x: return self.pow(x // 2).square() * (1 if x % 2 == 0 else self)                                                                             # tensor.py:2665

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def e(self, op:Union[MetaOps, UnaryOps, BinaryOps, TernaryOps], *in_srcs:LazyBuffer, arg:Optional[Any]=None) -> LazyBuffer:                                  # lazy.py:137
                                              srcs: List[LazyBuffer] = []                                                                                                                          # OLD # lazy.py:138
                                              for s in (self,)+in_srcs:                                                                                                                            # OLD # lazy.py:139
                                                if s == s.base and s.base.contiguous_child and (root:=s.base.contiguous_child[0]()) is not None:                                                   # OLD # lazy.py:140
                                                  srcs.append(s)                                                                                                                                   # OLD # lazy.py:143
                                              assert all_same(dts:=[x.dtype.scalar() for x in (srcs[1:] if op is TernaryOps.WHERE else srcs)]), f"all dtypes must match {dts} on {op}"             # OLD # lazy.py:144
                                              assert all_same([x.shape for x in srcs]), f"all shapes must be the same {[x.shape for x in srcs]}"                                                   # OLD # lazy.py:145
                                              if op is TernaryOps.WHERE: assert srcs[0].dtype == dtypes.bool, "TernaryOps.WHERE must have the first arg be bool"                                   # OLD # lazy.py:146
                                              if op is UnaryOps.NEG: assert srcs[0].dtype != dtypes.bool, "UnaryOps.NEG does not accept dtype bool"                                                # OLD # lazy.py:147
                                              out_dtype = dtypes.bool if op in (BinaryOps.CMPLT, BinaryOps.CMPNE) else srcs[-1].dtype                                                              # OLD # lazy.py:149
                                              if op in python_alu and all(s.is_unrealized_unmasked_const() for s in srcs):                                                                         # OLD # lazy.py:152
                                              if op is UnaryOps.NEG and self.base.op is UnaryOps.NEG and self.base.realized is None: return self.base.srcs[0]                                      # OLD # lazy.py:154
                                              if op in BinaryOps:                                                                                                                                  # OLD # lazy.py:155
                                                x, y = self, in_srcs[0]                                                                                                                            # OLD # lazy.py:156
                                                if op is BinaryOps.ADD:                                                                                                                            # OLD # lazy.py:157
                                                if op is BinaryOps.MUL:                                                                                                                            # OLD # lazy.py:160
                                                  if x.is_unrealized_unmasked_const() and (val := x.base.arg) in (1, 0, -1):                                                                       # OLD # lazy.py:161
                                                  if y.is_unrealized_unmasked_const() and (val := y.base.arg) in (1, 0, -1):                                                                       # OLD # lazy.py:163
                                                    return x if val == 1 else x.const(0) if val == 0 else x.e(UnaryOps.NEG)                                                                              # lazy.py:164

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def __radd__(self, x) -> Tensor: return self.add(x, True)                                                                                                    # tensor.py:2750

                                          class Tensor:                                                                                                                                                  # tensor.py:92
                                            def square(self):                                                                                                                                            # tensor.py:2164
                                              return self*self                                                                                                                                           # tensor.py:2173

                                          class LazyBuffer:                                                                                                                                              # lazy.py:26
                                            def e(self, op:Union[MetaOps, UnaryOps, BinaryOps, TernaryOps], *in_srcs:LazyBuffer, arg:Optional[Any]=None) -> LazyBuffer:                                  # lazy.py:137
                                              srcs: List[LazyBuffer] = []                                                                                                                          # OLD # lazy.py:138
                                              for s in (self,)+in_srcs:                                                                                                                            # OLD # lazy.py:139
                                                if s == s.base and s.base.contiguous_child and (root:=s.base.contiguous_child[0]()) is not None:                                                   # OLD # lazy.py:140
                                                  srcs.append(s)                                                                                                                                   # OLD # lazy.py:143
                                              assert all_same(dts:=[x.dtype.scalar() for x in (srcs[1:] if op is TernaryOps.WHERE else srcs)]), f"all dtypes must match {dts} on {op}"             # OLD # lazy.py:144
                                              assert all_same([x.shape for x in srcs]), f"all shapes must be the same {[x.shape for x in srcs]}"                                                   # OLD # lazy.py:145
                                              if op is TernaryOps.WHERE: assert srcs[0].dtype == dtypes.bool, "TernaryOps.WHERE must have the first arg be bool"                                   # OLD # lazy.py:146
                                              if op is UnaryOps.NEG: assert srcs[0].dtype != dtypes.bool, "UnaryOps.NEG does not accept dtype bool"                                                # OLD # lazy.py:147
                                              out_dtype = dtypes.bool if op in (BinaryOps.CMPLT, BinaryOps.CMPNE) else srcs[-1].dtype                                                              # OLD # lazy.py:149
                                              if op in python_alu and all(s.is_unrealized_unmasked_const() for s in srcs):                                                                         # OLD # lazy.py:152
                                              if op is UnaryOps.NEG and self.base.op is UnaryOps.NEG and self.base.realized is None: return self.base.srcs[0]                                      # OLD # lazy.py:154
                                              if op in BinaryOps:                                                                                                                                  # OLD # lazy.py:155
                                                x, y = self, in_srcs[0]                                                                                                                            # OLD # lazy.py:156
                                                if op is BinaryOps.ADD:                                                                                                                            # OLD # lazy.py:157
                                                if op is BinaryOps.MUL:                                                                                                                            # OLD # lazy.py:160
                                                  if x.is_unrealized_unmasked_const() and (val := x.base.arg) in (1, 0, -1):                                                                       # OLD # lazy.py:161
                                                    return y if val == 1 else y.const(0) if val == 0 else y.e(UnaryOps.NEG)                                                                              # lazy.py:162

                                      class Tensor:                                                                                                                                                      # tensor.py:92
                                        def tanh(self):                                                                                                                                                  # tensor.py:2293
                                          return 2.0 * ((2.0 * self).sigmoid()) - 1.0                                                                                                                    # tensor.py:2303

                                        class Tensor:                                                                                                                                                    # tensor.py:92
                                          def sigmoid(self):                                                                                                                                             # tensor.py:2058
                                            return F.Sigmoid.apply(self.cast(least_upper_float(self.dtype)))                                                                                             # tensor.py:2068

                                          # NOTE: the implicit derivative of sigmoid is not stable                                                                                                       # function.py:81
                                          # https://towardsdatascience.com/derivative-of-the-sigmoid-function-536880cf918e
                                          # TODO: have the backend automatically find this
                                          class Sigmoid(Function):
                                            def forward(self, x:LazyBuffer) -> LazyBuffer:                                                                                                               # function.py:82
                                              self.ret = x.const(1).e(BinaryOps.ADD, x.e(BinaryOps.MUL, x.const(-1/math.log(2))).e(UnaryOps.EXP2)).e(UnaryOps.RECIP)                                     # function.py:83

                                              return self.ret                                                                                                                                            # function.py:84

                        @dataclass(frozen=True, eq=False)                                                                                                                                                # ops.py:55
                        class LazyOp:
                          def __eq__(self, x): return self.cached_compare(x, context={})                                                                                                                 # ops.py:65

                            @dataclass(frozen=True, eq=False)                                                                                                                                            # ops.py:55
                            class LazyOp:
                              def cached_compare(self, x, context):                                                                                                                                      # ops.py:59
                                if id(self) == id(x): return True                                                                                                                                        # ops.py:60
                                if self.op != x.op or self.arg != x.arg or len(self.src) != len(x.src): return False                                                                                     # ops.py:61
                                if (key := (id(self), id(x))) in context: return context[key]                                                                                                            # ops.py:62
                                ret = context[key] = all(a.cached_compare(b, context) for a,b in zip(self.src, x.src))                                                                                   # ops.py:63

                              @dataclass(frozen=True, eq=False)                                                                                                                                          # ops.py:55
                              class LazyOp:
                                def cached_compare(self, x, context):                                                                                                                                    # ops.py:59
                                  if id(self) == id(x): return True                                                                                                                                # OLD # ops.py:60
                                  if self.op != x.op or self.arg != x.arg or len(self.src) != len(x.src): return False                                                                             # OLD # ops.py:61
                                  if (key := (id(self), id(x))) in context: return context[key]                                                                                                    # OLD # ops.py:62
                                  ret = context[key] = all(a.cached_compare(b, context) for a,b in zip(self.src, x.src))                                                                           # OLD # ops.py:63
                                  return ret                                                                                                                                                             # ops.py:64

                        @dataclass(frozen=True)                                                                                                                                                          # shape/view.py:85
                        class View:
                          @functools.lru_cache(maxsize=None)  # pylint: disable=method-cache-max-size-none                                                                                               # shape/view.py:136
                          def __add__(self, vm1:View) -> Optional[View]:
                            vm2 = self                                                                                                                                                             # OLD # shape/view.py:137
                            if vm2.contiguous: return vm1                                                                                                                                          # OLD # shape/view.py:138
                            if vm1.contiguous and vm1.shape == vm2.shape: return vm2                                                                                                               # OLD # shape/view.py:139
                            if vm1.contiguous and vm1.size() == vm2.size() and (ret := vm2.reshape(vm1.shape)) is not None: return ret                                                             # OLD # shape/view.py:140
                            if vm1.mask:                                                                                                                                                           # OLD # shape/view.py:141
                            origin = un1d(vm2.shape, vm1.offset)                                                                                                                                   # OLD # shape/view.py:147
                            terms: List[List[Tuple[int, sint]]] = [[] for _ in origin]                                                                                                             # OLD # shape/view.py:148
                            strides: List[sint] = [0] * len(vm1.shape)                                                                                                                             # OLD # shape/view.py:149
                            for d1, st in enumerate(vm1.strides):                                                                                                                                  # OLD # shape/view.py:150
                              if st == 0: continue                                                                                                                                                 # OLD # shape/view.py:151
                              for d2, (o, s1) in enumerate(zip(origin, un1d(vm2.shape, vm1.offset + st))):                                                                                         # OLD # shape/view.py:152
                                if (s1 := s1 - o) == 0: continue                                                                                                                                   # OLD # shape/view.py:153
                                terms[d2].append((d1, s1))                                                                                                                                         # OLD # shape/view.py:154
                                strides[d1] += s1 * vm2.strides[d2]                                                                                                                                # OLD # shape/view.py:155
                            idxs: List[Node] = [Variable(f"idx{i}", 0, s-1) for i,s in enumerate(vm1.shape)]                                                                                       # OLD # shape/view.py:159
                            merged_size, merged_term = 1, NumNode(0)                                                                                                                               # OLD # shape/view.py:160
                            extents: List[Tuple[sint, Node]] = []                                                                                                                                  # OLD # shape/view.py:161
                            for term, s, o in zip(reversed(terms), reversed(vm2.shape), reversed(origin)):                                                                                         # OLD # shape/view.py:162
                              merged_term += Variable.sum([idxs[d1] * (s1 * merged_size) for d1, s1 in term]) + o * merged_size                                                                    # OLD # shape/view.py:163
                              merged_size *= s                                                                                                                                                     # OLD # shape/view.py:164
                              if not (merged_term >= merged_size) and not (merged_term < 0):                                                                                                       # OLD # shape/view.py:165
                                extents.append((merged_size, merged_term))                                                                                                                         # OLD # shape/view.py:166
                                merged_size, merged_term = 1, NumNode(0)                                                                                                                           # OLD # shape/view.py:167
                            if merged_term: return None                                                                                                                                            # OLD # shape/view.py:168
                            if (vm2_shape := tuple(s for s,_ in reversed(extents))) != vm2.shape:                                                                                                  # OLD # shape/view.py:169
                              return (reshaped_vm2 := vm2.reshape(vm2_shape)) and reshaped_vm2 + vm1                                                                                                     # shape/view.py:170

                        class Node:                                                                                                                                                                      # shape/symbolic.py:10
                          def __mod__(self, b:Union[Node,int]):                                                                                                                                          # shape/symbolic.py:69
                            if isinstance(b, Node):                                                                                                                                                # OLD # shape/symbolic.py:70
                            assert b > 0                                                                                                                                                           # OLD # shape/symbolic.py:75
                            if b == 1: return NumNode(0)                                                                                                                                           # OLD # shape/symbolic.py:76
                            if isinstance(self.max, int) and isinstance(self.min, int):                                                                                                            # OLD # shape/symbolic.py:77
                              if (self.min//b) == (self.max//b): return self - (b*(self.min//b))                                                                                                   # OLD # shape/symbolic.py:78
                              if self.min < 0: return (self - ((self.min//b)*b)) % b                                                                                                                     # shape/symbolic.py:79
                            return create_node(ModNode(self, b))                                                                                                                                         # shape/symbolic.py:80

                          class ModNode(OpNode):                                                                                                                                                         # shape/symbolic.py:218
                            def get_bounds(self) -> Tuple[int, sint]:                                                                                                                                    # shape/symbolic.py:224
                              assert self.a.min >= 0 and isinstance(self.b, int)                                                                                                                         # shape/symbolic.py:225
                              if self.a.max - self.a.min >= self.b or (self.a.min != self.a.max and self.a.min%self.b >= self.a.max%self.b): return (0, self.b-1)                                        # shape/symbolic.py:226

                        def mod_folding(x:UOp, c:int) -> Optional[UOp]:                                                                                                                                  # codegen/uopgraph.py:85
                          remainder, something_changed = [], False                                                                                                                                       # codegen/uopgraph.py:88
                          for u in _get_add_chain(x):                                                                                                                                                    # codegen/uopgraph.py:89

                            def _get_add_chain(x:UOp):                                                                                                                                                   # codegen/uopgraph.py:80
                              if x.op is UOps.ALU and x.arg is BinaryOps.ADD:                                                                                                                            # codegen/uopgraph.py:81
                              else: yield x                                                                                                                                                              # codegen/uopgraph.py:83

                            if u.op is UOps.CONST and (r:=u.arg%c) != u.arg:                                                                                                                             # codegen/uopgraph.py:90
                            elif u.op is UOps.ALU and u.arg is BinaryOps.MUL:                                                                                                                            # codegen/uopgraph.py:93
                              if (u0:=u.src[0]).op is UOps.CONST and (r:=u0.arg%c) != u0.arg:                                                                                                            # codegen/uopgraph.py:94
                              elif (u1:=u.src[1]).op is UOps.CONST and (r:=u1.arg%c) != u1.arg:                                                                                                          # codegen/uopgraph.py:97
                              else: remainder.append(u)                                                                                                                                                  # codegen/uopgraph.py:100
                          if not something_changed: return None                                                                                                                                          # codegen/uopgraph.py:102

                        def _get_add_chain(x:UOp):                                                                                                                                                       # codegen/uopgraph.py:80
                          if x.op is UOps.ALU and x.arg is BinaryOps.ADD:                                                                                                                          # OLD # codegen/uopgraph.py:81
                            for s in x.src: yield from _get_add_chain(s)                                                                                                                                 # codegen/uopgraph.py:82

                        def mod_folding(x:UOp, c:int) -> Optional[UOp]:                                                                                                                                  # codegen/uopgraph.py:85
                          remainder, something_changed = [], False                                                                                                                                 # OLD # codegen/uopgraph.py:88
                          for u in _get_add_chain(x):                                                                                                                                              # OLD # codegen/uopgraph.py:89
                            if u.op is UOps.CONST and (r:=u.arg%c) != u.arg:                                                                                                                       # OLD # codegen/uopgraph.py:90
                            elif u.op is UOps.ALU and u.arg is BinaryOps.MUL:                                                                                                                      # OLD # codegen/uopgraph.py:93
                              if (u0:=u.src[0]).op is UOps.CONST and (r:=u0.arg%c) != u0.arg:                                                                                                      # OLD # codegen/uopgraph.py:94
                              elif (u1:=u.src[1]).op is UOps.CONST and (r:=u1.arg%c) != u1.arg:                                                                                                    # OLD # codegen/uopgraph.py:97
                              else: remainder.append(u)                                                                                                                                            # OLD # codegen/uopgraph.py:100
                            else: remainder.append(u)                                                                                                                                                    # codegen/uopgraph.py:101

                        def type_verify(uops):                                                                                                                                                           # codegen/uops.py:200
                          for u in uops:                                                                                                                                                           # OLD # codegen/uops.py:201
                            uop, arg, src, dtype = u.op, u.arg, u.src, u.dtype                                                                                                                     # OLD # codegen/uops.py:202
                            if uop in {UOps.CONST, UOps.DEFINE_ACC}:                                                                                                                               # OLD # codegen/uops.py:203
                            if uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}: assert arg is None and dtype is not None # type is the output type, not an arg                                    # OLD # codegen/uops.py:208
                            if uop is UOps.CAST: assert dtype.count == 1 and len(src) == 1                                                                                                         # OLD # codegen/uops.py:209
                            if uop is UOps.VECTORIZE:                                                                                                                                              # OLD # codegen/uops.py:210
                            if uop is UOps.LOAD and len(src) > 3 and src[3].op is UOps.ALU: assert src[3].dtype == dtypes.bool and src[2].dtype == dtype                                           # OLD # codegen/uops.py:213
                            if uop is UOps.GEP: assert dtype == src[0].dtype.scalar(), f"GEP of {src[0].dtype=} should be {src[0].dtype.scalar()} != {dtype}"                                      # OLD # codegen/uops.py:214
                            if uop is UOps.STORE:                                                                                                                                                  # OLD # codegen/uops.py:215
                            if uop is UOps.ALU:                                                                                                                                                    # OLD # codegen/uops.py:218
                              if uop is UOps.DEFINE_ACC:                                                                                                                                           # OLD # codegen/uops.py:204
                              assert dtype is not None and type(arg) is type(dtypes.as_const(arg, dtype)), f"type of {arg=} does not match {dtype}"                                                # OLD # codegen/uops.py:207
                              if arg in UnaryOps: assert dtype == src[0].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=}"                                                                # OLD # codegen/uops.py:219
                              elif arg in {BinaryOps.CMPLT, BinaryOps.CMPNE}:                                                                                                                      # OLD # codegen/uops.py:220
                              elif arg is BinaryOps.IDIV:                                                                                                                                          # OLD # codegen/uops.py:223
                              elif arg in {BinaryOps.SHL, BinaryOps.SHR}:                                                                                                                          # OLD # codegen/uops.py:226
                              elif arg in BinaryOps: assert dtype == src[0].dtype == src[1].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=} != {src[1].dtype=}"                          # OLD # codegen/uops.py:229
                                assert dtypes.is_int(src[0].dtype) and dtypes.is_int(src[1].dtype), f"input dtype is not int {src[0].dtype=}, {src[1].dtype=}"                                     # OLD # codegen/uops.py:224
                                assert dtypes.is_int(dtype), f"output dtype is not int {dtype=}"                                                                                                   # OLD # codegen/uops.py:225
                              assert dtype is None, f"{uop} dtype must be None, got {dtype}"                                                                                                       # OLD # codegen/uops.py:216
                              if len(src) == 4: assert src[3].dtype == dtypes.bool, f"gate dtype mismatch {src[3].dtype} != {dtypes.bool}"                                                         # OLD # codegen/uops.py:217
                                assert dtype is not None and src[0].dtype == dtype.scalar(), f"type of {src[0].dtype=} must be a scalar {dtype.scalar()}"                                          # OLD # codegen/uops.py:205
                                arg = src[0].arg                                                                                                                                                   # OLD # codegen/uops.py:206
                                assert dtype == (bd:=(dtypes.bool.vec(dtype.count) if dtype.count != 1 else dtypes.bool)), f"{arg} output dtype mismatch {dtype=} != {bd=}"                        # OLD # codegen/uops.py:221
                                assert src[0].dtype == src[1].dtype, f"{arg} dtype mismatch {dtype=} != {src[0].dtype=} != {src[1].dtype=}"                                                        # OLD # codegen/uops.py:222
                              elif arg == TernaryOps.WHERE:                                                                                                                                              # codegen/uops.py:230
                                assert src[0].dtype == (bd:=(dtypes.bool.vec(dtype.count) if dtype.count != 1 else dtypes.bool)), \                                                                      # codegen/uops.py:231
                                  f"{arg} selector dtype mismatch {src[0].dtype=} != {bd}"
                                assert dtype == src[1].dtype == src[2].dtype, f"{arg} choice dtype mismatch {dtype=} != {src[1].dtype=} != {src[2].dtype=}"                                              # codegen/uops.py:233

                        class _MallocAllocator(LRUAllocator):                                                                                                                                            # device.py:164
                          def offset(self, buf, size:int, offset:int): return from_mv(self.as_buffer(buf)[offset:offset+size])                                                                           # device.py:169

                        def xexp2(d:UOp) -> UOp:                                                                                                                                                         # codegen/transcendental.py:230
                          assert d.dtype in TRANSCENDENTAL_SUPPORTED_DTYPES                                                                                                                              # codegen/transcendental.py:235
                          fp64_p = d.dtype == dtypes.float64                                                                                                                                             # codegen/transcendental.py:236
                          x = _lazy_map_numbers(d, d.const(0.0), d.const(0.0), d.const(0.0), d)                                                                                                          # codegen/transcendental.py:238

                            def _lazy_map_numbers(x:UOp, inf:UOp, _inf:UOp, nan:UOp, ratio:UOp):                                                                                                         # codegen/transcendental.py:8
                              return x.ne(math.inf).where(x.ne(x).where(nan, x.ne(-math.inf).where(ratio, _inf)), inf)                                                                                   # codegen/transcendental.py:10

                          q = rintk(x)                                                                                                                                                                   # codegen/transcendental.py:239

                            def rintk(d:UOp) -> UOp:                                                                                                                                                     # codegen/transcendental.py:37
                              assert d.dtype in TRANSCENDENTAL_SUPPORTED_DTYPES                                                                                                                          # codegen/transcendental.py:39
                              return_t = {dtypes.float64: dtypes.int64, dtypes.float32: dtypes.int32, dtypes.float16: dtypes.int16}[d.dtype]                                                             # codegen/transcendental.py:40
                              return (d + d.lt(0.0).where(d.const(-0.5), d.const(0.5))).cast(return_t)                                                                                                   # codegen/transcendental.py:41

                          s = x - q.cast(x.dtype)                                                                                                                                                        # codegen/transcendental.py:241

                          if fp64_p:                                                                                                                                                                     # codegen/transcendental.py:243
                            u = polyN(s.const(0.1535920892e-3), s, [0.1339262701e-2, 0.9618384764e-2, 0.5550347269e-1, 0.2402264476e+0, 0.6931471825e+0, 0.1000000000e+1])                               # codegen/transcendental.py:246

                              def polyN(u:UOp, s:UOp, coeffs:List[float]) -> UOp: return functools.reduce(lambda u,c: mla(u, s, u.const(c)), coeffs, u)                                                  # codegen/transcendental.py:91

                                def mla(x:UOp, y:UOp, z:UOp) -> UOp: return x * y + z                                                                                                                    # codegen/transcendental.py:89

                          u = ldexp2k(u, q) # u*2^q                                                                                                                                                      # codegen/transcendental.py:247

                            def ldexp2k(d:UOp, e:UOp) -> UOp:                                                                                                                                            # codegen/transcendental.py:67
                              assert d.dtype in TRANSCENDENTAL_SUPPORTED_DTYPES and e.dtype in (dtypes.int16, dtypes.int32, dtypes.int64)                                                                # codegen/transcendental.py:69
                              return (d * pow2if(shr(e, 1), d.dtype)) * pow2if(e - shr(e, 1), d.dtype)                                                                                                   # codegen/transcendental.py:70

                                # **** utils ****                                                                                                                                                        # codegen/transcendental.py:34
                                def shr(x:UOp, y:int) -> UOp: return x // (2**y)

                                def pow2if(q:UOp, float_dtype:DType):                                                                                                                                    # codegen/transcendental.py:43
                                  assert q.dtype in (dtypes.int64, dtypes.int32, dtypes.int16, dtypes.uint32)                                                                                            # codegen/transcendental.py:45
                                  final_dtype = {dtypes.int64: dtypes.float64, dtypes.int32: dtypes.float32, dtypes.int16: float_dtype, dtypes.uint32: dtypes.float32}[q.dtype]                          # codegen/transcendental.py:46
                                  return shl((q + (exponent_bias(final_dtype)+1)), significand_bits(final_dtype)).bitcast(final_dtype)                                                                   # codegen/transcendental.py:47

                                    def exponent_bias(d:DType) -> int: return {dtypes.float64: 1022, dtypes.float32: 126, dtypes.float16: 14}[d]                                                         # codegen/transcendental.py:21

                                    # *** helper functions for bit manipulation ***                                                                                                                      # codegen/transcendental.py:20
                                    def significand_bits(d:DType) -> int: return {dtypes.float64: 52, dtypes.float32: 23, dtypes.float16: 10}[d]

                                    def shl(x:UOp, y:int) -> UOp: return x * (2**y)                                                                                                                      # codegen/transcendental.py:35

                                    @dataclass(frozen=True, eq=False)                                                                                                                                    # codegen/uops.py:32
                                    class UOp:
                                      def bitcast(self, dtype=None): return type(self)(UOps.BITCAST, dtype, (self,))                                                                                     # codegen/uops.py:50

                          upper = {dtypes.float64: 1024, dtypes.float32: 128, dtypes.float16: 23.0}[x.dtype]                                                                                             # codegen/transcendental.py:248
                          lower = {dtypes.float64: -2000, dtypes.float32: -150, dtypes.float16: -22}[x.dtype]                                                                                            # codegen/transcendental.py:249
                          u = x.ne(upper).where(u, x.const(math.inf))                                                                                                                                    # codegen/transcendental.py:251

                          u = x.lt(upper).where(u, x.const(math.inf))                                                                                                                                    # codegen/transcendental.py:252

                          u = x.lt(lower).where(x.const(0.0), u)                                                                                                                                         # codegen/transcendental.py:254

                          u = x.lt(math.inf).where(u, u.const(math.nan))                                                                                                                                 # codegen/transcendental.py:256

                          return _lazy_map_numbers(d, d.const(math.inf), d.const(0.0), d.const(math.nan), u)                                                                                             # codegen/transcendental.py:258

                        def div_folding(x:UOp, c:int) -> Optional[UOp]:                                                                                                                                  # codegen/uopgraph.py:105
                          quotient, remainder, something_changed = [], [], False                                                                                                                         # codegen/uopgraph.py:107
                          for u in _get_add_chain(x):                                                                                                                                                    # codegen/uopgraph.py:108

                            if u.op is UOps.CONST and u.arg%c == 0:                                                                                                                                      # codegen/uopgraph.py:109
                            elif u.op is UOps.ALU and u.arg is BinaryOps.MUL:                                                                                                                            # codegen/uopgraph.py:112
                            else: remainder.append(u)                                                                                                                                                    # codegen/uopgraph.py:120
                          if not something_changed: return None                                                                                                                                          # codegen/uopgraph.py:121

                        class CStyleLanguage(Renderer):                                                                                                                                                  # renderer/cstyle.py:10
                          def render(self, name:str, uops:List[UOp]) -> str:                                                                                                                             # renderer/cstyle.py:95
                            kernel = []                                                                                                                                                            # OLD # renderer/cstyle.py:96
                            bufs: Dict[UOp, Tuple[str, Tuple[DType, bool]]] = {}                                                                                                                   # OLD # renderer/cstyle.py:97
                            depth = 1                                                                                                                                                              # OLD # renderer/cstyle.py:98
                            def kk(s): kernel.append("  "*depth+s)                                                                                                                                 # OLD # renderer/cstyle.py:99
                            c: DefaultDict[str, int] = defaultdict(int)                                                                                                                            # OLD # renderer/cstyle.py:101
                            r: Dict[UOp, str] = {}                                                                                                                                                 # OLD # renderer/cstyle.py:102
                            def ssa(prefix:str, u:Optional[UOp]=None):                                                                                                                             # OLD # renderer/cstyle.py:104
                            child_count = Counter(v for ru in uops for v in ru.src)                                                                                                                # OLD # renderer/cstyle.py:111
                            seen_vars = set()                                                                                                                                                      # OLD # renderer/cstyle.py:113
                            for u in uops:                                                                                                                                                         # OLD # renderer/cstyle.py:114
                              uop,dtype,src,args = u.op,u.dtype,u.src,u.arg                                                                                                                        # OLD # renderer/cstyle.py:115
                              if uop is UOps.IF:                                                                                                                                                   # OLD # renderer/cstyle.py:117
                              elif uop is UOps.BARRIER: kk(self.barrier)                                                                                                                           # OLD # renderer/cstyle.py:120
                              elif uop in {UOps.ENDRANGE, UOps.ENDIF}:                                                                                                                             # OLD # renderer/cstyle.py:121
                              elif uop is UOps.STORE:                                                                                                                                              # OLD # renderer/cstyle.py:124
                                assert dtype is not None, f"None dtype for uop {uop}"                                                                                                              # OLD # renderer/cstyle.py:131
                                if uop is UOps.RANGE:                                                                                                                                              # OLD # renderer/cstyle.py:132
                                elif uop is UOps.ALU:                                                                                                                                              # OLD # renderer/cstyle.py:135
                                elif uop is UOps.SPECIAL:                                                                                                                                          # OLD # renderer/cstyle.py:144
                                elif uop is UOps.DEFINE_VAR:                                                                                                                                       # OLD # renderer/cstyle.py:147
                                elif uop is UOps.LOAD:                                                                                                                                             # OLD # renderer/cstyle.py:152
                                elif uop is UOps.PHI:                                                                                                                                              # OLD # renderer/cstyle.py:157
                                elif uop in {UOps.CAST, UOps.BITCAST, UOps.VECTORIZE}:                                                                                                             # OLD # renderer/cstyle.py:160
                                    precast = ssa('precast')                                                                                                                                             # renderer/cstyle.py:163

                                    kk(f"{self.render_dtype(cast(DType, src[0].dtype))} {precast} = {r[src[0]]};")                                                                                       # renderer/cstyle.py:164

                                    val = self.render_cast(precast, dtype, bitcast=True)                                                                                                                 # renderer/cstyle.py:165

                        class MulNode(OpNode):                                                                                                                                                           # shape/symbolic.py:197
                          def __floordiv__(self, b: Union[Node, int], factoring_allowed=False): # NOTE: mod negative isn't handled right                                                                 # shape/symbolic.py:199
                            if self.b % b == 0: return self.a*(self.b//b)                                                                                                                                # shape/symbolic.py:200

                          logits = self.lm_head(self.ln_f(h))                                                                                                                                            # test.py:103

                          if logits.shape[1] == 0:                                                                                                                                                       # test.py:105

                            logits = logits[:, -1, :]                                                                                                                                                    # test.py:109

                        class Tensor:                                                                                                                                                                    # tensor.py:92
                          # Supported Indexing Implementations:                                                                                                                                          # tensor.py:926
                          #   1. Int indexing (no copy)
                          #     - for all dims where there's int, shrink -> reshape
                          #     - negative indices are taken relative to the end of the sequence, so X[-2] returns the 2nd-to-last element
                          #     - X = Tensor.rand(4,5,9); X[2,-2] shrinks the Tensor to X.shrink(((2, 3), (3, 4), (0, 9))) -> X.shape=(1,1,9)
                          #     - Then we reshape (collapse) the int dim away such that for X: (1,1,9) -> (9,)
                          #   2. Slice indexing (no copy)
                          #     - for all dims where slice is start:end:stride, shrink -> Optional[flip] -> pad -> reshape -> shrink
                          #     - first shrink the Tensor to X.shrink(((start, end),))
                          #     - then we apply stride through Optional[flip] -> pad -> reshape -> shrink
                          #       - flip where dim value is negative
                          #       - pad on dims to be multiple of strides, such that reshaping [dim_size_padded] -> [dim_size_padded // stride, stride] is possible
                          #       - shrink [dim_size_padded // stride, stride] -> [dim_size_padded // stride, 1]
                          #       - reshape [dim_size_padded // stride, 1] -> [dim_size_padded // stride] and now you have your stride
                          #   3. None indexing (no copy)
                          #     - reshape (inject) a dim at the dim where there's None
                          #   4. Tensor indexing (copy)
                          #     - use Tensor.arange == tensor_index to create masks for dims with Tensors (adds a dim for each mask)
                          #     - combine masks together with mul
                          #     - apply mask to self by mask * self
                          #     - sum reduce away the extra dims added from creating masks
                          # Tiny Things:
                          #   1. Supported indices: Union[int, slice, Tensor, None, List, Tuple, Ellipsis]
                          #     - for any list, List[Union[List, Tuple, int]], must have homogeneous shape
                          #     - for any tuple, Tuple[Union[List, Tuple, int]], must have homogeneous shape
                          #   2. Bool indexing is not supported
                          #   3. Out of bounds Tensor indexing results in 0
                          #     - e.g: Tensor([1, 2, 3])[Tensor([4, 3, 2])] -> [0, 0, 3] index 4 and 3 are out of bounds
                          def __getitem__(self, indices) -> Tensor:
                            if isinstance(indices, list) and all_int(indices): indices = [Tensor(indices, self.device, requires_grad=False)]                                                       # OLD # tensor.py:929
                            elif isinstance(indices, (tuple, list)):                                                                                                                               # OLD # tensor.py:930
                            else: indices = [indices]                                                                                                                                              # OLD # tensor.py:932
                            indices = [self._to_const_val(i) if isinstance(i, Tensor) and i.shape == () else i for i in indices]                                                                   # OLD # tensor.py:935
                            indices = [i.to(self.device) if isinstance(i, Tensor) else i for i in indices]                                                                                         # OLD # tensor.py:937
                            ellipsis_idx = [dim for dim, i in enumerate(indices) if i is Ellipsis]                                                                                                 # OLD # tensor.py:940
                            fill_idx = ellipsis_idx[0] if ellipsis_idx else len(indices)                                                                                                           # OLD # tensor.py:941
                            num_indices = len(indices) - len(ellipsis_idx) - sum(1 for i in indices if i is None)                                                                                  # OLD # tensor.py:942
                            indices[fill_idx:fill_idx+1] = [slice(None)] * (self.ndim - num_indices)                                                                                               # OLD # tensor.py:943
                            type_dim: DefaultDict[Union[type, None], List[int]] = defaultdict(list)                                                                                                # OLD # tensor.py:946
                            type_dim[None] = [dim for dim, i in enumerate(indices) if i is None]                                                                                                   # OLD # tensor.py:949
                            tensor_dims = [dim for dim, i in enumerate(indices) if isinstance(i, Tensor)]                                                                                          # OLD # tensor.py:950
                            indices_filtered = [i for i in indices if i is not None]                                                                                                               # OLD # tensor.py:951
                            for dim,i in enumerate(indices_filtered): type_dim[type(i)].append(dim)                                                                                                # OLD # tensor.py:952
                            if len(ellipsis_idx) > 1: raise IndexError("indices can only have a single ellipsis ('...')")                                                                          # OLD # tensor.py:954
                            for index_type in type_dim:                                                                                                                                            # OLD # tensor.py:955
                              if index_type not in [None, int, slice, Tensor]: raise IndexError(f"{index_type=} not supported")                                                                    # OLD # tensor.py:956
                            if num_indices > self.ndim: raise IndexError(f"too many {num_indices=} for {self.ndim=}")                                                                              # OLD # tensor.py:957
                            for dim in type_dim[int]:                                                                                                                                              # OLD # tensor.py:962
                              if (index := indices_filtered[dim]) >= (size := self.shape[dim]) or index < -size:                                                                                         # tensor.py:963

                              indices_filtered[dim] = ((index, index+1), 1) if index >= 0 else ((size+index, size+index+1), 1)                                                                           # tensor.py:965

                          if temperature < 1e-6:                                                                                                                                                         # test.py:111
                            ret = (logits / temperature).softmax().multinomial()                                                                                                                         # test.py:114

                        class Tensor:                                                                                                                                                                    # tensor.py:92
                          def multinomial(self:Tensor, num_samples:int = 1, replacement:bool = False) -> Tensor:                                                                                         # tensor.py:725
                            assert 1 <= self.ndim <= 2 and num_samples > 0, f"{self.ndim=} must be 1 or 2 dim, {num_samples=} must be positive"                                                          # tensor.py:726

                            assert replacement or num_samples == 1, "no replacement only supports num_samples = 1"                                                                                       # tensor.py:727
                            weight = self.unsqueeze(0) if self.ndim == 1 else self                                                                                                                       # tensor.py:728

                            cdf = (cw := weight.cumsum(1).float()) / cw[:, -1].unsqueeze(1)                                                                                                              # tensor.py:729

                          class Tensor:                                                                                                                                                                  # tensor.py:92
                            def cumsum(self, axis:int=0) -> Tensor:                                                                                                                                      # tensor.py:1863
                              axis = self._resolve_dim(axis)                                                                                                                                             # tensor.py:1877

                              if self.ndim == 0 or 0 in self.shape: return self                                                                                                                          # tensor.py:1878

                              SPLIT = 256                                                                                                                                                                # tensor.py:1881
                              if self.shape[axis] <= SPLIT*2: return self._cumsum(axis)                                                                                                                  # tensor.py:1882

                              ret = self.transpose(axis,-1).pad2d((round_up(self.shape[axis], SPLIT)-self.shape[axis], 0))                                                                               # tensor.py:1883

                                def round_up(num, amt:int): return (num+amt-1)//amt * amt                                                                                                                # helpers.py:37

                              ret = ret.unflatten(-1, (-1, SPLIT))._cumsum(-1)                                                                                                                           # tensor.py:1884

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def unflatten(self, dim:int, sizes:Tuple[int,...]):                                                                                                                        # tensor.py:1284
                                dim = self._resolve_dim(dim)                                                                                                                                             # tensor.py:1298

                                return self.reshape(self.shape[:dim] + sizes + self.shape[dim+1:])                                                                                                       # tensor.py:1299

                              base_add = ret[..., -1]._cumsum(-1, _first_zero=True)                                                                                                                      # tensor.py:1885

                            @dataclass(frozen=True)                                                                                                                                                      # shape/view.py:85
                            class View:
                              def __unsafe_resize(self, arg: Tuple[Tuple[sint, sint], ...], mask=None) -> View:                                                                                          # shape/view.py:213
                                offset = sum([s * x[0] for s, x in zip(self.strides,arg)])                                                                                                         # OLD # shape/view.py:214
                                if self.mask:                                                                                                                                                      # OLD # shape/view.py:215
                                  nmask = tuple([(max(0, min(mx-ax,ay-ax)), max(0, min(my-ax,ay-ax))) for (mx,my),(ax,ay) in zip(self.mask, arg)])                                                       # shape/view.py:217
                                  mask = tuple([(max(mx1, mx2), min(my1, my2)) for (mx1, my1), (mx2, my2) in zip(nmask, mask)]) if mask is not None else nmask                                           # shape/view.py:219

                              base_add = base_add.unsqueeze(-1).expand(*base_add.shape, ret.shape[-1])                                                                                                   # tensor.py:1886

                              return fix(ret) + fix(base_add)                                                                                                                                            # tensor.py:1888

                                  def cumsum(self, axis:int=0) -> Tensor:                                                                                                                                # tensor.py:1863
                                class Tensor:                                                                                                                                                            # tensor.py:92
                                    def fix(x:Tensor): return x.flatten(start_dim=-2)[..., -self.shape[axis]:].transpose(axis,-1)                                                                        # tensor.py:1887

                            unif_samples = Tensor.rand(num_samples, cdf.shape[0], 1, device=self.device)                                                                                                 # tensor.py:730

                            indices = (unif_samples.expand((-1, -1, cdf.shape[1])) >= cdf).sum(2).permute((1, 0))                                                                                        # tensor.py:731

                          class Tensor:                                                                                                                                                                  # tensor.py:92
                            def __ge__(self, x) -> Tensor: return (self<x).logical_not()                                                                                                                 # tensor.py:2774

                            class Tensor:                                                                                                                                                                # tensor.py:92
                              def __lt__(self, x) -> Tensor: return F.Less.apply(*self._broadcasted(x, False))                                                                                           # tensor.py:2772

                              class Less(Function):                                                                                                                                                      # function.py:98
                                def forward(self, x:LazyBuffer, y:LazyBuffer) -> LazyBuffer: return x.e(BinaryOps.CMPLT, y)                                                                              # function.py:99

                            return (indices.squeeze(0) if self.ndim == 1 else indices).cast(dtypes.int32)                                                                                                # tensor.py:732

                          return ret.flatten().realize()                                                                                                                                                 # test.py:115

                        class CustomOp(Runner):                                                                                                                                                          # engine/realize.py:105
                          def __init__(self, fxn):                                                                                                                                                       # engine/realize.py:106
                            self.fxn = fxn                                                                                                                                                               # engine/realize.py:107
                            super().__init__(self.fxn.__name__, "CUSTOM", 0, 0)                                                                                                                          # engine/realize.py:108

                        class CustomOp(Runner):                                                                                                                                                          # engine/realize.py:105
                          def __call__(self, rawbufs:List[Buffer], var_vals:Dict[Variable, int], wait=False): self.fxn(*rawbufs)                                                                         # engine/realize.py:109

                            # TODO: eventually remove this                                                                                                                                               # tensor.py:3152
                            def custom_random(out:Buffer):
                              Tensor._seed += 1                                                                                                                                                          # tensor.py:3153
                              rng = np.random.default_rng(Tensor._seed)                                                                                                                                  # tensor.py:3154
                              if out.dtype == dtypes.half: rng_np_buffer = (rng.integers(low=0, high=2047, size=out.size) / 2048).astype(np.half, copy=False)                                            # tensor.py:3155
                              else: rng_np_buffer = rng.random(size=out.size, dtype=np.float32).astype(dtype=_to_np_dtype(out.dtype), copy=False)                                                        # tensor.py:3156

                              out.copyin(rng_np_buffer.data)                                                                                                                                             # tensor.py:3157

                        class AndNode(RedNode):                                                                                                                                                          # shape/symbolic.py:291
                          def get_bounds(self) -> Tuple[int, sint]: return min([x.min for x in self.nodes]), max([x.max for x in self.nodes])                                                            # shape/symbolic.py:292

                        def div_folding(x:UOp, c:int) -> Optional[UOp]:                                                                                                                                  # codegen/uopgraph.py:105
                          quotient, remainder, something_changed = [], [], False                                                                                                                   # OLD # codegen/uopgraph.py:107
                          for u in _get_add_chain(x):                                                                                                                                              # OLD # codegen/uopgraph.py:108
                            if u.op is UOps.CONST and u.arg%c == 0:                                                                                                                                # OLD # codegen/uopgraph.py:109
                            elif u.op is UOps.ALU and u.arg is BinaryOps.MUL:                                                                                                                      # OLD # codegen/uopgraph.py:112
                              if (u0:=u.src[0]).op is UOps.CONST and u0.arg%c == 0:                                                                                                                      # codegen/uopgraph.py:113
                              elif (u1:=u.src[1]).op is UOps.CONST and u1.arg%c == 0:                                                                                                                    # codegen/uopgraph.py:116
                              else: remainder.append(u)                                                                                                                                                  # codegen/uopgraph.py:119

        class Tensor:                                                                                                                                                                                    # tensor.py:92
          def numpy(self) -> np.ndarray:                                                                                                                                                                 # tensor.py:289
            if self.dtype == dtypes.bfloat16: return self.float().numpy()                                                                                                                                # tensor.py:298

            assert _to_np_dtype(self.dtype) is not None, f"no np dtype for {self.dtype}"                                                                                                                 # tensor.py:299

            assert all_int(self.shape), f"no data if shape is symbolic, {self.shape=}"                                                                                                                   # tensor.py:300

            return np.frombuffer(self._data(), dtype=_to_np_dtype(self.dtype)).reshape(self.shape)                                                                                                       # tensor.py:301

          class Tensor:                                                                                                                                                                                  # tensor.py:92
            def _data(self) -> memoryview:                                                                                                                                                               # tensor.py:242
              if 0 in self.shape: return memoryview(bytearray(0))                                                                                                                                        # tensor.py:243

              cpu = self.cast(self.dtype.scalar()).contiguous().to("CLANG").realize()                                                                                                                    # tensor.py:245

            class LazyBuffer:                                                                                                                                                                            # lazy.py:26
              def contiguous(self, allow_buffer_view=True):                                                                                                                                              # lazy.py:87
                if not self.st.contiguous or self.size != self.base.size or self.is_unrealized_const():                                                                                            # OLD # lazy.py:88
                  ret = self.e(MetaOps.VIEW) if allow_buffer_view and self.can_view() else self.e(MetaOps.CONTIGUOUS)                                                                              # OLD # lazy.py:89
                  if (sti := self.st.invert(self.base.shape)) is not None: self.base.contiguous_child = ref(ret), sti                                                                              # OLD # lazy.py:90
                  return ret                                                                                                                                                                       # OLD # lazy.py:91
                self.base.forced_realize = True                                                                                                                                                          # lazy.py:92

                return self                                                                                                                                                                              # lazy.py:93

              buf = cast(Buffer, cast(LazyBuffer, cpu.lazydata).base.realized)                                                                                                                           # tensor.py:246

              if self.device != "CLANG": buf.options = BufferOptions(nolru=True)                                                                                                                         # tensor.py:247

              return buf.as_buffer(allow_zero_copy=True if self.device != "CLANG" else False)                                                                                                            # tensor.py:248

            class _MallocAllocator(LRUAllocator):                                                                                                                                                        # device.py:164
              def copyout(self, dest:memoryview, src): ctypes.memmove(from_mv(dest), src, len(dest))                                                                                                     # device.py:168

            start_pos = len(toks[0])                                                                                                                                                                     # test.py:172
            for i,t in enumerate(tok): toks[i].append(t)                                                                                                                                                 # test.py:173

                tokens = Variable("tokens", 0, VOCAB_SIZE).bind(toks[0][start_pos])                                                                                                                      # test.py:168

        class TinyJit(Generic[ReturnType]):                                                                                                                                                              # engine/jit.py:186
          def __call__(self, *args, **kwargs) -> ReturnType:                                                                                                                                             # engine/jit.py:222
            input_buffers, var_vals, names, st_vars_dtype_device = _prepare_jit_inputs(args, kwargs)                                                                                                     # engine/jit.py:223

              def _prepare_jit_inputs(args, kwargs):                                                                                                                                                     # engine/jit.py:172
                input_tensors: List[Tuple[Union[int, str], Tensor]] = \                                                                                                                                  # engine/jit.py:173
                  [(cast(Union[int, str], name),t) for name,t in itertools.chain(enumerate(args), sorted(kwargs.items())) if t.__class__ is Tensor]
                if input_tensors: Tensor.realize(*[t for _,t in input_tensors])                                                                                                                          # engine/jit.py:175
                names: List[Union[int, str]] = [name for name,_ in input_tensors]                                                                                                                        # engine/jit.py:176
                lbs: List[LazyBuffer] = flatten([t.lazydata.lbs for _,t in input_tensors])                                                                                                               # engine/jit.py:177

                st_varvals_dtype_device = [(*lb.st.unbind(), lb.dtype, lb.device) for lb in lbs]                                                                                                         # engine/jit.py:178
                input_buffers: List[Buffer] = [lb.base.realized for lb in lbs if lb.base.realized is not None]                                                                                           # engine/jit.py:179
                assert len(set(input_buffers)) == len(input_buffers), "duplicate inputs to JIT"                                                                                                          # engine/jit.py:180
                var_vals: Dict[Variable, int] = merge_dicts([varvals for _,varvals,_,_ in st_varvals_dtype_device] + \                                                                                   # engine/jit.py:181
                                                            [dict(v.unbind() for v in itertools.chain(args, kwargs.values()) if isinstance(v, Variable))])

                st_vars_dtype_device = [(x[0], tuple(sorted(x[1].keys(), key=lambda v: v.expr)), x[2], x[3]) for x in st_varvals_dtype_device]                                                           # engine/jit.py:183
                return input_buffers, var_vals, names, st_vars_dtype_device                                                                                                                              # engine/jit.py:184

            if not JIT or self.cnt == 0:                                                                                                                                                                 # engine/jit.py:224

              assert self.fxn is not None                                                                                                                                                                # engine/jit.py:226
              with Context(BEAM=0 if getenv("IGNORE_JIT_FIRST_BEAM") else BEAM.value):                                                                                                                   # engine/jit.py:227

                class Context(contextlib.ContextDecorator):                                                                                                                                              # helpers.py:81
                  def __init__(self, **kwargs): self.kwargs = kwargs                                                                                                                                     # helpers.py:83

                class Context(contextlib.ContextDecorator):                                                                                                                                              # helpers.py:81
                  def __enter__(self):                                                                                                                                                                   # helpers.py:84
                    Context.stack[-1] = {k:o.value for k,o in ContextVar._cache.items()} # Store current state.                                                                                          # helpers.py:85
                    for k,v in self.kwargs.items(): ContextVar._cache[k].value = v # Update to new temporary state.                                                                                      # helpers.py:86
                    Context.stack.append(self.kwargs) # Store the temporary state so we know what to undo later.                                                                                         # helpers.py:87

                ret = self.fxn(*args, **kwargs)                                                                                                                                                          # engine/jit.py:228

                  class Transformer:                                                                                                                                                                     # test.py:75
                    def forward(self, tokens:Union[Tensor,Variable], start_pos:Variable, temperature:float=0.0):                                                                                         # test.py:85
                      if not hasattr(self, 'allpos'): self.allpos = Tensor.arange(0, MAX_CONTEXT).reshape(1, -1).realize()                                                                         # OLD # test.py:86
                      if isinstance(tokens, Variable):                                                                                                                                             # OLD # test.py:87
                        seqlen = 1                                                                                                                                                                       # test.py:88
                        tok_emb = self.wte.weight.shrink(((tokens, tokens+1), None))                                                                                                                     # test.py:89

                    class MulNode(OpNode):                                                                                                                                                               # shape/symbolic.py:197
                      def substitute(self, var_vals: Mapping[Variable, Union[NumNode, Variable]]) -> Node:                                                                                               # shape/symbolic.py:208
                        return self.a.substitute(var_vals) * (self.b if isinstance(self.b, int) else self.b.substitute(var_vals))                                                                        # shape/symbolic.py:209

                    class Kernel:                                                                                                                                                                        # codegen/kernel.py:54
                      def hand_coded_optimizations(self) -> Kernel:                                                                                                                                      # codegen/kernel.py:491
                        self.required_optimizations()                                                                                                                                              # OLD # codegen/kernel.py:492
                        MV_BLOCKSIZE, MV_THREADS_PER_ROW, MV_ROWS_PER_THREAD = getenv("MV_BLOCKSIZE", 4), getenv("MV_THREADS_PER_ROW", 8), getenv("MV_ROWS_PER_THREAD", 4)                         # OLD # codegen/kernel.py:495
                        if self.opts.has_local and getenv("MV",1) != 0 and (MV_BLOCKSIZE > 1 or MV_THREADS_PER_ROW > 1 or MV_ROWS_PER_THREAD > 1) and  \                                           # OLD # codegen/kernel.py:496
                            self.reduceop is not None and self.reduceop.op is ReduceOps.SUM and len(self.full_shape) >= 2 and self.opts.has_shared and \
                            (mulop:=self.reduceop.src[0]).op is BinaryOps.MUL and mulop.src[0].op is BufferOps.LOAD and mulop.src[1].op is BufferOps.LOAD:
                        if self.opts.has_local and self.opts.has_shared and all_int(self.sts[0].shape[:self.first_reduce]):                                                                        # OLD # codegen/kernel.py:512
                        for buf_index,buf in enumerate(self.bufs):                                                                                                                                 # OLD # codegen/kernel.py:531
                          unit_stride_axes_mul_4 = [i for i in self.sts[buf_index].unit_stride_axes(ignore_valid=True) if self.sts[buf_index].shape[i]%4 == 0]                                     # OLD # codegen/kernel.py:532
                          if buf.dtype.__class__ is ImageDType:                                                                                                                                    # OLD # codegen/kernel.py:533
                        if self.group_for_reduces: return self                                                                                                                                     # OLD # codegen/kernel.py:542
                        to_upcast: List[int] = []                                                                                                                                                  # OLD # codegen/kernel.py:551
                        for axis in range(self.first_reduce):                                                                                                                                      # OLD # codegen/kernel.py:553
                          if isinstance(self.full_shape[axis], int) and self.full_shape[axis] <= 7 and any(st.axis_is_masked(axis) for st in self.sts) and \                                       # OLD # codegen/kernel.py:556
                            prod(self.full_shape[self.first_upcast:]) * prod(self.full_shape[j] for j in to_upcast) * self.full_shape[axis] <= 7 * 7:
                        for axis in to_upcast[::-1]: self.apply_opt(Opt(OptOps.UPCAST, axis, 0))                                                                                                   # OLD # codegen/kernel.py:560
                        upcasted_axis = set()                                                                                                                                                      # OLD # codegen/kernel.py:563
                        while prod(self.sts[0].shape[:self.first_reduce]) >= 1024:                                                                                                                 # OLD # codegen/kernel.py:564
                        if self.first_reduce < self.first_upcast and (prod(self.full_shape[self.first_upcast:]) <= 4 or not any(r for _,_,r in self.upcasted_axis(self.full_buf_index))) and (self.upcasted == 0 or prod(self.full_shape[-self.upcasted:]) < 64):  # noqa: E501 # OLD # codegen/kernel.py:578
                          if (s:=self.full_unupcasted_shape[-1]) <= 32 and isinstance(s, int):  # NOTE: cannot loop unroll symbolic axis                                                           # OLD # codegen/kernel.py:579
                            for splits in [4]:                                                                                                                                                     # OLD # codegen/kernel.py:585
                              if self.full_unupcasted_shape[-1]%splits == 0:                                                                                                                       # OLD # codegen/kernel.py:586
                                self.apply_opt(Opt(OptOps.UNROLL, len(self.full_unupcasted_shape)-1-self.first_reduce, splits))                                                                    # OLD # codegen/kernel.py:587
                                break                                                                                                                                                              # OLD # codegen/kernel.py:588
                        for splits in [4]:                                                                                                                                                         # OLD # codegen/kernel.py:592
                          if self.upcasted == 0 and self.full_unupcasted_shape and self.full_unupcasted_shape[-1] % splits == 0:                                                                   # OLD # codegen/kernel.py:593
                            self.apply_opt(Opt(OptOps.UPCAST, len(self.full_unupcasted_shape)-1, splits))                                                                                                # codegen/kernel.py:594

                    class Node:                                                                                                                                                                          # shape/symbolic.py:10
                      def __gt__(self, b:Union[Node,int]): return (-self) < (-b)                                                                                                                         # shape/symbolic.py:38

                    class Attention:                                                                                                                                                                     # test.py:21
                      def __call__(self, x:Tensor, start_pos:Variable, mask:Optional[Tensor]) -> Tensor:                                                                                                 # test.py:29
                        if mask is not None or start_pos.val == 0:                                                                                                                                 # OLD # test.py:30
                          start_pos = start_pos.val                                                                                                                                                # OLD # test.py:32
                        if HALF: x = x.half()                                                                                                                                                      # OLD # test.py:34
                        xqkv = self.c_attn(x)                                                                                                                                                      # OLD # test.py:35
                        xq, xk, xv = [xqkv.shrink((None, None, (i*self.dim, (i+1)*self.dim))).reshape(None, None, self.n_heads, self.head_dim) for i in range(3)]                                  # OLD # test.py:36
                        bsz, seqlen, _, _ = xq.shape                                                                                                                                               # OLD # test.py:37
                        if not hasattr(self, "cache_kv"):                                                                                                                                          # OLD # test.py:40
                          self.cache_kv = Tensor.zeros(2, bsz, MAX_CONTEXT, self.n_heads, self.head_dim, dtype=x.dtype).contiguous().realize()                                                     # OLD # test.py:41
                        self.cache_kv.shrink((None, None,(start_pos,start_pos+seqlen),None,None)).assign(Tensor.stack(xk, xv)).realize()                                                           # OLD # test.py:44
                        if start_pos > 0:                                                                                                                                                          # OLD # test.py:46
                          keys = self.cache_kv[0].shrink((None, (0, start_pos+seqlen), None, None))                                                                                                      # test.py:47

                          values = self.cache_kv[1].shrink((None, (0, start_pos+seqlen), None, None))                                                                                                    # test.py:48

                    class SumNode(RedNode):                                                                                                                                                              # shape/symbolic.py:237
                      def substitute(self, var_vals: Mapping[Variable, Union[NumNode, Variable]]) -> Node:                                                                                               # shape/symbolic.py:283
                        return Node.sum([node.substitute(var_vals) for node in self.nodes])                                                                                                              # shape/symbolic.py:284

                      class NumNode(Node):                                                                                                                                                               # shape/symbolic.py:136
                        def substitute(self, var_vals: Mapping[Variable, Union[NumNode, Variable]]) -> Node: return self                                                                                 # shape/symbolic.py:147

                    class MulNode(OpNode):                                                                                                                                                               # shape/symbolic.py:197
                      def get_bounds(self) -> Tuple[int, sint]:                                                                                                                                          # shape/symbolic.py:204
                        assert self.a.min >= 0                                                                                                                                                     # OLD # shape/symbolic.py:205
                        if isinstance(self.b, int): return (self.a.min*self.b, self.a.max*self.b) if self.b >= 0 else (self.a.max*self.b, self.a.min*self.b)                                       # OLD # shape/symbolic.py:206
                        return (self.a.min*self.b.min, self.a.max*self.b.max) if self.b.min >= 0 else (self.a.max*self.b.min, self.a.min*self.b.max)                                                     # shape/symbolic.py:207

                    class Node:                                                                                                                                                                          # shape/symbolic.py:10
                      def __str__(self): return "<"+self.key+">"                                                                                                                                         # shape/symbolic.py:26

                    def sym_infer(a: Union[Node, int], var_vals: Optional[Dict[Variable, int]]) -> int:                                                                                                  # shape/symbolic.py:297
                      if isinstance(a, (int, float)): return a                                                                                                                                     # OLD # shape/symbolic.py:298
                      ret = a.substitute({k:NumNode(v) for k, v in var_vals.items()}) if var_vals is not None else a                                                                                     # shape/symbolic.py:299

                      assert isinstance(ret, NumNode), f"sym_infer didn't produce NumNode from {a} with {var_vals}"                                                                                      # shape/symbolic.py:300
                      return ret.b                                                                                                                                                                       # shape/symbolic.py:301

                if len(params:=get_parameters(ret)): Tensor.realize(params[0], *params[1:])                                                                                                              # engine/jit.py:229

                  def get_parameters(obj) -> List[Tensor]:                                                                                                                                               # nn/state.py:87
                    return list(get_state_dict(obj).values())                                                                                                                                            # nn/state.py:99

                  class Context(contextlib.ContextDecorator):                                                                                                                                            # helpers.py:81
                    def __exit__(self, *args):                                                                                                                                                           # helpers.py:88
                      for k in Context.stack.pop(): ContextVar._cache[k].value = Context.stack[-1].get(k, ContextVar._cache[k].value)                                                                    # helpers.py:89

            self.cnt += 1                                                                                                                                                                                # engine/jit.py:276
            return ret                                                                                                                                                                                   # engine/jit.py:277

        class TinyJit(Generic[ReturnType]):                                                                                                                                                              # engine/jit.py:186
          def __call__(self, *args, **kwargs) -> ReturnType:                                                                                                                                             # engine/jit.py:222
            input_buffers, var_vals, names, st_vars_dtype_device = _prepare_jit_inputs(args, kwargs)                                                                                               # OLD # engine/jit.py:223
            if not JIT or self.cnt == 0:                                                                                                                                                           # OLD # engine/jit.py:224
              assert self.fxn is not None                                                                                                                                                          # OLD # engine/jit.py:226
              with Context(BEAM=0 if getenv("IGNORE_JIT_FIRST_BEAM") else BEAM.value):                                                                                                             # OLD # engine/jit.py:227
                ret = self.fxn(*args, **kwargs)                                                                                                                                                    # OLD # engine/jit.py:228
                if len(params:=get_parameters(ret)): Tensor.realize(params[0], *params[1:])                                                                                                        # OLD # engine/jit.py:229
            elif self.cnt == 1:                                                                                                                                                                          # engine/jit.py:230
              assert self.fxn is not None                                                                                                                                                                # engine/jit.py:232
              if capturing: raise RuntimeError(f"having TinyJit inside another TinyJit is not supported {len(capturing)=} {capturing=}")                                                                 # engine/jit.py:233
              self._jit_cache: List[ExecItem] = []                                                                                                                                                       # engine/jit.py:234
              self._buffer_replace: WeakKeyDictionary[Buffer, Buffer] = WeakKeyDictionary()                                                                                                              # engine/jit.py:235
              with Context(GRAPH=getenv("JITGRAPH", GRAPH.value), BEAM=getenv("JITBEAM", BEAM.value)):                                                                                                   # engine/jit.py:236

                capturing.append(self)                                                                                                                                                                   # engine/jit.py:237
                try:                                                                                                                                                                                     # engine/jit.py:238
                  ret = self.fxn(*args, **kwargs)                                                                                                                                                        # engine/jit.py:239

          class TinyJit(Generic[ReturnType]):                                                                                                                                                            # engine/jit.py:186
            def add(self, ei:ExecItem):                                                                                                                                                                  # engine/jit.py:202
              self._jit_cache.append(ExecItem(ei.prg, [self.add_buffer(buf) for buf in ei.bufs if buf is not None]))                                                                                     # engine/jit.py:203

            class TinyJit(Generic[ReturnType]):                                                                                                                                                          # engine/jit.py:186
              def add_buffer(self, b:Buffer) -> Buffer:                                                                                                                                                  # engine/jit.py:193
                if found:=self._buffer_replace.get(b, None): return found                                                                                                                                # engine/jit.py:194
                if b.is_allocated() or b.lb_refcount > 0: return b                                                                                                                                       # engine/jit.py:195

          class TinyJit(Generic[ReturnType]):                                                                                                                                                            # engine/jit.py:186
            def add_buffer(self, b:Buffer) -> Buffer:                                                                                                                                                    # engine/jit.py:193
              if found:=self._buffer_replace.get(b, None): return found                                                                                                                            # OLD # engine/jit.py:194
              if b.is_allocated() or b.lb_refcount > 0: return b                                                                                                                                   # OLD # engine/jit.py:195
              if b._base is not None:                                                                                                                                                                    # engine/jit.py:196
                self._buffer_replace[b] = ret = Buffer(b.device, b.size, b.dtype, options=b.options)                                                                                                     # engine/jit.py:199

              return ret                                                                                                                                                                                 # engine/jit.py:200

          class TinyJit(Generic[ReturnType]):                                                                                                                                                            # engine/jit.py:186
            def add_buffer(self, b:Buffer) -> Buffer:                                                                                                                                                    # engine/jit.py:193
              if found:=self._buffer_replace.get(b, None): return found                                                                                                                            # OLD # engine/jit.py:194
              if b.is_allocated() or b.lb_refcount > 0: return b                                                                                                                                   # OLD # engine/jit.py:195
              if b._base is not None:                                                                                                                                                              # OLD # engine/jit.py:196
                self._buffer_replace[b] = ret = Buffer(b.device, b.size, b.dtype, base=self.add_buffer(b._base), offset=b.offset)                                                                        # engine/jit.py:197

                  if len(params:=get_parameters(ret)): Tensor.realize(params[0], *params[1:])                                                                                                            # engine/jit.py:240

                finally: capturing.clear()                                                                                                                                                               # engine/jit.py:242

              jit_cache = self._jit_cache                                                                                                                                                                # engine/jit.py:243
              del self._buffer_replace, self._jit_cache                                                                                                                                                  # engine/jit.py:244
              assert len(jit_cache), "didn't JIT anything!"                                                                                                                                              # engine/jit.py:245
              if DEBUG >= 1: print(f"JIT captured {len(jit_cache)} kernels with {len(input_buffers)} inputs")                                                                                            # engine/jit.py:246

              extra_view_inputs: List[Tuple[int, int, str, int, DType]] = []                                                                                                                             # engine/jit.py:250
              for item in jit_cache:                                                                                                                                                                     # engine/jit.py:251
                for b in item.bufs:                                                                                                                                                                      # engine/jit.py:252
                  if b is not None and b._base is not None and b._base in input_buffers:                                                                                                                 # engine/jit.py:253
              noopt_buffers = {b for ji in jit_cache if isinstance(ji.prg, BufferXfer) for b in ji.bufs}                                                                                                 # engine/jit.py:259
              assigned = _internal_memory_planner([cast(List[Buffer], item.bufs) for item in jit_cache], noopt_buffers, debug_prefix="JIT ")                                                             # engine/jit.py:260

              jit_cache = [ExecItem(item.prg, [assigned.get(b,b).ensure_allocated() for b in item.bufs if b is not None]) for item in jit_cache]                                                         # engine/jit.py:261

              input_replace = get_input_replace(jit_cache, input_buffers)                                                                                                                                # engine/jit.py:263

                def get_input_replace(jit_cache: List[ExecItem], input_rawbuffers:List[Buffer]) -> Dict[Tuple[int, int], int]:                                                                           # engine/jit.py:65
                  input_replace: Dict[Tuple[int, int], int] = {}                                                                                                                                         # engine/jit.py:66
                  for j,ji in enumerate(jit_cache):                                                                                                                                                      # engine/jit.py:67
                    for i,a in enumerate(ji.bufs):                                                                                                                                                       # engine/jit.py:68
                      if a in input_rawbuffers:                                                                                                                                                          # engine/jit.py:69
                  return input_replace                                                                                                                                                                   # engine/jit.py:71

              if DEBUG >= 1 and len(set(input_replace.values())) != len(input_buffers): print("WARNING: some input tensors not found")                                                                   # engine/jit.py:264

              self.captured = CapturedJit(ret, jit_cache, input_replace, extra_view_inputs, names, st_vars_dtype_device)                                                                                 # engine/jit.py:267

                @dataclass                                                                                                                                                                               # engine/jit.py:133
                class CapturedJit(Generic[ReturnType]):
                  def __post_init__(self):                                                                                                                                                               # engine/jit.py:145
                    self._jit_cache: List[ExecItem] = self.jit_cache                                                                                                                                     # engine/jit.py:146
                    self._input_replace: Dict[Tuple[int, int], int] = self.input_replace                                                                                                                 # engine/jit.py:147
                    self._graphed = False                                                                                                                                                                # engine/jit.py:148
                    self._clear_inputs()                                                                                                                                                                 # engine/jit.py:149

                      @dataclass                                                                                                                                                                         # engine/jit.py:133
                      class CapturedJit(Generic[ReturnType]):
                        def _clear_inputs(self):                                                                                                                                                         # engine/jit.py:151
                          for (j,i) in self._input_replace.keys(): self._jit_cache[j].bufs[i] = None                                                                                                     # engine/jit.py:152

        class TinyJit(Generic[ReturnType]):                                                                                                                                                              # engine/jit.py:186
          def __call__(self, *args, **kwargs) -> ReturnType:                                                                                                                                             # engine/jit.py:222
            input_buffers, var_vals, names, st_vars_dtype_device = _prepare_jit_inputs(args, kwargs)                                                                                               # OLD # engine/jit.py:223
            if not JIT or self.cnt == 0:                                                                                                                                                           # OLD # engine/jit.py:224
              assert self.fxn is not None                                                                                                                                                          # OLD # engine/jit.py:226
              with Context(BEAM=0 if getenv("IGNORE_JIT_FIRST_BEAM") else BEAM.value):                                                                                                             # OLD # engine/jit.py:227
                ret = self.fxn(*args, **kwargs)                                                                                                                                                    # OLD # engine/jit.py:228
                if len(params:=get_parameters(ret)): Tensor.realize(params[0], *params[1:])                                                                                                        # OLD # engine/jit.py:229
            elif self.cnt >= 2:                                                                                                                                                                          # engine/jit.py:268
              assert self.captured is not None                                                                                                                                                           # engine/jit.py:270
              assert self.captured.expected_names == names, f"args mismatch in JIT: {self.captured.expected_names=} != {names}"                                                                          # engine/jit.py:271
              assert self.captured.expected_st_vars_dtype_device == st_vars_dtype_device, \                                                                                                              # engine/jit.py:272
                f"args mismatch in JIT: {self.captured.expected_st_vars_dtype_device=} != {st_vars_dtype_device=}"
              ret = self.captured(input_buffers, var_vals)                                                                                                                                               # engine/jit.py:274

                @dataclass                                                                                                                                                                               # engine/jit.py:133
                class CapturedJit(Generic[ReturnType]):
                  # jit exec                                                                                                                                                                             # engine/jit.py:155
                  def __call__(self, input_buffers:List[Buffer], var_vals:Dict[Variable, int]) -> ReturnType:
                    for idx, offset, device, size, dtype in self.extra_view_inputs:                                                                                                                      # engine/jit.py:157
                    for (j,i),input_idx in self._input_replace.items(): self._jit_cache[j].bufs[i] = input_buffers[input_idx]                                                                            # engine/jit.py:159
                    if JIT < 2 and not self._graphed:                                                                                                                                                    # engine/jit.py:162

                      class ContextVar:                                                                                                                                                                  # helpers.py:91
                        def __lt__(self, x): return self.value < x                                                                                                                                       # helpers.py:103

                      self._jit_cache = apply_graph_to_jit(self._jit_cache, input_buffers, var_vals)                                                                                                     # engine/jit.py:163

                        def apply_graph_to_jit(jit_cache: List[ExecItem], input_rawbuffers: List[Buffer], var_vals: Dict[Variable, int]) -> List[ExecItem]:                                              # engine/jit.py:19
                          max_batch_size = getenv("JIT_BATCH_SIZE", 32)                                                                                                                                  # engine/jit.py:22

                          graphed_jit_cache: List[ExecItem] = []                                                                                                                                         # engine/jit.py:23
                          current_batch: List[ExecItem] = []                                                                                                                                             # engine/jit.py:24
                          current_device: Optional[Compiled] = None                                                                                                                                      # engine/jit.py:25
                          for ji in jit_cache:                                                                                                                                                           # engine/jit.py:43
                            if ji.prg.__class__ in {EmptyOp, ViewOp}: continue                                                                                                                           # engine/jit.py:44
                            ji_graph_dev: Optional[Compiled] = None # device on which the ji will be graphed. Not graphed if None.                                                                       # engine/jit.py:45
                            if isinstance(ji.prg, CompiledRunner): ji_graph_dev = ji.prg.device                                                                                                          # engine/jit.py:46

                              class Runner:                                                                                                                                                              # engine/realize.py:67
                                @property                                                                                                                                                                # engine/realize.py:72
                                def device(self): return Device[self.dname]

                            graph_class = (ji_graph_dev.graph.func if isinstance(ji_graph_dev.graph, functools.partial) else ji_graph_dev.graph) if ji_graph_dev else None #type: ignore                 # engine/jit.py:50
                            can_be_graphed = ji_graph_dev and ji_graph_dev.graph                                                                                                                         # engine/jit.py:51
                            can_share_graph = (ji_graph_dev == current_device or (isinstance(graph_class, type) and issubclass(graph_class, MultiGraphRunner)) and                                       # engine/jit.py:52
                                               type(ji_graph_dev) is type(current_device))
                            can_extend_graph_batch = can_be_graphed and len(current_batch) < max_batch_size and can_share_graph                                                                          # engine/jit.py:54
                            if not can_extend_graph_batch and len(current_batch) > 0: flush_batch()                                                                                                      # engine/jit.py:55
                            if can_be_graphed: current_batch.append(ji)                                                                                                                                  # engine/jit.py:57
                            current_device = ji_graph_dev                                                                                                                                                # engine/jit.py:60

                              def apply_graph_to_jit(jit_cache: List[ExecItem], input_rawbuffers: List[Buffer], var_vals: Dict[Variable, int]) -> List[ExecItem]:                                        # engine/jit.py:19
                                def flush_batch():                                                                                                                                                       # engine/jit.py:27
                                  try:                                                                                                                                                                   # engine/jit.py:29
                                    if len(current_batch) <= 1 or current_device is None: raise GraphException("only one kernel doesn't graph")                                                          # engine/jit.py:30
                                    graph_runner = current_device.graph(current_batch, input_rawbuffers, var_vals)                                                                                       # engine/jit.py:31

                                      class ClangGraph(GraphRunner):                                                                                                                                     # runtime/graph/clang.py:12
                                        def __init__(self, jit_cache: List[ExecItem], input_rawbuffers: List[Buffer], var_vals: Dict[Variable, int]):                                                    # runtime/graph/clang.py:13
                                          super().__init__(jit_cache, input_rawbuffers, var_vals)                                                                                                        # runtime/graph/clang.py:14

                                            class GraphRunner(Runner):  # pylint: disable=abstract-method                                                                                                # engine/jit.py:73
                                              def __init__(self, jit_cache: List[ExecItem], input_rawbuffers: List[Buffer], var_vals: Dict[Variable, int]):                                              # engine/jit.py:74
                                                self.jit_cache = jit_cache                                                                                                                               # engine/jit.py:75
                                                self.input_replace:Dict[Tuple[int, int], int] = get_input_replace(jit_cache, input_rawbuffers)                                                           # engine/jit.py:76

                                                self.var_vals_replace:Dict[int, List[int]] = {}                                                                                                          # engine/jit.py:77
                                                self.launch_dims_replace:Dict[int, Tuple[Optional[int], Optional[int]]] = {}                                                                             # engine/jit.py:78
                                                op_estimate: sint = 0                                                                                                                                    # engine/jit.py:80
                                                mem_estimate: sint = 0                                                                                                                                   # engine/jit.py:81
                                                lds_estimate: sint = 0                                                                                                                                   # engine/jit.py:82
                                                self.vars = sorted(var_vals.keys(), key=lambda v: v.expr)                                                                                                # engine/jit.py:84
                                                self.symbolic_dims = dedup([tuple(d) for ji in jit_cache if isinstance(ji.prg, CompiledRunner) and (d:=ji.prg.p.local_size) and not all_int(d)] +        # engine/jit.py:85
                                                                           [tuple(d) for ji in jit_cache if isinstance(ji.prg, CompiledRunner) and (d:=ji.prg.p.global_size) and not all_int(d)])

                                                for j,ji in enumerate(jit_cache):                                                                                                                        # engine/jit.py:89
                                                  op_estimate += ji.prg.op_estimate                                                                                                                      # engine/jit.py:90
                                                  mem_estimate += ji.prg.mem_estimate                                                                                                                    # engine/jit.py:91
                                                  lds_estimate += ji.prg.lds_estimate                                                                                                                    # engine/jit.py:92
                                                  if isinstance(ji.prg, CompiledRunner):                                                                                                                 # engine/jit.py:93
                                                    if ji.prg.p.vars: self.var_vals_replace[j] = [self.vars.index(v) for v in ji.prg.p.vars]                                                             # engine/jit.py:94

                                                    global_dim_idx, local_dim_idx = find_symbolic_dim(ji.prg.p.global_size), find_symbolic_dim(ji.prg.p.local_size)                                      # engine/jit.py:96

                                                        def __init__(self, jit_cache: List[ExecItem], input_rawbuffers: List[Buffer], var_vals: Dict[Variable, int]):                                    # engine/jit.py:74
                                                      class GraphRunner(Runner):  # pylint: disable=abstract-method                                                                                      # engine/jit.py:73
                                                          def find_symbolic_dim(dim): return self.symbolic_dims.index(tuple(dim)) if dim is not None and tuple(dim) in self.symbolic_dims else None      # engine/jit.py:87

                                                    if global_dim_idx is not None or local_dim_idx is not None: self.launch_dims_replace[j] = (global_dim_idx, local_dim_idx)                            # engine/jit.py:97

                                                super().__init__(colored(f"<batched {len(self.jit_cache)}>", "cyan"), jit_cache[0].prg.dname.split(":")[0],                                              # engine/jit.py:99
                                                                 op_estimate, mem_estimate, lds_estimate)

                                          if not all(isinstance(ji.prg, CompiledRunner) for ji in jit_cache): raise GraphException                                                                       # runtime/graph/clang.py:15
                                          prgs = '\n'.join(dedup([cast(CompiledRunner, ji.prg).p.src for ji in jit_cache]))                                                                              # runtime/graph/clang.py:17

                                          args = [f"{render_dtype(x.dtype)}* arg{i}" for i,x in enumerate(input_rawbuffers)]                                                                             # runtime/graph/clang.py:18
                                          args += sorted([f"int {v.expr}" for v in var_vals])                                                                                                            # runtime/graph/clang.py:19
                                          code = ["void batched("+','.join(args)+") {"]                                                                                                                  # runtime/graph/clang.py:20
                                          for ji in jit_cache:                                                                                                                                           # runtime/graph/clang.py:21
                                            args = []                                                                                                                                                    # runtime/graph/clang.py:22
                                            for buf in ji.bufs:                                                                                                                                          # runtime/graph/clang.py:23
                                              assert buf is not None                                                                                                                                     # runtime/graph/clang.py:24
                                              if buf in input_rawbuffers:                                                                                                                                # runtime/graph/clang.py:25
                                                args.append(f"({render_dtype(buf.dtype)}*)0x{ctypes.addressof(buf._buf):X}")                                                                             # runtime/graph/clang.py:28

                                            args += [x.expr for x in cast(CompiledRunner, ji.prg).p.vars]                                                                                                # runtime/graph/clang.py:29
                                            code.append(f"  {cast(CompiledRunner, ji.prg).p.function_name}({','.join(args)});")                                                                          # runtime/graph/clang.py:30

                                          code.append("}")                                                                                                                                               # runtime/graph/clang.py:31
                                          if DEBUG >= 4: print("\n".join(code))                                                                                                                          # runtime/graph/clang.py:32

                                          compiler = Device["CLANG"].compiler                                                                                                                            # runtime/graph/clang.py:33

                                          assert compiler is not None                                                                                                                                    # runtime/graph/clang.py:34
                                          self.clprg = ClangProgram("batched", compiler.compile(prgs+"\n"+"\n".join(code))) # no point in caching the pointers                                           # runtime/graph/clang.py:35

                                    for (j,i) in graph_runner.input_replace.keys(): graph_runner.jit_cache[j].bufs[i] = None                                                                             # engine/jit.py:33
                                    graphed_jit_cache.append(ExecItem(graph_runner, cast(List[Optional[Buffer]], input_rawbuffers)))                                                                     # engine/jit.py:34
                                    max_batch_size *= 2                                                                                                                                                  # engine/jit.py:35
                                    if DEBUG >= 2: print(f"JIT GRAPHing batch with {len(current_batch)} kernels on device {current_device}")                                                             # engine/jit.py:36

                                  current_batch = []                                                                                                                                                     # engine/jit.py:40
                                  current_device = None                                                                                                                                                  # engine/jit.py:41

                            elif isinstance(ji.prg, BufferXfer) and ji.bufs[0] and ji.bufs[0].device.split(":", 1)[0] in {"CUDA", "NV", "AMD"}:                                                          # engine/jit.py:47

                            graph_class = (ji_graph_dev.graph.func if isinstance(ji_graph_dev.graph, functools.partial) else ji_graph_dev.graph) if ji_graph_dev else None #type: ignore           # OLD # engine/jit.py:50
                            can_be_graphed = ji_graph_dev and ji_graph_dev.graph                                                                                                                   # OLD # engine/jit.py:51
                            can_share_graph = (ji_graph_dev == current_device or (isinstance(graph_class, type) and issubclass(graph_class, MultiGraphRunner)) and                                 # OLD # engine/jit.py:52
                                               type(ji_graph_dev) is type(current_device))
                            can_extend_graph_batch = can_be_graphed and len(current_batch) < max_batch_size and can_share_graph                                                                    # OLD # engine/jit.py:54
                            if not can_extend_graph_batch and len(current_batch) > 0: flush_batch()                                                                                                # OLD # engine/jit.py:55
                            if can_be_graphed: current_batch.append(ji)                                                                                                                            # OLD # engine/jit.py:57
                            else: graphed_jit_cache.append(ji)                                                                                                                                           # engine/jit.py:58

                            current_device = ji_graph_dev                                                                                                                                          # OLD # engine/jit.py:60
                          if len(current_batch) > 0: flush_batch()                                                                                                                                       # engine/jit.py:62

                          return graphed_jit_cache                                                                                                                                                       # engine/jit.py:63

                      self._input_replace = get_input_replace(self._jit_cache, input_buffers)                                                                                                            # engine/jit.py:164

                      self._graphed = True                                                                                                                                                               # engine/jit.py:165
                    if DEBUG >= 1 and len(self._jit_cache) >= 10: print(f"jit execs {len(self._jit_cache)} kernels")                                                                                     # engine/jit.py:167

                    for ei in self._jit_cache: ei.run(var_vals, jit=True)                                                                                                                                # engine/jit.py:168

                  class ClangGraph(GraphRunner):                                                                                                                                                         # runtime/graph/clang.py:12
                    def __call__(self, rawbufs: List[Buffer], var_vals: Dict[Variable, int], wait=False):                                                                                                # runtime/graph/clang.py:37
                      return cpu_time_execution(                                                                                                                                                         # runtime/graph/clang.py:38
                      lambda: self.clprg(*[x._buf for x in rawbufs], *[x[1] for x in sorted(var_vals.items(), key=lambda x: x[0].expr)]), enable=wait)

                    self._clear_inputs()                                                                                                                                                                 # engine/jit.py:169

                    return self.ret                                                                                                                                                                      # engine/jit.py:170

                tokens = Tensor([x[start_pos:] for x in toks])                                                                                                                                     # OLD # test.py:170
              tok = self.model(tokens, Variable("start_pos", 1 if start_pos else 0, MAX_CONTEXT).bind(start_pos), temperature).numpy().tolist()                                                    # OLD # test.py:171
            start_pos = len(toks[0])                                                                                                                                                               # OLD # test.py:172
            for i,t in enumerate(tok): toks[i].append(t)                                                                                                                                           # OLD # test.py:173
          return [self.tokenizer.decode(x) for x in toks]                                                                                                                                                # test.py:174

    if not args.noshow:                                                                                                                                                                                  # test.py:206
      print('Generating text...')                                                                                                                                                                        # test.py:207
      if len(texts) == 1: print(texts[0])                                                                                                                                                                # test.py:208
    if args.temperature == 0 and args.model_size == "gpt2-medium" and args.count == 10:                                                                                                                  # test.py:213


What is the answer to life, the universe, and everything?

What if you were a brain swab? One that looked like this:

The picture above is a simulation of the brain swab (larger version can be found here)

Not only does it look extremely big, but the image also shows the "sugar molecule" (DNA) that is responsible for the brain's connection to the brain. This sugar molecule is what makes the brain "play."

With this medication, the body can use the brain as a
